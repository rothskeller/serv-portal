/*
The canonical form layout, with all elements present, is a sequence of rows like
this (depending on available width):
  +---------+  +-------+---------+  +-------+---------+-------+
  | LABEL   |  | LABEL | CONTROL |  | LABEL | CONTROL | ERROR |
  +---------+  |       +---------+  |       |         +-------+
  | CONTROL |  |       | ERROR   |  |       |         | HELP  |
  +---------+  |       +---------+  +-------+---------+-------+
  | ERROR   |  |       | HELP    |
  +---------+  +-------+---------+
  | HELP    |
  +---------+

A form (an element with class .form) is a sequence of form rows, as described
below.  Forms can have additional classes that affect their layout:
  - .form-2col restricts the form to at most two columns, i.e., it blocks the
    three-column layout.  This is used when centering a form, none of whose rows
    have help text, so that centering doesn't leave space for them.  It is also
    used for dialog boxes that we don't want to get too wide.
  - .form-centered centers the form in its parent container (rather than the
    default left justification).

The form should contain a sequence of form rows (elements with class .formRow).
Each row should contain elements matching one of these patterns:
  - [LABEL] INPUT [.formError] [.formHelp]
  - [LABEL] .formInput-2col
In the above list, LABEL can be either a <label> element or an element with
class .formLabel.  It is optional; if present, it gets placed in the LABEL area.
INPUT can be either an <input> element, a <select> element, a <textarea>
element, or an element with class .formInput.  It is required, and gets placed
in the CONTROL area.  Elements with classes .formError and .formHelp are
optional, and get placed in the ERROR and HELP areas, respectively.  An element
with class .formInput-2col spans the CONTROL, ERROR, and HELP areas.

Forms can also have rows with class .formRow-3col.  These span the entire row.

Finally, most forms end with a row with class .formButtons.  This contains a set
of buttons.  Each element within this row should be a button.  An empty element
of class .formButtonSpace is also allowed, to put extra space between buttons.
*/

/* IMPLEMENTATION
The CONTROL area is always 20rem wide.  The ERROR and HELP areas, if they
appear, are likewise 20rem wide.  Horizontal space between the columns is 1rem.
The LABEL area takes the width of the longest label, but for the purposes of
determining how many columns the layout will have, we assume that is 10rem.

To determine the number of columns we have room for, we would really like to use
CSS container size queries, but unfortunately they aren't well enough supported
yet.  Instead we use media size queries and incorporate knowledge of the page
layout.  We assume the menu bar is 7rem wide and appears on media >= 36rem wide.
We also assume a 1.5rem horizontal margin.  (That is correct for forms in modal
dialog boxes.  For forms on the main page, it should be 0.75rem, but it's much
easier to assume the larger horizontal margin for both.)

With this in mind, our breakpoints are:
   0.0rem   .form                                          single column layout, full width
  21.5rem   .form                                          single column layout, capped width
  34.0rem   .form                                          two column layout
  36.0rem   :where(.page:not(.page-noMenu) main) > .form   single column layout, capped width
  39.5rem   :where(.page:not(.page-noMenu) main) > .form   two column layout
  55.0rem   .form:not(.form-2col)                          three column layout
*/

/* Start with styles that don't depend on breakpoint. */
.form {
  display: grid;
  column-gap: 1rem;
  align-items: baseline;
  margin-top: -1rem; /* offset top margin of first row */
}
.form-centered {
  margin: 0 auto;
}
.formRow {
  /* .formRow is only used for semantic grouping and up-validate replacement. */
  display: contents;
}
.formButtons {
  margin-top: 2rem;
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
}
.formButtonSpace {
  width: 1rem;
}
.formButton-beforeAll {
  order: -1;
}
.formButtons2 {
  margin-top: 2rem;
  display: flex;
  flex-wrap: wrap;
  gap: 1.5rem;
}
.form.form-dialog .formButtons2 {
  flex-direction: row-reverse;
}
.formButtonGroup {
  display: flex;
  gap: 0.5rem;
}
.formRow > :is(label, .formLabel) {
  color: #212529;
  white-space: nowrap;
  line-height: 1.5;
  margin-top: 1rem;
}
.formRow > :is(label.checkLabel, .formLabel.checkLabel) {
  padding-top: 3px;
  line-height: 1;
  align-self: start;
}
.formRow > :is(input, select, textarea, .formInput) {
  width: 100%;
}
.formError {
  color: #dc3545;
  font-size: 80%;
  line-height: 1.2;
}
.formHelp {
  color: #6c757d;
  font-size: 80%;
  line-height: 1.2;
}
:is(input, select, textarea).formInput,
.formRow > :is(input, select, textarea) {
  width: 100%;
  height: calc(1.5rem + 0.75rem + 2px);
  padding: 0.375rem 0.75rem;
  border: 1px solid #ced4da;
  border-radius: 0.25rem;
  color: #495057;
  background-color: white;
  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
  line-height: 1.5;
}
:is(input, select, textarea).formInput:focus,
.formRow > :is(input, select, textarea):focus {
  border-color: #80bdff;
  outline: 0;
  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
}
textarea.formInput,
.formRow > textarea {
  height: calc(4.5rem + 0.75rem + 1px);
}
.formRange {
  /* .formRange is a group of input controls on a line, possibly with
      interspersed text. */
  display: flex;
  align-items: baseline;
}
.formRange input {
  width: auto;
}
.formRangeText {
  padding: 0 0.5rem;
}

/* The smallest breakpoint: single column, taking up the full width of its
   container, whatever that may be. */
@media all {
  .form {
    grid: auto-flow / min(100%, 20rem);
    width: 100%;
  }
  .formRow-3col,
  .formButtons {
    grid-column: 1;
  }
  .formRow-3col {
    margin-top: 1rem;
  }
  .formRow > :is(label, .formLabel) {
    grid-column: 1;
    grid-row-end: span 1;
    margin-top: 1rem;
  }
  .formRow > :is(.formInput-2col, input, select, textarea, .formInput) {
    grid-column: 1;
    grid-row-end: span 1;
    margin-top: 1rem;
  }
  .formRow > :is(label, .formLabel) + :is(input, select, textarea, .formInput) {
    margin-top: 0.25rem;
  }
  .formError,
  .formHelp {
    grid-column: 1;
    margin-top: 0.25rem;
  }
}

/* The next breakpoint: single column, taking up exactly 20rem.  We switch to
   this when the container just allows 20rem of width, plus margins.  This is
   really two breakpoints, because we have to handle it differently for main
   page forms (margin 0.75rem) and dialog forms (margin 1.5rem). */
@media (min-width: 21.5em) {
  :where(main) > .form {
    grid: auto-flow / 20rem;
    width: auto;
  }
}
@media (min-width: 23em) {
  :where(up-modal) .form {
    grid: auto-flow / 20rem;
    width: auto;
  }
}

/* The next breakpoint has two columns: one for the labels and one for
   everything else.  Each form row takes up two grid rows, with the labels and
   controls spanning the two rows and the error and help text in one row each.
   We switch to this when there's room for a 10rem label and a 20rem control. */
@media (min-width: 34em) {
  .form {
    grid: auto-flow / min-content 20rem;
    width: auto;
  }
  .formRow-3col,
  .formButtons,
  .formButtons2 {
    grid-column: 1 / 3;
  }
  .formRow > :is(label, .formLabel) {
    /* grid-column: 1; */
    /* grid-row-end: span 1; */
    /* margin-top: 1rem; */
  }
  .formRow > :is(.formInput-2col, input, select, textarea, .formInput) {
    grid-column: 2;
    /* grid-row-end: span 1; */
    /* margin-top: 1rem; */
  }
  .formRow > :is(label, .formLabel) + :is(input, select, textarea, .formInput) {
    margin-top: 1rem;
  }
  .formError,
  .formHelp {
    grid-column: 2;
    /* margin-top: 0.25rem; */
  }
}

/* The next breakpoint goes back to a single column when the page menu appears
   and we're back to not having room for two columns.  This happens at 36rem,
   and only for a main page form on a page with a menu. */
@media (min-width: 36em) {
  :where(.page:not(.page-noMenu) main) > .form {
    grid: auto-flow / 20rem;
    /* width: auto; */
  }
  :where(.page:not(.page-noMenu) main > .form) :is(.formRow-3col, .formButtons, .formButtons2) {
    grid-column: 1;
  }
  :where(.page:not(.page-noMenu) main > .form) .formRow > :is(label, .formLabel) {
    /* grid-column: 1; */
    /* grid-row-end: span 1; */
    /* margin-top: 1rem; */
  }
  :where(.page:not(.page-noMenu) main > .form)
    .formRow
    > :is(.formInput-2col, input, select, textarea, .formInput) {
    grid-column: 1;
    /* grid-row-end: span 1; */
    /* margin-top: 1rem; */
  }
  :where(.page:not(.page-noMenu) main > .form)
    .formRow
    > :is(label, .formLabel)
    + :is(input, select, textarea, .formInput) {
    margin-top: 0.25rem;
  }
  :where(.page:not(.page-noMenu) main > .form) :is(.formError, .formHelp) {
    grid-column: 1;
    /* margin-top: 0.25rem; */
  }
}
/* The next breakpoint goes back to two columns at 39.5rem.  Note that this gives the
   same form selector as the previous breakpoint, even though it applies to all
   forms, so we don't have CSS specificity problems. */
@media (min-width: 39.5em) {
  :where(.page:not(.page-noMenu) main) > .form {
    grid: auto-flow / min-content 20rem;
  }
  :where(.page:not(.page-noMenu) main > .form) :is(.formRow-3col, .formButtons, .formButtons2) {
    grid-column: 1 / 3;
  }
  :where(.page:not(.page-noMenu) main > .form) .formRow > :is(label, .formLabel) {
    /* grid-column: 1; */
    /* grid-row-end: span 1; */
    /* margin-top: 1rem; */
  }
  :where(.page:not(.page-noMenu) main > .form)
    .formRow
    > :is(.formInput-2col, input, select, textarea, .formInput) {
    grid-column: 2;
    /* grid-row-end: span 1; */
    /* margin-top: 1rem; */
  }
  :where(.page:not(.page-noMenu) main > .form)
    .formRow
    > :is(label, .formLabel)
    + :is(input, select, textarea, .formInput) {
    margin-top: 1rem;
  }
  :where(.page:not(.page-noMenu) main > .form) :is(.formError, .formHelp) {
    grid-column: 2;
    /* margin-top: 0.25rem; */
  }
}
/* last breakpoint: three columns.  We switch to this when there's room for a
   10rem label, a 20rem control, and a 20rem error/help column.  This happens at
   55rem, and not at all if we're forced to two-column layout. */
@media (min-width: 55em) {
  .form:not(.form-2col) {
    grid: auto-flow / min-content 20rem 20rem;
    /* width: auto; */
  }
  :where(.form:not(.form-2col)) :is(.formRow-3col, .formButtons) {
    grid-column: 1 / 4;
  }
  :where(.form:not(.form-2col)) .formRow > :is(label, .formLabel) {
    /* grid-column: 1; */
    grid-row-end: span 2;
    /* margin-top: 1rem; */
  }
  :where(.form:not(.form-2col)) .formRow > .formInput-2col {
    grid-column: 2 / 4;
    grid-row-end: span 2;
    /* margin-top: 1rem; */
  }
  :where(.form:not(.form-2col)) .formRow > :is(input, select, textarea, .formInput) {
    grid-column: 2;
    grid-row-end: span 2;
    /* margin-top: 1rem; */
  }
  :where(.form:not(.form-2col))
    .formRow
    > :is(label, .formLabel)
    + :is(input, select, textarea, .formInput) {
    /* margin-top: 1rem; */
  }
  :where(.form:not(.form-2col)) :is(.formError, .formHelp) {
    grid-column: 3;
    margin-top: 1rem;
  }
  :where(.form:not(.form-2col)) .formError:not(:last-child) {
    align-self: start;
  }
  :where(.form:not(.form-2col)) .formError + .formHelp {
    margin-top: 0.25rem;
    align-self: start;
  }
}
