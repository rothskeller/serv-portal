// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6578def1DecodeSunnyvaleservOrgPortalModel(in *jlexer.Lexer, out *Venues) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "venues":
			if in.IsNull() {
				in.Skip()
				out.Venues = nil
			} else {
				in.Delim('[')
				if out.Venues == nil {
					if !in.IsDelim(']') {
						out.Venues = make([]*Venue, 0, 8)
					} else {
						out.Venues = []*Venue{}
					}
				} else {
					out.Venues = (out.Venues)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Venue
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Venue)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Venues = append(out.Venues, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel(out *jwriter.Writer, in Venues) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Venues) != 0 {
		const prefix string = ",\"venues\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v2, v3 := range in.Venues {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Venues) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Venues) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Venues) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Venues) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel(l, v)
}
func easyjson6578def1DecodeSunnyvaleservOrgPortalModel1(in *jlexer.Lexer, out *Venue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = VenueID(in.Int())
		case "name":
			out.Name = string(in.String())
		case "address":
			out.Address = string(in.String())
		case "city":
			out.City = string(in.String())
		case "url":
			out.URL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel1(out *jwriter.Writer, in Venue) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Address != "" {
		const prefix string = ",\"address\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Address))
	}
	if in.City != "" {
		const prefix string = ",\"city\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.City))
	}
	if in.URL != "" {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.URL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Venue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Venue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Venue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Venue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel1(l, v)
}
func easyjson6578def1DecodeSunnyvaleservOrgPortalModel2(in *jlexer.Lexer, out *TextResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "response":
			out.Response = string(in.String())
		case "timestamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Timestamp).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel2(out *jwriter.Writer, in TextResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Response != "" {
		const prefix string = ",\"response\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Response))
	}
	{
		const prefix string = ",\"timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Timestamp).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TextResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TextResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TextResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TextResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel2(l, v)
}
func easyjson6578def1DecodeSunnyvaleservOrgPortalModel3(in *jlexer.Lexer, out *TextRecipient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "recipient":
			out.Recipient = PersonID(in.Int())
		case "number":
			out.Number = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "timestamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Timestamp).UnmarshalJSON(data))
			}
		case "responses":
			if in.IsNull() {
				in.Skip()
				out.Responses = nil
			} else {
				in.Delim('[')
				if out.Responses == nil {
					if !in.IsDelim(']') {
						out.Responses = make([]*TextResponse, 0, 8)
					} else {
						out.Responses = []*TextResponse{}
					}
				} else {
					out.Responses = (out.Responses)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *TextResponse
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(TextResponse)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.Responses = append(out.Responses, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel3(out *jwriter.Writer, in TextRecipient) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Recipient != 0 {
		const prefix string = ",\"recipient\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Recipient))
	}
	if in.Number != "" {
		const prefix string = ",\"number\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Number))
	}
	if in.Status != "" {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Timestamp).MarshalJSON())
	}
	if len(in.Responses) != 0 {
		const prefix string = ",\"responses\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v5, v6 := range in.Responses {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TextRecipient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TextRecipient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TextRecipient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TextRecipient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel3(l, v)
}
func easyjson6578def1DecodeSunnyvaleservOrgPortalModel4(in *jlexer.Lexer, out *TextMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = TextMessageID(in.Int())
		case "sender":
			out.Sender = PersonID(in.Int())
		case "groups":
			if in.IsNull() {
				in.Skip()
				out.Groups = nil
			} else {
				in.Delim('[')
				if out.Groups == nil {
					if !in.IsDelim(']') {
						out.Groups = make([]GroupID, 0, 8)
					} else {
						out.Groups = []GroupID{}
					}
				} else {
					out.Groups = (out.Groups)[:0]
				}
				for !in.IsDelim(']') {
					var v7 GroupID
					v7 = GroupID(in.Int())
					out.Groups = append(out.Groups, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "timestamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Timestamp).UnmarshalJSON(data))
			}
		case "message":
			out.Message = string(in.String())
		case "recipients":
			if in.IsNull() {
				in.Skip()
				out.Recipients = nil
			} else {
				in.Delim('[')
				if out.Recipients == nil {
					if !in.IsDelim(']') {
						out.Recipients = make([]*TextRecipient, 0, 8)
					} else {
						out.Recipients = []*TextRecipient{}
					}
				} else {
					out.Recipients = (out.Recipients)[:0]
				}
				for !in.IsDelim(']') {
					var v8 *TextRecipient
					if in.IsNull() {
						in.Skip()
						v8 = nil
					} else {
						if v8 == nil {
							v8 = new(TextRecipient)
						}
						(*v8).UnmarshalEasyJSON(in)
					}
					out.Recipients = append(out.Recipients, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel4(out *jwriter.Writer, in TextMessage) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Sender != 0 {
		const prefix string = ",\"sender\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Sender))
	}
	if len(in.Groups) != 0 {
		const prefix string = ",\"groups\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v9, v10 := range in.Groups {
				if v9 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v10))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Timestamp).MarshalJSON())
	}
	if in.Message != "" {
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	if len(in.Recipients) != 0 {
		const prefix string = ",\"recipients\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v11, v12 := range in.Recipients {
				if v11 > 0 {
					out.RawByte(',')
				}
				if v12 == nil {
					out.RawString("null")
				} else {
					(*v12).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TextMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TextMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TextMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TextMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel4(l, v)
}
func easyjson6578def1DecodeSunnyvaleservOrgPortalModel5(in *jlexer.Lexer, out *Roles) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "roles":
			if in.IsNull() {
				in.Skip()
				out.Roles = nil
			} else {
				in.Delim('[')
				if out.Roles == nil {
					if !in.IsDelim(']') {
						out.Roles = make([]*Role2, 0, 8)
					} else {
						out.Roles = []*Role2{}
					}
				} else {
					out.Roles = (out.Roles)[:0]
				}
				for !in.IsDelim(']') {
					var v13 *Role2
					if in.IsNull() {
						in.Skip()
						v13 = nil
					} else {
						if v13 == nil {
							v13 = new(Role2)
						}
						(*v13).UnmarshalEasyJSON(in)
					}
					out.Roles = append(out.Roles, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel5(out *jwriter.Writer, in Roles) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Roles) != 0 {
		const prefix string = ",\"roles\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v14, v15 := range in.Roles {
				if v14 > 0 {
					out.RawByte(',')
				}
				if v15 == nil {
					out.RawString("null")
				} else {
					(*v15).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Roles) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Roles) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Roles) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Roles) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel5(l, v)
}
func easyjson6578def1DecodeSunnyvaleservOrgPortalModel6(in *jlexer.Lexer, out *Role2) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = Role2ID(in.Int())
		case "name":
			out.Name = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "org":
			out.Org = Org(in.Uint8())
		case "privLevel":
			out.PrivLevel = PrivLevel(in.Uint8())
		case "showRoster":
			out.ShowRoster = bool(in.Bool())
		case "implicitOnly":
			out.ImplicitOnly = bool(in.Bool())
		case "priority":
			out.Priority = int(in.Int())
		case "implies":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Implies = make(map[Role2ID]bool)
				} else {
					out.Implies = nil
				}
				for !in.IsDelim('}') {
					key := Role2ID(in.IntStr())
					in.WantColon()
					var v16 bool
					v16 = bool(in.Bool())
					(out.Implies)[key] = v16
					in.WantComma()
				}
				in.Delim('}')
			}
		case "lists":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Lists = make(map[ListID]RoleToList)
				} else {
					out.Lists = nil
				}
				for !in.IsDelim('}') {
					key := ListID(in.IntStr())
					in.WantColon()
					var v17 RoleToList
					v17 = RoleToList(in.Uint8())
					(out.Lists)[key] = v17
					in.WantComma()
				}
				in.Delim('}')
			}
		case "people":
			if in.IsNull() {
				in.Skip()
				out.People = nil
			} else {
				in.Delim('[')
				if out.People == nil {
					if !in.IsDelim(']') {
						out.People = make([]PersonID, 0, 8)
					} else {
						out.People = []PersonID{}
					}
				} else {
					out.People = (out.People)[:0]
				}
				for !in.IsDelim(']') {
					var v18 PersonID
					v18 = PersonID(in.Int())
					out.People = append(out.People, v18)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel6(out *jwriter.Writer, in Role2) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	if in.Org != 0 {
		const prefix string = ",\"org\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Org))
	}
	if in.PrivLevel != 0 {
		const prefix string = ",\"privLevel\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.PrivLevel))
	}
	if in.ShowRoster {
		const prefix string = ",\"showRoster\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ShowRoster))
	}
	if in.ImplicitOnly {
		const prefix string = ",\"implicitOnly\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ImplicitOnly))
	}
	if in.Priority != 0 {
		const prefix string = ",\"priority\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Priority))
	}
	if len(in.Implies) != 0 {
		const prefix string = ",\"implies\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v19First := true
			for v19Name, v19Value := range in.Implies {
				if v19First {
					v19First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v19Name))
				out.RawByte(':')
				out.Bool(bool(v19Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Lists) != 0 {
		const prefix string = ",\"lists\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v20First := true
			for v20Name, v20Value := range in.Lists {
				if v20First {
					v20First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v20Name))
				out.RawByte(':')
				out.Uint8(uint8(v20Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.People) != 0 {
		const prefix string = ",\"people\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v21, v22 := range in.People {
				if v21 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v22))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Role2) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Role2) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Role2) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Role2) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel6(l, v)
}
func easyjson6578def1DecodeSunnyvaleservOrgPortalModel7(in *jlexer.Lexer, out *Role) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = RoleID(in.Int())
		case "tag":
			out.Tag = RoleTag(in.String())
		case "name":
			out.Name = string(in.String())
		case "individual":
			out.Individual = bool(in.Bool())
		case "detail":
			out.Detail = bool(in.Bool())
		case "permissions":
			(out.Permissions).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel7(out *jwriter.Writer, in Role) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Tag != "" {
		const prefix string = ",\"tag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Tag))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Individual {
		const prefix string = ",\"individual\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Individual))
	}
	if in.Detail {
		const prefix string = ",\"detail\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Detail))
	}
	if in.Permissions != 0 {
		const prefix string = ",\"permissions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Permissions).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Role) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Role) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Role) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Role) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel7(l, v)
}
func easyjson6578def1DecodeSunnyvaleservOrgPortalModel8(in *jlexer.Lexer, out *PersonNote) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "note":
			out.Note = string(in.String())
		case "date":
			out.Date = string(in.String())
		case "privilege":
			(out.Privilege).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel8(out *jwriter.Writer, in PersonNote) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Note != "" {
		const prefix string = ",\"note\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Note))
	}
	if in.Date != "" {
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Date))
	}
	if in.Privilege != 0 {
		const prefix string = ",\"privilege\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Privilege).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PersonNote) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PersonNote) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PersonNote) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PersonNote) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel8(l, v)
}
func easyjson6578def1DecodeSunnyvaleservOrgPortalModel9(in *jlexer.Lexer, out *Person) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = PersonID(in.Int())
		case "informalName":
			out.InformalName = string(in.String())
		case "formalName":
			out.FormalName = string(in.String())
		case "sortName":
			out.SortName = string(in.String())
		case "callSign":
			out.CallSign = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "email2":
			out.Email2 = string(in.String())
		case "homeAddress":
			(out.HomeAddress).UnmarshalEasyJSON(in)
		case "workAddress":
			(out.WorkAddress).UnmarshalEasyJSON(in)
		case "mailAddress":
			(out.MailAddress).UnmarshalEasyJSON(in)
		case "cellPhone":
			out.CellPhone = string(in.String())
		case "homePhone":
			out.HomePhone = string(in.String())
		case "workPhone":
			out.WorkPhone = string(in.String())
		case "password":
			if in.IsNull() {
				in.Skip()
				out.Password = nil
			} else {
				out.Password = in.Bytes()
			}
		case "badLoginCount":
			out.BadLoginCount = int(in.Int())
		case "badLoginTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.BadLoginTime).UnmarshalJSON(data))
			}
		case "pwresetToken":
			out.PWResetToken = string(in.String())
		case "pwresetTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.PWResetTime).UnmarshalJSON(data))
			}
		case "notes":
			if in.IsNull() {
				in.Skip()
				out.Notes = nil
			} else {
				in.Delim('[')
				if out.Notes == nil {
					if !in.IsDelim(']') {
						out.Notes = make([]*PersonNote, 0, 8)
					} else {
						out.Notes = []*PersonNote{}
					}
				} else {
					out.Notes = (out.Notes)[:0]
				}
				for !in.IsDelim(']') {
					var v24 *PersonNote
					if in.IsNull() {
						in.Skip()
						v24 = nil
					} else {
						if v24 == nil {
							v24 = new(PersonNote)
						}
						(*v24).UnmarshalEasyJSON(in)
					}
					out.Notes = append(out.Notes, v24)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "no_email":
			out.NoEmail = bool(in.Bool())
		case "no_text":
			out.NoText = bool(in.Bool())
		case "unsubscribe_token":
			out.UnsubscribeToken = string(in.String())
		case "volgistics_id":
			out.VolgisticsID = int(in.Int())
		case "background_check":
			out.BackgroundCheck = string(in.String())
		case "hours_token":
			out.HoursToken = string(in.String())
		case "hours_reminder":
			out.HoursReminder = bool(in.Bool())
		case "dsw_registrations":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.DSWRegistrations = make(map[DSWClass]time.Time)
				for !in.IsDelim('}') {
					key := DSWClass(in.IntStr())
					in.WantColon()
					var v25 time.Time
					if data := in.Raw(); in.Ok() {
						in.AddError((v25).UnmarshalJSON(data))
					}
					(out.DSWRegistrations)[key] = v25
					in.WantComma()
				}
				in.Delim('}')
			}
		case "dsw_until":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.DSWUntil = make(map[DSWClass]time.Time)
				for !in.IsDelim('}') {
					key := DSWClass(in.IntStr())
					in.WantColon()
					var v26 time.Time
					if data := in.Raw(); in.Ok() {
						in.AddError((v26).UnmarshalJSON(data))
					}
					(out.DSWUntil)[key] = v26
					in.WantComma()
				}
				in.Delim('}')
			}
		case "identification":
			out.Identification = IdentType(in.Uint8())
		case "roles":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Roles = make(map[Role2ID]bool)
				} else {
					out.Roles = nil
				}
				for !in.IsDelim('}') {
					key := Role2ID(in.IntStr())
					in.WantColon()
					var v27 bool
					v27 = bool(in.Bool())
					(out.Roles)[key] = v27
					in.WantComma()
				}
				in.Delim('}')
			}
		case "orgs":
			if in.IsNull() {
				in.Skip()
				out.Orgs = nil
			} else {
				in.Delim('[')
				if out.Orgs == nil {
					if !in.IsDelim(']') {
						out.Orgs = make([]OrgMembership, 0, 2)
					} else {
						out.Orgs = []OrgMembership{}
					}
				} else {
					out.Orgs = (out.Orgs)[:0]
				}
				for !in.IsDelim(']') {
					var v28 OrgMembership
					(v28).UnmarshalEasyJSON(in)
					out.Orgs = append(out.Orgs, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel9(out *jwriter.Writer, in Person) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"informalName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.InformalName))
	}
	{
		const prefix string = ",\"formalName\":"
		out.RawString(prefix)
		out.String(string(in.FormalName))
	}
	{
		const prefix string = ",\"sortName\":"
		out.RawString(prefix)
		out.String(string(in.SortName))
	}
	if in.CallSign != "" {
		const prefix string = ",\"callSign\":"
		out.RawString(prefix)
		out.String(string(in.CallSign))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	if in.Email2 != "" {
		const prefix string = ",\"email2\":"
		out.RawString(prefix)
		out.String(string(in.Email2))
	}
	{
		const prefix string = ",\"homeAddress\":"
		out.RawString(prefix)
		(in.HomeAddress).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"workAddress\":"
		out.RawString(prefix)
		(in.WorkAddress).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"mailAddress\":"
		out.RawString(prefix)
		(in.MailAddress).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"cellPhone\":"
		out.RawString(prefix)
		out.String(string(in.CellPhone))
	}
	{
		const prefix string = ",\"homePhone\":"
		out.RawString(prefix)
		out.String(string(in.HomePhone))
	}
	{
		const prefix string = ",\"workPhone\":"
		out.RawString(prefix)
		out.String(string(in.WorkPhone))
	}
	if len(in.Password) != 0 {
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Password)
	}
	if in.BadLoginCount != 0 {
		const prefix string = ",\"badLoginCount\":"
		out.RawString(prefix)
		out.Int(int(in.BadLoginCount))
	}
	{
		const prefix string = ",\"badLoginTime\":"
		out.RawString(prefix)
		out.Raw((in.BadLoginTime).MarshalJSON())
	}
	if in.PWResetToken != "" {
		const prefix string = ",\"pwresetToken\":"
		out.RawString(prefix)
		out.String(string(in.PWResetToken))
	}
	{
		const prefix string = ",\"pwresetTime\":"
		out.RawString(prefix)
		out.Raw((in.PWResetTime).MarshalJSON())
	}
	if len(in.Notes) != 0 {
		const prefix string = ",\"notes\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v31, v32 := range in.Notes {
				if v31 > 0 {
					out.RawByte(',')
				}
				if v32 == nil {
					out.RawString("null")
				} else {
					(*v32).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.NoEmail {
		const prefix string = ",\"no_email\":"
		out.RawString(prefix)
		out.Bool(bool(in.NoEmail))
	}
	if in.NoText {
		const prefix string = ",\"no_text\":"
		out.RawString(prefix)
		out.Bool(bool(in.NoText))
	}
	if in.UnsubscribeToken != "" {
		const prefix string = ",\"unsubscribe_token\":"
		out.RawString(prefix)
		out.String(string(in.UnsubscribeToken))
	}
	if in.VolgisticsID != 0 {
		const prefix string = ",\"volgistics_id\":"
		out.RawString(prefix)
		out.Int(int(in.VolgisticsID))
	}
	if in.BackgroundCheck != "" {
		const prefix string = ",\"background_check\":"
		out.RawString(prefix)
		out.String(string(in.BackgroundCheck))
	}
	if in.HoursToken != "" {
		const prefix string = ",\"hours_token\":"
		out.RawString(prefix)
		out.String(string(in.HoursToken))
	}
	if in.HoursReminder {
		const prefix string = ",\"hours_reminder\":"
		out.RawString(prefix)
		out.Bool(bool(in.HoursReminder))
	}
	{
		const prefix string = ",\"dsw_registrations\":"
		out.RawString(prefix)
		if in.DSWRegistrations == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v33First := true
			for v33Name, v33Value := range in.DSWRegistrations {
				if v33First {
					v33First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v33Name))
				out.RawByte(':')
				out.Raw((v33Value).MarshalJSON())
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"dsw_until\":"
		out.RawString(prefix)
		if in.DSWUntil == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v34First := true
			for v34Name, v34Value := range in.DSWUntil {
				if v34First {
					v34First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v34Name))
				out.RawByte(':')
				out.Raw((v34Value).MarshalJSON())
			}
			out.RawByte('}')
		}
	}
	if in.Identification != 0 {
		const prefix string = ",\"identification\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Identification))
	}
	if len(in.Roles) != 0 {
		const prefix string = ",\"roles\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v35First := true
			for v35Name, v35Value := range in.Roles {
				if v35First {
					v35First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v35Name))
				out.RawByte(':')
				out.Bool(bool(v35Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"orgs\":"
		out.RawString(prefix)
		if in.Orgs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v36, v37 := range in.Orgs {
				if v36 > 0 {
					out.RawByte(',')
				}
				(v37).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Person) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Person) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Person) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Person) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel9(l, v)
}
func easyjson6578def1DecodeSunnyvaleservOrgPortalModel10(in *jlexer.Lexer, out *OrgMembership) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "privLevel":
			out.PrivLevel = PrivLevel(in.Uint8())
		case "title":
			out.Title = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel10(out *jwriter.Writer, in OrgMembership) {
	out.RawByte('{')
	first := true
	_ = first
	if in.PrivLevel != 0 {
		const prefix string = ",\"privLevel\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.PrivLevel))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrgMembership) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrgMembership) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrgMembership) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrgMembership) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel10(l, v)
}
func easyjson6578def1DecodeSunnyvaleservOrgPortalModel11(in *jlexer.Lexer, out *Lists) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "lists":
			if in.IsNull() {
				in.Skip()
				out.Lists = nil
			} else {
				in.Delim('[')
				if out.Lists == nil {
					if !in.IsDelim(']') {
						out.Lists = make([]*List, 0, 8)
					} else {
						out.Lists = []*List{}
					}
				} else {
					out.Lists = (out.Lists)[:0]
				}
				for !in.IsDelim(']') {
					var v38 *List
					if in.IsNull() {
						in.Skip()
						v38 = nil
					} else {
						if v38 == nil {
							v38 = new(List)
						}
						(*v38).UnmarshalEasyJSON(in)
					}
					out.Lists = append(out.Lists, v38)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel11(out *jwriter.Writer, in Lists) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Lists) != 0 {
		const prefix string = ",\"lists\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v39, v40 := range in.Lists {
				if v39 > 0 {
					out.RawByte(',')
				}
				if v40 == nil {
					out.RawString("null")
				} else {
					(*v40).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Lists) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Lists) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Lists) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Lists) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel11(l, v)
}
func easyjson6578def1DecodeSunnyvaleservOrgPortalModel12(in *jlexer.Lexer, out *List) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = ListID(in.Int())
		case "type":
			out.Type = ListType(in.Uint8())
		case "name":
			out.Name = string(in.String())
		case "people":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.People = make(map[PersonID]ListPersonStatus)
				} else {
					out.People = nil
				}
				for !in.IsDelim('}') {
					key := PersonID(in.IntStr())
					in.WantColon()
					var v41 ListPersonStatus
					v41 = ListPersonStatus(in.Uint8())
					(out.People)[key] = v41
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel12(out *jwriter.Writer, in List) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Type != 0 {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Type))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if len(in.People) != 0 {
		const prefix string = ",\"people\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v42First := true
			for v42Name, v42Value := range in.People {
				if v42First {
					v42First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v42Name))
				out.RawByte(':')
				out.Uint8(uint8(v42Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v List) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v List) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *List) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *List) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel12(l, v)
}
func easyjson6578def1DecodeSunnyvaleservOrgPortalModel13(in *jlexer.Lexer, out *Group) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = GroupID(in.Int())
		case "tag":
			out.Tag = GroupTag(in.String())
		case "name":
			out.Name = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "no_email":
			if in.IsNull() {
				in.Skip()
				out.NoEmail = nil
			} else {
				in.Delim('[')
				if out.NoEmail == nil {
					if !in.IsDelim(']') {
						out.NoEmail = make([]PersonID, 0, 8)
					} else {
						out.NoEmail = []PersonID{}
					}
				} else {
					out.NoEmail = (out.NoEmail)[:0]
				}
				for !in.IsDelim(']') {
					var v43 PersonID
					v43 = PersonID(in.Int())
					out.NoEmail = append(out.NoEmail, v43)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "no_text":
			if in.IsNull() {
				in.Skip()
				out.NoText = nil
			} else {
				in.Delim('[')
				if out.NoText == nil {
					if !in.IsDelim(']') {
						out.NoText = make([]PersonID, 0, 8)
					} else {
						out.NoText = []PersonID{}
					}
				} else {
					out.NoText = (out.NoText)[:0]
				}
				for !in.IsDelim(']') {
					var v44 PersonID
					v44 = PersonID(in.Int())
					out.NoText = append(out.NoText, v44)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "organization":
			(out.Organization).UnmarshalEasyJSON(in)
		case "getHours":
			out.GetHours = bool(in.Bool())
		case "dswRequired":
			out.DSWRequired = bool(in.Bool())
		case "backgroundCheckRequired":
			out.BackgroundCheckRequired = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel13(out *jwriter.Writer, in Group) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Tag != "" {
		const prefix string = ",\"tag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Tag))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	if len(in.NoEmail) != 0 {
		const prefix string = ",\"no_email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v45, v46 := range in.NoEmail {
				if v45 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v46))
			}
			out.RawByte(']')
		}
	}
	if len(in.NoText) != 0 {
		const prefix string = ",\"no_text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v47, v48 := range in.NoText {
				if v47 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v48))
			}
			out.RawByte(']')
		}
	}
	if in.Organization != 0 {
		const prefix string = ",\"organization\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Organization).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"getHours\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.GetHours))
	}
	if in.DSWRequired {
		const prefix string = ",\"dswRequired\":"
		out.RawString(prefix)
		out.Bool(bool(in.DSWRequired))
	}
	{
		const prefix string = ",\"backgroundCheckRequired\":"
		out.RawString(prefix)
		out.Bool(bool(in.BackgroundCheckRequired))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Group) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Group) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Group) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Group) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel13(l, v)
}
func easyjson6578def1DecodeSunnyvaleservOrgPortalModel14(in *jlexer.Lexer, out *Folder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = FolderID(in.Int())
		case "parent":
			out.Parent = FolderID(in.Int())
		case "name":
			out.Name = string(in.String())
		case "group":
			out.Group = GroupID(in.Int())
		case "documents":
			if in.IsNull() {
				in.Skip()
				out.Documents = nil
			} else {
				in.Delim('[')
				if out.Documents == nil {
					if !in.IsDelim(']') {
						out.Documents = make([]*Document, 0, 8)
					} else {
						out.Documents = []*Document{}
					}
				} else {
					out.Documents = (out.Documents)[:0]
				}
				for !in.IsDelim(']') {
					var v49 *Document
					if in.IsNull() {
						in.Skip()
						v49 = nil
					} else {
						if v49 == nil {
							v49 = new(Document)
						}
						(*v49).UnmarshalEasyJSON(in)
					}
					out.Documents = append(out.Documents, v49)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "approvals":
			out.Approvals = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel14(out *jwriter.Writer, in Folder) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Parent != 0 {
		const prefix string = ",\"parent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Parent))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Group != 0 {
		const prefix string = ",\"group\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Group))
	}
	if len(in.Documents) != 0 {
		const prefix string = ",\"documents\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v50, v51 := range in.Documents {
				if v50 > 0 {
					out.RawByte(',')
				}
				if v51 == nil {
					out.RawString("null")
				} else {
					(*v51).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Approvals != 0 {
		const prefix string = ",\"approvals\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Approvals))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Folder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Folder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Folder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Folder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel14(l, v)
}
func easyjson6578def1DecodeSunnyvaleservOrgPortalModel15(in *jlexer.Lexer, out *Event) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = EventID(in.Int())
		case "name":
			out.Name = string(in.String())
		case "date":
			out.Date = string(in.String())
		case "start":
			out.Start = string(in.String())
		case "end":
			out.End = string(in.String())
		case "venue":
			out.Venue = VenueID(in.Int())
		case "details":
			out.Details = string(in.String())
		case "type":
			out.Type = EventType(in.Uint32())
		case "renewsDSW":
			out.RenewsDSW = bool(in.Bool())
		case "coveredByDSW":
			out.CoveredByDSW = bool(in.Bool())
		case "org":
			out.Org = Org(in.Uint8())
		case "roles":
			if in.IsNull() {
				in.Skip()
				out.Roles = nil
			} else {
				in.Delim('[')
				if out.Roles == nil {
					if !in.IsDelim(']') {
						out.Roles = make([]Role2ID, 0, 8)
					} else {
						out.Roles = []Role2ID{}
					}
				} else {
					out.Roles = (out.Roles)[:0]
				}
				for !in.IsDelim(']') {
					var v52 Role2ID
					v52 = Role2ID(in.Int())
					out.Roles = append(out.Roles, v52)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel15(out *jwriter.Writer, in Event) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Date != "" {
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Date))
	}
	if in.Start != "" {
		const prefix string = ",\"start\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Start))
	}
	if in.End != "" {
		const prefix string = ",\"end\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.End))
	}
	if in.Venue != 0 {
		const prefix string = ",\"venue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Venue))
	}
	if in.Details != "" {
		const prefix string = ",\"details\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Details))
	}
	if in.Type != 0 {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Type))
	}
	if in.RenewsDSW {
		const prefix string = ",\"renewsDSW\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.RenewsDSW))
	}
	if in.CoveredByDSW {
		const prefix string = ",\"coveredByDSW\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.CoveredByDSW))
	}
	if in.Org != 0 {
		const prefix string = ",\"org\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Org))
	}
	if len(in.Roles) != 0 {
		const prefix string = ",\"roles\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v53, v54 := range in.Roles {
				if v53 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v54))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Event) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Event) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Event) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Event) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel15(l, v)
}
func easyjson6578def1DecodeSunnyvaleservOrgPortalModel16(in *jlexer.Lexer, out *Document) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = DocumentID(in.Int())
		case "name":
			out.Name = string(in.String())
		case "posted_by":
			out.PostedBy = PersonID(in.Int())
		case "posted_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.PostedAt).UnmarshalJSON(data))
			}
		case "needs_approval":
			out.NeedsApproval = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel16(out *jwriter.Writer, in Document) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.PostedBy != 0 {
		const prefix string = ",\"posted_by\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PostedBy))
	}
	{
		const prefix string = ",\"posted_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.PostedAt).MarshalJSON())
	}
	if in.NeedsApproval {
		const prefix string = ",\"needs_approval\":"
		out.RawString(prefix)
		out.Bool(bool(in.NeedsApproval))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Document) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Document) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Document) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Document) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel16(l, v)
}
func easyjson6578def1DecodeSunnyvaleservOrgPortalModel17(in *jlexer.Lexer, out *Address) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "sameAsHome":
			out.SameAsHome = bool(in.Bool())
		case "latitude":
			out.Latitude = float64(in.Float64())
		case "longitude":
			out.Longitude = float64(in.Float64())
		case "fireDistrict":
			out.FireDistrict = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel17(out *jwriter.Writer, in Address) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Address != "" {
		const prefix string = ",\"address\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"sameAsHome\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.SameAsHome))
	}
	if in.Latitude != 0 {
		const prefix string = ",\"latitude\":"
		out.RawString(prefix)
		out.Float64(float64(in.Latitude))
	}
	if in.Longitude != 0 {
		const prefix string = ",\"longitude\":"
		out.RawString(prefix)
		out.Float64(float64(in.Longitude))
	}
	{
		const prefix string = ",\"fireDistrict\":"
		out.RawString(prefix)
		out.Int(int(in.FireDistrict))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Address) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Address) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Address) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Address) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel17(l, v)
}
