// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6578def1DecodeSunnyvaleservOrgPortalModel(in *jlexer.Lexer, out *Venues) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "venues":
			if in.IsNull() {
				in.Skip()
				out.Venues = nil
			} else {
				in.Delim('[')
				if out.Venues == nil {
					if !in.IsDelim(']') {
						out.Venues = make([]*Venue, 0, 8)
					} else {
						out.Venues = []*Venue{}
					}
				} else {
					out.Venues = (out.Venues)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Venue
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Venue)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Venues = append(out.Venues, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel(out *jwriter.Writer, in Venues) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Venues) != 0 {
		const prefix string = ",\"venues\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v2, v3 := range in.Venues {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Venues) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Venues) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Venues) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Venues) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel(l, v)
}
func easyjson6578def1DecodeSunnyvaleservOrgPortalModel1(in *jlexer.Lexer, out *Venue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = VenueID(in.Int())
		case "name":
			out.Name = string(in.String())
		case "address":
			out.Address = string(in.String())
		case "city":
			out.City = string(in.String())
		case "url":
			out.URL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel1(out *jwriter.Writer, in Venue) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Address != "" {
		const prefix string = ",\"address\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Address))
	}
	if in.City != "" {
		const prefix string = ",\"city\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.City))
	}
	if in.URL != "" {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.URL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Venue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Venue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Venue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Venue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel1(l, v)
}
func easyjson6578def1DecodeSunnyvaleservOrgPortalModel2(in *jlexer.Lexer, out *TextResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "response":
			out.Response = string(in.String())
		case "timestamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Timestamp).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel2(out *jwriter.Writer, in TextResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Response != "" {
		const prefix string = ",\"response\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Response))
	}
	{
		const prefix string = ",\"timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Timestamp).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TextResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TextResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TextResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TextResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel2(l, v)
}
func easyjson6578def1DecodeSunnyvaleservOrgPortalModel3(in *jlexer.Lexer, out *TextRecipient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "recipient":
			out.Recipient = PersonID(in.Int())
		case "number":
			out.Number = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "timestamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Timestamp).UnmarshalJSON(data))
			}
		case "responses":
			if in.IsNull() {
				in.Skip()
				out.Responses = nil
			} else {
				in.Delim('[')
				if out.Responses == nil {
					if !in.IsDelim(']') {
						out.Responses = make([]*TextResponse, 0, 8)
					} else {
						out.Responses = []*TextResponse{}
					}
				} else {
					out.Responses = (out.Responses)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *TextResponse
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(TextResponse)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.Responses = append(out.Responses, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel3(out *jwriter.Writer, in TextRecipient) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Recipient != 0 {
		const prefix string = ",\"recipient\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Recipient))
	}
	if in.Number != "" {
		const prefix string = ",\"number\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Number))
	}
	if in.Status != "" {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Timestamp).MarshalJSON())
	}
	if len(in.Responses) != 0 {
		const prefix string = ",\"responses\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v5, v6 := range in.Responses {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TextRecipient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TextRecipient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TextRecipient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TextRecipient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel3(l, v)
}
func easyjson6578def1DecodeSunnyvaleservOrgPortalModel4(in *jlexer.Lexer, out *TextMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = TextMessageID(in.Int())
		case "sender":
			out.Sender = PersonID(in.Int())
		case "groups":
			if in.IsNull() {
				in.Skip()
				out.Groups = nil
			} else {
				in.Delim('[')
				if out.Groups == nil {
					if !in.IsDelim(']') {
						out.Groups = make([]GroupID, 0, 8)
					} else {
						out.Groups = []GroupID{}
					}
				} else {
					out.Groups = (out.Groups)[:0]
				}
				for !in.IsDelim(']') {
					var v7 GroupID
					v7 = GroupID(in.Int())
					out.Groups = append(out.Groups, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "timestamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Timestamp).UnmarshalJSON(data))
			}
		case "message":
			out.Message = string(in.String())
		case "recipients":
			if in.IsNull() {
				in.Skip()
				out.Recipients = nil
			} else {
				in.Delim('[')
				if out.Recipients == nil {
					if !in.IsDelim(']') {
						out.Recipients = make([]*TextRecipient, 0, 8)
					} else {
						out.Recipients = []*TextRecipient{}
					}
				} else {
					out.Recipients = (out.Recipients)[:0]
				}
				for !in.IsDelim(']') {
					var v8 *TextRecipient
					if in.IsNull() {
						in.Skip()
						v8 = nil
					} else {
						if v8 == nil {
							v8 = new(TextRecipient)
						}
						(*v8).UnmarshalEasyJSON(in)
					}
					out.Recipients = append(out.Recipients, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel4(out *jwriter.Writer, in TextMessage) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Sender != 0 {
		const prefix string = ",\"sender\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Sender))
	}
	if len(in.Groups) != 0 {
		const prefix string = ",\"groups\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v9, v10 := range in.Groups {
				if v9 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v10))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Timestamp).MarshalJSON())
	}
	if in.Message != "" {
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	if len(in.Recipients) != 0 {
		const prefix string = ",\"recipients\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v11, v12 := range in.Recipients {
				if v11 > 0 {
					out.RawByte(',')
				}
				if v12 == nil {
					out.RawString("null")
				} else {
					(*v12).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TextMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TextMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TextMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TextMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel4(l, v)
}
func easyjson6578def1DecodeSunnyvaleservOrgPortalModel5(in *jlexer.Lexer, out *Role) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = RoleID(in.Int())
		case "tag":
			out.Tag = RoleTag(in.String())
		case "name":
			out.Name = string(in.String())
		case "individual":
			out.Individual = bool(in.Bool())
		case "privileges":
			(out.Privileges).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel5(out *jwriter.Writer, in Role) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Tag != "" {
		const prefix string = ",\"tag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Tag))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Individual {
		const prefix string = ",\"individual\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Individual))
	}
	{
		const prefix string = ",\"privileges\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Privileges).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Role) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Role) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Role) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Role) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel5(l, v)
}
func easyjson6578def1DecodeSunnyvaleservOrgPortalModel6(in *jlexer.Lexer, out *Person) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = PersonID(in.Int())
		case "username":
			out.Username = string(in.String())
		case "informalName":
			out.InformalName = string(in.String())
		case "formalName":
			out.FormalName = string(in.String())
		case "sortName":
			out.SortName = string(in.String())
		case "callSign":
			out.CallSign = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "email2":
			out.Email2 = string(in.String())
		case "homeAddress":
			(out.HomeAddress).UnmarshalEasyJSON(in)
		case "workAddress":
			(out.WorkAddress).UnmarshalEasyJSON(in)
		case "mailAddress":
			(out.MailAddress).UnmarshalEasyJSON(in)
		case "cellPhone":
			out.CellPhone = string(in.String())
		case "homePhone":
			out.HomePhone = string(in.String())
		case "workPhone":
			out.WorkPhone = string(in.String())
		case "password":
			if in.IsNull() {
				in.Skip()
				out.Password = nil
			} else {
				out.Password = in.Bytes()
			}
		case "badLoginCount":
			out.BadLoginCount = int(in.Int())
		case "badLoginTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.BadLoginTime).UnmarshalJSON(data))
			}
		case "pwresetToken":
			out.PWResetToken = string(in.String())
		case "pwresetTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.PWResetTime).UnmarshalJSON(data))
			}
		case "roles":
			if in.IsNull() {
				in.Skip()
				out.Roles = nil
			} else {
				in.Delim('[')
				if out.Roles == nil {
					if !in.IsDelim(']') {
						out.Roles = make([]RoleID, 0, 8)
					} else {
						out.Roles = []RoleID{}
					}
				} else {
					out.Roles = (out.Roles)[:0]
				}
				for !in.IsDelim(']') {
					var v14 RoleID
					v14 = RoleID(in.Int())
					out.Roles = append(out.Roles, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "privileges":
			(out.Privileges).UnmarshalEasyJSON(in)
		case "archive":
			if in.IsNull() {
				in.Skip()
				out.Archive = nil
			} else {
				in.Delim('[')
				if out.Archive == nil {
					if !in.IsDelim(']') {
						out.Archive = make([]string, 0, 4)
					} else {
						out.Archive = []string{}
					}
				} else {
					out.Archive = (out.Archive)[:0]
				}
				for !in.IsDelim(']') {
					var v15 string
					v15 = string(in.String())
					out.Archive = append(out.Archive, v15)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel6(out *jwriter.Writer, in Person) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Username != "" {
		const prefix string = ",\"username\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"informalName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.InformalName))
	}
	{
		const prefix string = ",\"formalName\":"
		out.RawString(prefix)
		out.String(string(in.FormalName))
	}
	{
		const prefix string = ",\"sortName\":"
		out.RawString(prefix)
		out.String(string(in.SortName))
	}
	if in.CallSign != "" {
		const prefix string = ",\"callSign\":"
		out.RawString(prefix)
		out.String(string(in.CallSign))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	if in.Email2 != "" {
		const prefix string = ",\"email2\":"
		out.RawString(prefix)
		out.String(string(in.Email2))
	}
	{
		const prefix string = ",\"homeAddress\":"
		out.RawString(prefix)
		(in.HomeAddress).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"workAddress\":"
		out.RawString(prefix)
		(in.WorkAddress).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"mailAddress\":"
		out.RawString(prefix)
		(in.MailAddress).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"cellPhone\":"
		out.RawString(prefix)
		out.String(string(in.CellPhone))
	}
	{
		const prefix string = ",\"homePhone\":"
		out.RawString(prefix)
		out.String(string(in.HomePhone))
	}
	{
		const prefix string = ",\"workPhone\":"
		out.RawString(prefix)
		out.String(string(in.WorkPhone))
	}
	if len(in.Password) != 0 {
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Password)
	}
	if in.BadLoginCount != 0 {
		const prefix string = ",\"badLoginCount\":"
		out.RawString(prefix)
		out.Int(int(in.BadLoginCount))
	}
	{
		const prefix string = ",\"badLoginTime\":"
		out.RawString(prefix)
		out.Raw((in.BadLoginTime).MarshalJSON())
	}
	if in.PWResetToken != "" {
		const prefix string = ",\"pwresetToken\":"
		out.RawString(prefix)
		out.String(string(in.PWResetToken))
	}
	{
		const prefix string = ",\"pwresetTime\":"
		out.RawString(prefix)
		out.Raw((in.PWResetTime).MarshalJSON())
	}
	if len(in.Roles) != 0 {
		const prefix string = ",\"roles\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v18, v19 := range in.Roles {
				if v18 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v19))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"privileges\":"
		out.RawString(prefix)
		(in.Privileges).MarshalEasyJSON(out)
	}
	if len(in.Archive) != 0 {
		const prefix string = ",\"archive\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v20, v21 := range in.Archive {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.String(string(v21))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Person) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Person) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Person) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Person) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel6(l, v)
}
func easyjson6578def1DecodeSunnyvaleservOrgPortalModel7(in *jlexer.Lexer, out *Group) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = GroupID(in.Int())
		case "tag":
			out.Tag = GroupTag(in.String())
		case "name":
			out.Name = string(in.String())
		case "allowTextMessages":
			out.AllowTextMessages = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel7(out *jwriter.Writer, in Group) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Tag != "" {
		const prefix string = ",\"tag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Tag))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"allowTextMessages\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.AllowTextMessages))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Group) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Group) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Group) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Group) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel7(l, v)
}
func easyjson6578def1DecodeSunnyvaleservOrgPortalModel8(in *jlexer.Lexer, out *Event) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = EventID(in.Int())
		case "name":
			out.Name = string(in.String())
		case "date":
			out.Date = string(in.String())
		case "start":
			out.Start = string(in.String())
		case "end":
			out.End = string(in.String())
		case "venue":
			out.Venue = VenueID(in.Int())
		case "details":
			out.Details = string(in.String())
		case "type":
			out.Type = EventType(in.Uint32())
		case "groups":
			if in.IsNull() {
				in.Skip()
				out.Groups = nil
			} else {
				in.Delim('[')
				if out.Groups == nil {
					if !in.IsDelim(']') {
						out.Groups = make([]GroupID, 0, 8)
					} else {
						out.Groups = []GroupID{}
					}
				} else {
					out.Groups = (out.Groups)[:0]
				}
				for !in.IsDelim(']') {
					var v22 GroupID
					v22 = GroupID(in.Int())
					out.Groups = append(out.Groups, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "sccAresID":
			out.SccAresID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel8(out *jwriter.Writer, in Event) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Date != "" {
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Date))
	}
	if in.Start != "" {
		const prefix string = ",\"start\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Start))
	}
	if in.End != "" {
		const prefix string = ",\"end\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.End))
	}
	if in.Venue != 0 {
		const prefix string = ",\"venue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Venue))
	}
	if in.Details != "" {
		const prefix string = ",\"details\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Details))
	}
	if in.Type != 0 {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Type))
	}
	if len(in.Groups) != 0 {
		const prefix string = ",\"groups\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v23, v24 := range in.Groups {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v24))
			}
			out.RawByte(']')
		}
	}
	if in.SccAresID != "" {
		const prefix string = ",\"sccAresID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SccAresID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Event) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Event) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Event) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Event) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel8(l, v)
}
func easyjson6578def1DecodeSunnyvaleservOrgPortalModel9(in *jlexer.Lexer, out *AuthzData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "groups":
			if in.IsNull() {
				in.Skip()
				out.Groups = nil
			} else {
				in.Delim('[')
				if out.Groups == nil {
					if !in.IsDelim(']') {
						out.Groups = make([]*Group, 0, 8)
					} else {
						out.Groups = []*Group{}
					}
				} else {
					out.Groups = (out.Groups)[:0]
				}
				for !in.IsDelim(']') {
					var v25 *Group
					if in.IsNull() {
						in.Skip()
						v25 = nil
					} else {
						if v25 == nil {
							v25 = new(Group)
						}
						(*v25).UnmarshalEasyJSON(in)
					}
					out.Groups = append(out.Groups, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "roles":
			if in.IsNull() {
				in.Skip()
				out.Roles = nil
			} else {
				in.Delim('[')
				if out.Roles == nil {
					if !in.IsDelim(']') {
						out.Roles = make([]*Role, 0, 8)
					} else {
						out.Roles = []*Role{}
					}
				} else {
					out.Roles = (out.Roles)[:0]
				}
				for !in.IsDelim(']') {
					var v26 *Role
					if in.IsNull() {
						in.Skip()
						v26 = nil
					} else {
						if v26 == nil {
							v26 = new(Role)
						}
						(*v26).UnmarshalEasyJSON(in)
					}
					out.Roles = append(out.Roles, v26)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel9(out *jwriter.Writer, in AuthzData) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Groups) != 0 {
		const prefix string = ",\"groups\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v27, v28 := range in.Groups {
				if v27 > 0 {
					out.RawByte(',')
				}
				if v28 == nil {
					out.RawString("null")
				} else {
					(*v28).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Roles) != 0 {
		const prefix string = ",\"roles\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v29, v30 := range in.Roles {
				if v29 > 0 {
					out.RawByte(',')
				}
				if v30 == nil {
					out.RawString("null")
				} else {
					(*v30).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuthzData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AuthzData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuthzData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AuthzData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel9(l, v)
}
func easyjson6578def1DecodeSunnyvaleservOrgPortalModel10(in *jlexer.Lexer, out *Address) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "sameAsHome":
			out.SameAsHome = bool(in.Bool())
		case "latitude":
			out.Latitude = float64(in.Float64())
		case "longitude":
			out.Longitude = float64(in.Float64())
		case "fireDistrict":
			out.FireDistrict = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel10(out *jwriter.Writer, in Address) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Address != "" {
		const prefix string = ",\"address\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"sameAsHome\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.SameAsHome))
	}
	if in.Latitude != 0 {
		const prefix string = ",\"latitude\":"
		out.RawString(prefix)
		out.Float64(float64(in.Latitude))
	}
	if in.Longitude != 0 {
		const prefix string = ",\"longitude\":"
		out.RawString(prefix)
		out.Float64(float64(in.Longitude))
	}
	{
		const prefix string = ",\"fireDistrict\":"
		out.RawString(prefix)
		out.Int(int(in.FireDistrict))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Address) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Address) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Address) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Address) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel10(l, v)
}
