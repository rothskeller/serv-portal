// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6578def1DecodeSunnyvaleservOrgPortalModel(in *jlexer.Lexer, out *Venues) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "venues":
			if in.IsNull() {
				in.Skip()
				out.Venues = nil
			} else {
				in.Delim('[')
				if out.Venues == nil {
					if !in.IsDelim(']') {
						out.Venues = make([]*Venue, 0, 8)
					} else {
						out.Venues = []*Venue{}
					}
				} else {
					out.Venues = (out.Venues)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Venue
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Venue)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Venues = append(out.Venues, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel(out *jwriter.Writer, in Venues) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Venues) != 0 {
		const prefix string = ",\"venues\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v2, v3 := range in.Venues {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Venues) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Venues) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Venues) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Venues) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel(l, v)
}
func easyjson6578def1DecodeSunnyvaleservOrgPortalModel1(in *jlexer.Lexer, out *Venue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = VenueID(in.Int())
		case "name":
			out.Name = string(in.String())
		case "address":
			out.Address = string(in.String())
		case "city":
			out.City = string(in.String())
		case "url":
			out.URL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel1(out *jwriter.Writer, in Venue) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Address != "" {
		const prefix string = ",\"address\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Address))
	}
	if in.City != "" {
		const prefix string = ",\"city\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.City))
	}
	if in.URL != "" {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.URL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Venue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Venue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Venue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Venue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel1(l, v)
}
func easyjson6578def1DecodeSunnyvaleservOrgPortalModel2(in *jlexer.Lexer, out *TextResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "response":
			out.Response = string(in.String())
		case "timestamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Timestamp).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel2(out *jwriter.Writer, in TextResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Response != "" {
		const prefix string = ",\"response\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Response))
	}
	{
		const prefix string = ",\"timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Timestamp).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TextResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TextResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TextResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TextResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel2(l, v)
}
func easyjson6578def1DecodeSunnyvaleservOrgPortalModel3(in *jlexer.Lexer, out *TextRecipient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "recipient":
			out.Recipient = PersonID(in.Int())
		case "number":
			out.Number = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "timestamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Timestamp).UnmarshalJSON(data))
			}
		case "responses":
			if in.IsNull() {
				in.Skip()
				out.Responses = nil
			} else {
				in.Delim('[')
				if out.Responses == nil {
					if !in.IsDelim(']') {
						out.Responses = make([]*TextResponse, 0, 8)
					} else {
						out.Responses = []*TextResponse{}
					}
				} else {
					out.Responses = (out.Responses)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *TextResponse
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(TextResponse)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.Responses = append(out.Responses, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel3(out *jwriter.Writer, in TextRecipient) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Recipient != 0 {
		const prefix string = ",\"recipient\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Recipient))
	}
	if in.Number != "" {
		const prefix string = ",\"number\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Number))
	}
	if in.Status != "" {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Timestamp).MarshalJSON())
	}
	if len(in.Responses) != 0 {
		const prefix string = ",\"responses\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v5, v6 := range in.Responses {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TextRecipient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TextRecipient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TextRecipient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TextRecipient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel3(l, v)
}
func easyjson6578def1DecodeSunnyvaleservOrgPortalModel4(in *jlexer.Lexer, out *TextMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = TextMessageID(in.Int())
		case "sender":
			out.Sender = PersonID(in.Int())
		case "timestamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Timestamp).UnmarshalJSON(data))
			}
		case "message":
			out.Message = string(in.String())
		case "recipients":
			if in.IsNull() {
				in.Skip()
				out.Recipients = nil
			} else {
				in.Delim('[')
				if out.Recipients == nil {
					if !in.IsDelim(']') {
						out.Recipients = make([]*TextRecipient, 0, 8)
					} else {
						out.Recipients = []*TextRecipient{}
					}
				} else {
					out.Recipients = (out.Recipients)[:0]
				}
				for !in.IsDelim(']') {
					var v7 *TextRecipient
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(TextRecipient)
						}
						(*v7).UnmarshalEasyJSON(in)
					}
					out.Recipients = append(out.Recipients, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "lists":
			if in.IsNull() {
				in.Skip()
				out.Lists = nil
			} else {
				in.Delim('[')
				if out.Lists == nil {
					if !in.IsDelim(']') {
						out.Lists = make([]ListID, 0, 8)
					} else {
						out.Lists = []ListID{}
					}
				} else {
					out.Lists = (out.Lists)[:0]
				}
				for !in.IsDelim(']') {
					var v8 ListID
					v8 = ListID(in.Int())
					out.Lists = append(out.Lists, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel4(out *jwriter.Writer, in TextMessage) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Sender != 0 {
		const prefix string = ",\"sender\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Sender))
	}
	{
		const prefix string = ",\"timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Timestamp).MarshalJSON())
	}
	if in.Message != "" {
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	if len(in.Recipients) != 0 {
		const prefix string = ",\"recipients\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v9, v10 := range in.Recipients {
				if v9 > 0 {
					out.RawByte(',')
				}
				if v10 == nil {
					out.RawString("null")
				} else {
					(*v10).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Lists) != 0 {
		const prefix string = ",\"lists\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v11, v12 := range in.Lists {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v12))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TextMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TextMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TextMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TextMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel4(l, v)
}
func easyjson6578def1DecodeSunnyvaleservOrgPortalModel5(in *jlexer.Lexer, out *Shift) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "start":
			out.Start = string(in.String())
		case "end":
			out.End = string(in.String())
		case "task":
			out.Task = string(in.String())
		case "min":
			out.Min = int(in.Int())
		case "max":
			out.Max = int(in.Int())
		case "signed_up":
			if in.IsNull() {
				in.Skip()
				out.SignedUp = nil
			} else {
				in.Delim('[')
				if out.SignedUp == nil {
					if !in.IsDelim(']') {
						out.SignedUp = make([]PersonID, 0, 8)
					} else {
						out.SignedUp = []PersonID{}
					}
				} else {
					out.SignedUp = (out.SignedUp)[:0]
				}
				for !in.IsDelim(']') {
					var v13 PersonID
					v13 = PersonID(in.Int())
					out.SignedUp = append(out.SignedUp, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "declined":
			if in.IsNull() {
				in.Skip()
				out.Declined = nil
			} else {
				in.Delim('[')
				if out.Declined == nil {
					if !in.IsDelim(']') {
						out.Declined = make([]PersonID, 0, 8)
					} else {
						out.Declined = []PersonID{}
					}
				} else {
					out.Declined = (out.Declined)[:0]
				}
				for !in.IsDelim(']') {
					var v14 PersonID
					v14 = PersonID(in.Int())
					out.Declined = append(out.Declined, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "announce":
			out.Announce = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel5(out *jwriter.Writer, in Shift) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Start != "" {
		const prefix string = ",\"start\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Start))
	}
	if in.End != "" {
		const prefix string = ",\"end\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.End))
	}
	if in.Task != "" {
		const prefix string = ",\"task\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Task))
	}
	if in.Min != 0 {
		const prefix string = ",\"min\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Min))
	}
	if in.Max != 0 {
		const prefix string = ",\"max\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Max))
	}
	if len(in.SignedUp) != 0 {
		const prefix string = ",\"signed_up\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v15, v16 := range in.SignedUp {
				if v15 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v16))
			}
			out.RawByte(']')
		}
	}
	if len(in.Declined) != 0 {
		const prefix string = ",\"declined\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v17, v18 := range in.Declined {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v18))
			}
			out.RawByte(']')
		}
	}
	if in.Announce {
		const prefix string = ",\"announce\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Announce))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Shift) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Shift) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Shift) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Shift) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel5(l, v)
}
func easyjson6578def1DecodeSunnyvaleservOrgPortalModel6(in *jlexer.Lexer, out *Roles) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "roles":
			if in.IsNull() {
				in.Skip()
				out.Roles = nil
			} else {
				in.Delim('[')
				if out.Roles == nil {
					if !in.IsDelim(']') {
						out.Roles = make([]*Role, 0, 8)
					} else {
						out.Roles = []*Role{}
					}
				} else {
					out.Roles = (out.Roles)[:0]
				}
				for !in.IsDelim(']') {
					var v19 *Role
					if in.IsNull() {
						in.Skip()
						v19 = nil
					} else {
						if v19 == nil {
							v19 = new(Role)
						}
						(*v19).UnmarshalEasyJSON(in)
					}
					out.Roles = append(out.Roles, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel6(out *jwriter.Writer, in Roles) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Roles) != 0 {
		const prefix string = ",\"roles\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v20, v21 := range in.Roles {
				if v20 > 0 {
					out.RawByte(',')
				}
				if v21 == nil {
					out.RawString("null")
				} else {
					(*v21).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Roles) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Roles) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Roles) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Roles) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel6(l, v)
}
func easyjson6578def1DecodeSunnyvaleservOrgPortalModel7(in *jlexer.Lexer, out *Role) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = RoleID(in.Int())
		case "name":
			out.Name = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "org":
			out.Org = Org(in.Uint8())
		case "privLevel":
			out.PrivLevel = PrivLevel(in.Uint8())
		case "showRoster":
			out.ShowRoster = bool(in.Bool())
		case "implicitOnly":
			out.ImplicitOnly = bool(in.Bool())
		case "priority":
			out.Priority = int(in.Int())
		case "implies":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Implies = make(map[RoleID]bool)
				} else {
					out.Implies = nil
				}
				for !in.IsDelim('}') {
					key := RoleID(in.IntStr())
					in.WantColon()
					var v22 bool
					v22 = bool(in.Bool())
					(out.Implies)[key] = v22
					in.WantComma()
				}
				in.Delim('}')
			}
		case "lists":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Lists = make(map[ListID]RoleToList)
				} else {
					out.Lists = nil
				}
				for !in.IsDelim('}') {
					key := ListID(in.IntStr())
					in.WantColon()
					var v23 RoleToList
					v23 = RoleToList(in.Uint8())
					(out.Lists)[key] = v23
					in.WantComma()
				}
				in.Delim('}')
			}
		case "people":
			if in.IsNull() {
				in.Skip()
				out.People = nil
			} else {
				in.Delim('[')
				if out.People == nil {
					if !in.IsDelim(']') {
						out.People = make([]PersonID, 0, 8)
					} else {
						out.People = []PersonID{}
					}
				} else {
					out.People = (out.People)[:0]
				}
				for !in.IsDelim(']') {
					var v24 PersonID
					v24 = PersonID(in.Int())
					out.People = append(out.People, v24)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel7(out *jwriter.Writer, in Role) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	if in.Org != 0 {
		const prefix string = ",\"org\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Org))
	}
	if in.PrivLevel != 0 {
		const prefix string = ",\"privLevel\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.PrivLevel))
	}
	if in.ShowRoster {
		const prefix string = ",\"showRoster\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ShowRoster))
	}
	if in.ImplicitOnly {
		const prefix string = ",\"implicitOnly\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ImplicitOnly))
	}
	if in.Priority != 0 {
		const prefix string = ",\"priority\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Priority))
	}
	if len(in.Implies) != 0 {
		const prefix string = ",\"implies\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v25First := true
			for v25Name, v25Value := range in.Implies {
				if v25First {
					v25First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v25Name))
				out.RawByte(':')
				out.Bool(bool(v25Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Lists) != 0 {
		const prefix string = ",\"lists\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v26First := true
			for v26Name, v26Value := range in.Lists {
				if v26First {
					v26First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v26Name))
				out.RawByte(':')
				out.Uint8(uint8(v26Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.People) != 0 {
		const prefix string = ",\"people\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v27, v28 := range in.People {
				if v27 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v28))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Role) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Role) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Role) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Role) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel7(l, v)
}
func easyjson6578def1DecodeSunnyvaleservOrgPortalModel8(in *jlexer.Lexer, out *PersonNote) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "note":
			out.Note = string(in.String())
		case "date":
			out.Date = string(in.String())
		case "visibility":
			out.Visibility = NoteVisibility(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel8(out *jwriter.Writer, in PersonNote) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Note != "" {
		const prefix string = ",\"note\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Note))
	}
	if in.Date != "" {
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Date))
	}
	if in.Visibility != 0 {
		const prefix string = ",\"visibility\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Visibility))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PersonNote) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PersonNote) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PersonNote) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PersonNote) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel8(l, v)
}
func easyjson6578def1DecodeSunnyvaleservOrgPortalModel9(in *jlexer.Lexer, out *Person) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = PersonID(in.Int())
		case "informalName":
			out.InformalName = string(in.String())
		case "formalName":
			out.FormalName = string(in.String())
		case "sortName":
			out.SortName = string(in.String())
		case "callSign":
			out.CallSign = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "email2":
			out.Email2 = string(in.String())
		case "homeAddress":
			(out.HomeAddress).UnmarshalEasyJSON(in)
		case "workAddress":
			(out.WorkAddress).UnmarshalEasyJSON(in)
		case "mailAddress":
			(out.MailAddress).UnmarshalEasyJSON(in)
		case "cellPhone":
			out.CellPhone = string(in.String())
		case "homePhone":
			out.HomePhone = string(in.String())
		case "workPhone":
			out.WorkPhone = string(in.String())
		case "password":
			if in.IsNull() {
				in.Skip()
				out.Password = nil
			} else {
				out.Password = in.Bytes()
			}
		case "badLoginCount":
			out.BadLoginCount = int(in.Int())
		case "badLoginTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.BadLoginTime).UnmarshalJSON(data))
			}
		case "pwresetToken":
			out.PWResetToken = string(in.String())
		case "pwresetTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.PWResetTime).UnmarshalJSON(data))
			}
		case "notes":
			if in.IsNull() {
				in.Skip()
				out.Notes = nil
			} else {
				in.Delim('[')
				if out.Notes == nil {
					if !in.IsDelim(']') {
						out.Notes = make([]*PersonNote, 0, 8)
					} else {
						out.Notes = []*PersonNote{}
					}
				} else {
					out.Notes = (out.Notes)[:0]
				}
				for !in.IsDelim(']') {
					var v30 *PersonNote
					if in.IsNull() {
						in.Skip()
						v30 = nil
					} else {
						if v30 == nil {
							v30 = new(PersonNote)
						}
						(*v30).UnmarshalEasyJSON(in)
					}
					out.Notes = append(out.Notes, v30)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "no_email":
			out.NoEmail = bool(in.Bool())
		case "no_text":
			out.NoText = bool(in.Bool())
		case "unsubscribe_token":
			out.UnsubscribeToken = string(in.String())
		case "volgistics_id":
			out.VolgisticsID = int(in.Int())
		case "hours_token":
			out.HoursToken = string(in.String())
		case "hours_reminder":
			out.HoursReminder = bool(in.Bool())
		case "dsw_registrations":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.DSWRegistrations = make(map[DSWClass]time.Time)
				for !in.IsDelim('}') {
					key := DSWClass(in.IntStr())
					in.WantColon()
					var v31 time.Time
					if data := in.Raw(); in.Ok() {
						in.AddError((v31).UnmarshalJSON(data))
					}
					(out.DSWRegistrations)[key] = v31
					in.WantComma()
				}
				in.Delim('}')
			}
		case "dsw_until":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.DSWUntil = make(map[DSWClass]time.Time)
				for !in.IsDelim('}') {
					key := DSWClass(in.IntStr())
					in.WantColon()
					var v32 time.Time
					if data := in.Raw(); in.Ok() {
						in.AddError((v32).UnmarshalJSON(data))
					}
					(out.DSWUntil)[key] = v32
					in.WantComma()
				}
				in.Delim('}')
			}
		case "identification":
			out.Identification = IdentType(in.Uint8())
		case "roles":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Roles = make(map[RoleID]bool)
				} else {
					out.Roles = nil
				}
				for !in.IsDelim('}') {
					key := RoleID(in.IntStr())
					in.WantColon()
					var v33 bool
					v33 = bool(in.Bool())
					(out.Roles)[key] = v33
					in.WantComma()
				}
				in.Delim('}')
			}
		case "orgs":
			if in.IsNull() {
				in.Skip()
				out.Orgs = nil
			} else {
				in.Delim('[')
				if out.Orgs == nil {
					if !in.IsDelim(']') {
						out.Orgs = make([]OrgMembership, 0, 2)
					} else {
						out.Orgs = []OrgMembership{}
					}
				} else {
					out.Orgs = (out.Orgs)[:0]
				}
				for !in.IsDelim(']') {
					var v34 OrgMembership
					(v34).UnmarshalEasyJSON(in)
					out.Orgs = append(out.Orgs, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "bg_checks":
			if in.IsNull() {
				in.Skip()
				out.BGChecks = nil
			} else {
				in.Delim('[')
				if out.BGChecks == nil {
					if !in.IsDelim(']') {
						out.BGChecks = make([]*BackgroundCheck, 0, 8)
					} else {
						out.BGChecks = []*BackgroundCheck{}
					}
				} else {
					out.BGChecks = (out.BGChecks)[:0]
				}
				for !in.IsDelim(']') {
					var v35 *BackgroundCheck
					if in.IsNull() {
						in.Skip()
						v35 = nil
					} else {
						if v35 == nil {
							v35 = new(BackgroundCheck)
						}
						(*v35).UnmarshalEasyJSON(in)
					}
					out.BGChecks = append(out.BGChecks, v35)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "em_contacts":
			if in.IsNull() {
				in.Skip()
				out.EmContacts = nil
			} else {
				in.Delim('[')
				if out.EmContacts == nil {
					if !in.IsDelim(']') {
						out.EmContacts = make([]*EmContact, 0, 8)
					} else {
						out.EmContacts = []*EmContact{}
					}
				} else {
					out.EmContacts = (out.EmContacts)[:0]
				}
				for !in.IsDelim(']') {
					var v36 *EmContact
					if in.IsNull() {
						in.Skip()
						v36 = nil
					} else {
						if v36 == nil {
							v36 = new(EmContact)
						}
						(*v36).UnmarshalEasyJSON(in)
					}
					out.EmContacts = append(out.EmContacts, v36)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "birthdate":
			out.Birthdate = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel9(out *jwriter.Writer, in Person) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"informalName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.InformalName))
	}
	{
		const prefix string = ",\"formalName\":"
		out.RawString(prefix)
		out.String(string(in.FormalName))
	}
	{
		const prefix string = ",\"sortName\":"
		out.RawString(prefix)
		out.String(string(in.SortName))
	}
	if in.CallSign != "" {
		const prefix string = ",\"callSign\":"
		out.RawString(prefix)
		out.String(string(in.CallSign))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	if in.Email2 != "" {
		const prefix string = ",\"email2\":"
		out.RawString(prefix)
		out.String(string(in.Email2))
	}
	{
		const prefix string = ",\"homeAddress\":"
		out.RawString(prefix)
		(in.HomeAddress).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"workAddress\":"
		out.RawString(prefix)
		(in.WorkAddress).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"mailAddress\":"
		out.RawString(prefix)
		(in.MailAddress).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"cellPhone\":"
		out.RawString(prefix)
		out.String(string(in.CellPhone))
	}
	{
		const prefix string = ",\"homePhone\":"
		out.RawString(prefix)
		out.String(string(in.HomePhone))
	}
	{
		const prefix string = ",\"workPhone\":"
		out.RawString(prefix)
		out.String(string(in.WorkPhone))
	}
	if len(in.Password) != 0 {
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Password)
	}
	if in.BadLoginCount != 0 {
		const prefix string = ",\"badLoginCount\":"
		out.RawString(prefix)
		out.Int(int(in.BadLoginCount))
	}
	{
		const prefix string = ",\"badLoginTime\":"
		out.RawString(prefix)
		out.Raw((in.BadLoginTime).MarshalJSON())
	}
	if in.PWResetToken != "" {
		const prefix string = ",\"pwresetToken\":"
		out.RawString(prefix)
		out.String(string(in.PWResetToken))
	}
	{
		const prefix string = ",\"pwresetTime\":"
		out.RawString(prefix)
		out.Raw((in.PWResetTime).MarshalJSON())
	}
	if len(in.Notes) != 0 {
		const prefix string = ",\"notes\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v39, v40 := range in.Notes {
				if v39 > 0 {
					out.RawByte(',')
				}
				if v40 == nil {
					out.RawString("null")
				} else {
					(*v40).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.NoEmail {
		const prefix string = ",\"no_email\":"
		out.RawString(prefix)
		out.Bool(bool(in.NoEmail))
	}
	if in.NoText {
		const prefix string = ",\"no_text\":"
		out.RawString(prefix)
		out.Bool(bool(in.NoText))
	}
	if in.UnsubscribeToken != "" {
		const prefix string = ",\"unsubscribe_token\":"
		out.RawString(prefix)
		out.String(string(in.UnsubscribeToken))
	}
	if in.VolgisticsID != 0 {
		const prefix string = ",\"volgistics_id\":"
		out.RawString(prefix)
		out.Int(int(in.VolgisticsID))
	}
	if in.HoursToken != "" {
		const prefix string = ",\"hours_token\":"
		out.RawString(prefix)
		out.String(string(in.HoursToken))
	}
	if in.HoursReminder {
		const prefix string = ",\"hours_reminder\":"
		out.RawString(prefix)
		out.Bool(bool(in.HoursReminder))
	}
	{
		const prefix string = ",\"dsw_registrations\":"
		out.RawString(prefix)
		if in.DSWRegistrations == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v41First := true
			for v41Name, v41Value := range in.DSWRegistrations {
				if v41First {
					v41First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v41Name))
				out.RawByte(':')
				out.Raw((v41Value).MarshalJSON())
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"dsw_until\":"
		out.RawString(prefix)
		if in.DSWUntil == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v42First := true
			for v42Name, v42Value := range in.DSWUntil {
				if v42First {
					v42First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v42Name))
				out.RawByte(':')
				out.Raw((v42Value).MarshalJSON())
			}
			out.RawByte('}')
		}
	}
	if in.Identification != 0 {
		const prefix string = ",\"identification\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Identification))
	}
	if len(in.Roles) != 0 {
		const prefix string = ",\"roles\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v43First := true
			for v43Name, v43Value := range in.Roles {
				if v43First {
					v43First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v43Name))
				out.RawByte(':')
				out.Bool(bool(v43Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"orgs\":"
		out.RawString(prefix)
		if in.Orgs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v44, v45 := range in.Orgs {
				if v44 > 0 {
					out.RawByte(',')
				}
				(v45).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.BGChecks) != 0 {
		const prefix string = ",\"bg_checks\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v46, v47 := range in.BGChecks {
				if v46 > 0 {
					out.RawByte(',')
				}
				if v47 == nil {
					out.RawString("null")
				} else {
					(*v47).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.EmContacts) != 0 {
		const prefix string = ",\"em_contacts\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v48, v49 := range in.EmContacts {
				if v48 > 0 {
					out.RawByte(',')
				}
				if v49 == nil {
					out.RawString("null")
				} else {
					(*v49).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Birthdate != "" {
		const prefix string = ",\"birthdate\":"
		out.RawString(prefix)
		out.String(string(in.Birthdate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Person) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Person) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Person) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Person) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel9(l, v)
}
func easyjson6578def1DecodeSunnyvaleservOrgPortalModel10(in *jlexer.Lexer, out *OrgMembership) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "privLevel":
			out.PrivLevel = PrivLevel(in.Uint8())
		case "title":
			out.Title = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel10(out *jwriter.Writer, in OrgMembership) {
	out.RawByte('{')
	first := true
	_ = first
	if in.PrivLevel != 0 {
		const prefix string = ",\"privLevel\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.PrivLevel))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrgMembership) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrgMembership) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrgMembership) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrgMembership) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel10(l, v)
}
func easyjson6578def1DecodeSunnyvaleservOrgPortalModel11(in *jlexer.Lexer, out *Lists) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "lists":
			if in.IsNull() {
				in.Skip()
				out.Lists = nil
			} else {
				in.Delim('[')
				if out.Lists == nil {
					if !in.IsDelim(']') {
						out.Lists = make([]*List, 0, 8)
					} else {
						out.Lists = []*List{}
					}
				} else {
					out.Lists = (out.Lists)[:0]
				}
				for !in.IsDelim(']') {
					var v50 *List
					if in.IsNull() {
						in.Skip()
						v50 = nil
					} else {
						if v50 == nil {
							v50 = new(List)
						}
						(*v50).UnmarshalEasyJSON(in)
					}
					out.Lists = append(out.Lists, v50)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel11(out *jwriter.Writer, in Lists) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Lists) != 0 {
		const prefix string = ",\"lists\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v51, v52 := range in.Lists {
				if v51 > 0 {
					out.RawByte(',')
				}
				if v52 == nil {
					out.RawString("null")
				} else {
					(*v52).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Lists) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Lists) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Lists) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Lists) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel11(l, v)
}
func easyjson6578def1DecodeSunnyvaleservOrgPortalModel12(in *jlexer.Lexer, out *List) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = ListID(in.Int())
		case "type":
			out.Type = ListType(in.Uint8())
		case "name":
			out.Name = string(in.String())
		case "people":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.People = make(map[PersonID]ListPersonStatus)
				} else {
					out.People = nil
				}
				for !in.IsDelim('}') {
					key := PersonID(in.IntStr())
					in.WantColon()
					var v53 ListPersonStatus
					v53 = ListPersonStatus(in.Uint8())
					(out.People)[key] = v53
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel12(out *jwriter.Writer, in List) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Type != 0 {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Type))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if len(in.People) != 0 {
		const prefix string = ",\"people\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v54First := true
			for v54Name, v54Value := range in.People {
				if v54First {
					v54First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v54Name))
				out.RawByte(':')
				out.Uint8(uint8(v54Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v List) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v List) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *List) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *List) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel12(l, v)
}
func easyjson6578def1DecodeSunnyvaleservOrgPortalModel13(in *jlexer.Lexer, out *Event) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = EventID(in.Int())
		case "name":
			out.Name = string(in.String())
		case "date":
			out.Date = string(in.String())
		case "start":
			out.Start = string(in.String())
		case "end":
			out.End = string(in.String())
		case "venue":
			out.Venue = VenueID(in.Int())
		case "details":
			out.Details = string(in.String())
		case "type":
			out.Type = EventType(in.Uint32())
		case "renewsDSW":
			out.RenewsDSW = bool(in.Bool())
		case "coveredByDSW":
			out.CoveredByDSW = bool(in.Bool())
		case "org":
			out.Org = Org(in.Uint8())
		case "roles":
			if in.IsNull() {
				in.Skip()
				out.Roles = nil
			} else {
				in.Delim('[')
				if out.Roles == nil {
					if !in.IsDelim(']') {
						out.Roles = make([]RoleID, 0, 8)
					} else {
						out.Roles = []RoleID{}
					}
				} else {
					out.Roles = (out.Roles)[:0]
				}
				for !in.IsDelim(']') {
					var v55 RoleID
					v55 = RoleID(in.Int())
					out.Roles = append(out.Roles, v55)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "shifts":
			if in.IsNull() {
				in.Skip()
				out.Shifts = nil
			} else {
				in.Delim('[')
				if out.Shifts == nil {
					if !in.IsDelim(']') {
						out.Shifts = make([]*Shift, 0, 8)
					} else {
						out.Shifts = []*Shift{}
					}
				} else {
					out.Shifts = (out.Shifts)[:0]
				}
				for !in.IsDelim(']') {
					var v56 *Shift
					if in.IsNull() {
						in.Skip()
						v56 = nil
					} else {
						if v56 == nil {
							v56 = new(Shift)
						}
						(*v56).UnmarshalEasyJSON(in)
					}
					out.Shifts = append(out.Shifts, v56)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "signup_text":
			out.SignupText = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel13(out *jwriter.Writer, in Event) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Date != "" {
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Date))
	}
	if in.Start != "" {
		const prefix string = ",\"start\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Start))
	}
	if in.End != "" {
		const prefix string = ",\"end\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.End))
	}
	if in.Venue != 0 {
		const prefix string = ",\"venue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Venue))
	}
	if in.Details != "" {
		const prefix string = ",\"details\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Details))
	}
	if in.Type != 0 {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Type))
	}
	if in.RenewsDSW {
		const prefix string = ",\"renewsDSW\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.RenewsDSW))
	}
	if in.CoveredByDSW {
		const prefix string = ",\"coveredByDSW\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.CoveredByDSW))
	}
	if in.Org != 0 {
		const prefix string = ",\"org\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Org))
	}
	if len(in.Roles) != 0 {
		const prefix string = ",\"roles\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v57, v58 := range in.Roles {
				if v57 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v58))
			}
			out.RawByte(']')
		}
	}
	if len(in.Shifts) != 0 {
		const prefix string = ",\"shifts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v59, v60 := range in.Shifts {
				if v59 > 0 {
					out.RawByte(',')
				}
				if v60 == nil {
					out.RawString("null")
				} else {
					(*v60).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.SignupText != "" {
		const prefix string = ",\"signup_text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SignupText))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Event) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Event) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Event) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Event) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel13(l, v)
}
func easyjson6578def1DecodeSunnyvaleservOrgPortalModel14(in *jlexer.Lexer, out *EmContact) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "home_phone":
			out.HomePhone = string(in.String())
		case "cell_phone":
			out.CellPhone = string(in.String())
		case "relationship":
			out.Relationship = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel14(out *jwriter.Writer, in EmContact) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.HomePhone != "" {
		const prefix string = ",\"home_phone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.HomePhone))
	}
	if in.CellPhone != "" {
		const prefix string = ",\"cell_phone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CellPhone))
	}
	if in.Relationship != "" {
		const prefix string = ",\"relationship\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Relationship))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EmContact) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EmContact) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EmContact) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EmContact) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel14(l, v)
}
func easyjson6578def1DecodeSunnyvaleservOrgPortalModel15(in *jlexer.Lexer, out *BackgroundCheck) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "date":
			out.Date = string(in.String())
		case "type":
			out.Type = BGCheckType(in.Uint8())
		case "assumed":
			out.Assumed = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel15(out *jwriter.Writer, in BackgroundCheck) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Date != "" {
		const prefix string = ",\"date\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Date))
	}
	if in.Type != 0 {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Type))
	}
	if in.Assumed {
		const prefix string = ",\"assumed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Assumed))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BackgroundCheck) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BackgroundCheck) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BackgroundCheck) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BackgroundCheck) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel15(l, v)
}
func easyjson6578def1DecodeSunnyvaleservOrgPortalModel16(in *jlexer.Lexer, out *Address) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "sameAsHome":
			out.SameAsHome = bool(in.Bool())
		case "latitude":
			out.Latitude = float64(in.Float64())
		case "longitude":
			out.Longitude = float64(in.Float64())
		case "fireDistrict":
			out.FireDistrict = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeSunnyvaleservOrgPortalModel16(out *jwriter.Writer, in Address) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Address != "" {
		const prefix string = ",\"address\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"sameAsHome\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.SameAsHome))
	}
	if in.Latitude != 0 {
		const prefix string = ",\"latitude\":"
		out.RawString(prefix)
		out.Float64(float64(in.Latitude))
	}
	if in.Longitude != 0 {
		const prefix string = ",\"longitude\":"
		out.RawString(prefix)
		out.Float64(float64(in.Longitude))
	}
	{
		const prefix string = ",\"fireDistrict\":"
		out.RawString(prefix)
		out.Int(int(in.FireDistrict))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Address) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Address) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeSunnyvaleservOrgPortalModel16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Address) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Address) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeSunnyvaleservOrgPortalModel16(l, v)
}
