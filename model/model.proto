syntax = "proto3";
package model;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) = true;
option (gogoproto.goproto_unrecognized_all) = false;

message Address {
  string address       = 1;
  bool   same_as_home  = 2 [(gogoproto.jsontag) = "sameAsHome"];
  double latitude      = 3;
  double longitude     = 4;
  uint32 fire_district = 5 [(gogoproto.casttype) = "int", (gogoproto.jsontag) = "fireDistrict"];
}

message Document {
  int64                     id             = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "DocumentID"];
  string                    name           = 2;
  int64                     posted_by      = 3 [(gogoproto.casttype) = "PersonID"];
  google.protobuf.Timestamp posted_at      = 4 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
  bool                      needs_approval = 5;
}

message EmailMessage {
  int64                     id         = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "EmailMessageID"];
  string                    message_id = 2 [(gogoproto.customname) = "MessageID", (gogoproto.jsontag) = "messageID"];
  google.protobuf.Timestamp timestamp  = 3 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
  int32                     type       = 4 [(gogoproto.casttype) = "EmailMessageType"];
  bool                      attention  = 5;
  repeated int64            groups     = 6 [(gogoproto.casttype) = "GroupID"];
  string                    from       = 7;
  string                    subject    = 8;
  string                    error      = 9;
}

message Event {
  int64          id           = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "EventID"];
  string         name         = 2;
  string         date         = 3;
  string         start        = 4;
  string         end          = 5;
  int64          venue        = 6 [(gogoproto.casttype) = "VenueID"];
  string         details      = 7;
  int32          type         = 8 [(gogoproto.casttype) = "EventType"];
  repeated int64 groups       = 9 [(gogoproto.casttype) = "GroupID"];
  int32          organization = 11 [(gogoproto.casttype) = "Organization"];
  bool           private      = 12;
  // RenewsDSW, if true, indicates that a person whose DSW registration is valid
  // at the time of the event, and who is marked as attending the event, gets
  // their DSW registration automatically renewed.
  bool renewsDSW = 13 [(gogoproto.customname) = "RenewsDSW"];
  // CoveredByDSW, if true, indicates that injuries at the event are covered by
  // DSW for attendees with current DSW registration.  For training events, it
  // essentially indicates that the event has been pre-approved by the ADC.
  bool coveredByDSW = 14 [(gogoproto.customname) = "CoveredByDSW"];
}

message Folder {
  int64             id          = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "FolderID"];
  int64             parent      = 2 [(gogoproto.casttype) = "FolderID"];
  string            name        = 3;
  int64             group       = 4 [(gogoproto.casttype) = "GroupID"];
  repeated Document documents   = 5;
  int64             approvals   = 6 [(gogoproto.casttype) = "int"];
  string            description = 7;
  int64             order       = 8 [(gogoproto.casttype) = "int"];
}

message Group {
  int64          id       =  1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "GroupID"];
  string         tag      =  2 [(gogoproto.casttype) = "GroupTag"];
  string         name     =  3;
  string         email    =  5;
  repeated int64 no_email =  6 [(gogoproto.casttype) = "PersonID"];
  repeated int64 no_text  =  7 [(gogoproto.casttype) = "PersonID"];
  // Organization is the organization with which this group is affiliated.
  // Members of this group will be asked for any additional hours they may have
  // for this organization.
  int32 organization = 9 [(gogoproto.casttype) = "Organization"];
  // GetHours, when true, indicates that members of this group should receive
  // monthly email reminders to record their volunteer hours.
  bool get_hours = 10 [(gogoproto.jsontag) = "getHours"];
  // DSWClass indicates which classification of DSW registration is required for
  // members of this group.
  bool dsw_required = 12 [(gogoproto.customname) = "DSWRequired", (gogoproto.jsontag) = "dswRequired,omitempty"];
  // BackgroundCheckRequired indicates whether a background check is required
  // for membership in the group.
  bool background_check_required = 13 [(gogoproto.jsontag) = "backgroundCheckRequired"];
}

message Person {
  int64                     id                =  1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "PersonID"];
  string                    username          =  2;
  string                    informal_name     = 17 [(gogoproto.jsontag) = "informalName"];
  string                    formal_name       =  3 [(gogoproto.jsontag) = "formalName"];
  string                    sort_name         =  4 [(gogoproto.jsontag) = "sortName"];
  string                    call_sign         =  6 [(gogoproto.jsontag) = "callSign,omitempty"];
  string                    email             = 25;
  string                    email2            = 26;
  Address                   home_address      = 18 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "homeAddress"];
  Address                   work_address      = 19 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "workAddress"];
  Address                   mail_address      = 20 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "mailAddress"];
  string                    cell_phone        = 21 [(gogoproto.jsontag) = "cellPhone"];
  string                    home_phone        = 22 [(gogoproto.jsontag) = "homePhone"];
  string                    work_phone        = 23 [(gogoproto.jsontag) = "workPhone"];
  bytes                     password          =  7;
  int64                     bad_login_count   =  8 [(gogoproto.casttype) = "int", (gogoproto.jsontag) = "badLoginCount,omitempty"];
  google.protobuf.Timestamp bad_login_time    =  9 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "badLoginTime"];
  string                    pwreset_token     = 10 [(gogoproto.customname) = "PWResetToken", (gogoproto.jsontag) = "pwresetToken,omitempty"];
  google.protobuf.Timestamp pwreset_time      = 11 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false, (gogoproto.customname) = "PWResetTime", (gogoproto.jsontag) = "pwresetTime"];
  repeated PersonNote       notes             = 27;
  bool                      no_email          = 28;
  bool                      no_text           = 29;
  string                    unsubscribe_token = 30;
  int64                     volgistics_id     = 32 [(gogoproto.customname) = "VolgisticsID", (gogoproto.casttype) = "int"];
  string                    background_check  = 33;
  string                    hours_token       = 34;
  bool                      hours_reminder    = 35;
  // DSWRegistrations is a map from a DSWClass to the date on the person's most
  // recent valid DSW registration with that classification.  The registration
  // may or may not still be current.
  map<int32,google.protobuf.Timestamp> dsw_registrations = 36 [(gogoproto.customname) = "DSWRegistrations", (gogoproto.castkey) = "DSWClass", (gogoproto.stdtime) = true, (gogoproto.nullable) = false];
  // DSWUntil is a map from a DSWClass to the date on which the person's DSW
  // registration in that classification expired or will expire.  This is cached
  // derivable data, recalculated whenever attendance is recorded for this
  // person.
  map<int32,google.protobuf.Timestamp> dsw_until = 37 [(gogoproto.customname) = "DSWUntil", (gogoproto.castkey) = "DSWClass", (gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

message PersonNote {
  string note      = 2;
  string date      = 4;
  int64  privilege = 5 [(gogoproto.casttype) = "Privilege"];
}

message Role {
  int64  id           = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "RoleID"];
  string tag          = 2 [(gogoproto.casttype) = "RoleTag"];
  string name         = 3;
  bool   individual   = 4;
  bool   detail       = 5;
  uint32 permissions  = 6 [(gogoproto.casttype) = "Permission"];
}

message TextMessage {
  int64                     id         = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "TextMessageID"];
  int64                     sender     = 2 [(gogoproto.casttype) = "PersonID"];
  repeated int64            groups     = 3 [(gogoproto.casttype) = "GroupID"];
  google.protobuf.Timestamp timestamp  = 4 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
  string                    message    = 5;
  repeated TextRecipient    recipients = 6;
}

message TextRecipient {
  int64                     recipient   = 1 [(gogoproto.casttype) = "PersonID"];
  string                    number      = 2;
  string                    status      = 3;
  google.protobuf.Timestamp timestamp   = 4 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
  repeated TextResponse     responses   = 5;
}

message TextResponse {
  string                    response  = 1;
  google.protobuf.Timestamp timestamp = 2 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

message Venue {
  int64  id      = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "VenueID"];
  string name    = 2;
  string address = 3;
  string city    = 4;
  string url     = 5 [(gogoproto.customname) = "URL"];
}

message Venues {
  repeated Venue venues = 1;
}
