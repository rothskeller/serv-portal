syntax = "proto3";
package model;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) = true;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_sizecache_all) = false;

message Address {
  string address       = 1;
  bool   same_as_home  = 2 [(gogoproto.jsontag) = "sameAsHome"];
  double latitude      = 3;
  double longitude     = 4;
  uint32 fire_district = 5 [(gogoproto.casttype) = "int", (gogoproto.jsontag) = "fireDistrict"];
}

message Event {
  int64          id           = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "EventID"];
  string         name         = 2;
  string         date         = 3;
  string         start        = 4;
  string         end          = 5;
  int64          venue        = 6 [(gogoproto.casttype) = "VenueID"];
  string         details      = 7;
  int32          type         = 8 [(gogoproto.casttype) = "EventType"];
  // RenewsDSW, if true, indicates that a person whose DSW registration is valid
  // at the time of the event, and who is marked as attending the event, gets
  // their DSW registration automatically renewed.
  bool renewsDSW = 13 [(gogoproto.customname) = "RenewsDSW"];
  // CoveredByDSW, if true, indicates that injuries at the event are covered by
  // DSW for attendees with current DSW registration.  For training events, it
  // essentially indicates that the event has been pre-approved by the ADC.
  bool coveredByDSW = 14 [(gogoproto.customname) = "CoveredByDSW"];
  // Org is the org that owns the event.  Leaders of this org (and admins) are
  // the ones who can manage this event.
  int64 org = 15 [(gogoproto.casttype) = "Org"];
  // Roles are the roles "invited" to the event.  They control which people are
  // displayed on the attendance page for the event.
  repeated int64 roles = 16 [(gogoproto.casttype) = "RoleID"];
}

// List is a distribution list for messages to people.
message List {
  // ID is the identifier of the List.
  int64 id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "ListID"];
  // Type is the list type.
  int64 type = 2 [(gogoproto.casttype) = "ListType"];
  // Name is the name of the list (and, for email lists, the local part of its
  // email address).
  string name = 3;
  // People is a map from PersonID to that person's status on the list.
  map<int64,int64> people = 4 [(gogoproto.castkey) = "PersonID", (gogoproto.castvalue) = "ListPersonStatus"];
}

message Lists {
  repeated List lists = 1;
}

// An OrgMembership describes the membership (or lack thereof) of a Person to an
// Org.
message OrgMembership {
  // PrivLevel is the privilege level the person holds in the organization.
  int64 privLevel = 1 [(gogoproto.casttype) = "PrivLevel"];
  // Title is the person's title (or role description) in the organization.
  string title = 2;
}

message Person {
  int64                     id                =  1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "PersonID"];
  string                    informal_name     = 17 [(gogoproto.jsontag) = "informalName"];
  string                    formal_name       =  3 [(gogoproto.jsontag) = "formalName"];
  string                    sort_name         =  4 [(gogoproto.jsontag) = "sortName"];
  string                    call_sign         =  6 [(gogoproto.jsontag) = "callSign,omitempty"];
  string                    email             = 25;
  string                    email2            = 26;
  Address                   home_address      = 18 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "homeAddress"];
  Address                   work_address      = 19 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "workAddress"];
  Address                   mail_address      = 20 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "mailAddress"];
  string                    cell_phone        = 21 [(gogoproto.jsontag) = "cellPhone"];
  string                    home_phone        = 22 [(gogoproto.jsontag) = "homePhone"];
  string                    work_phone        = 23 [(gogoproto.jsontag) = "workPhone"];
  bytes                     password          =  7;
  int64                     bad_login_count   =  8 [(gogoproto.casttype) = "int", (gogoproto.jsontag) = "badLoginCount,omitempty"];
  google.protobuf.Timestamp bad_login_time    =  9 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "badLoginTime"];
  string                    pwreset_token     = 10 [(gogoproto.customname) = "PWResetToken", (gogoproto.jsontag) = "pwresetToken,omitempty"];
  google.protobuf.Timestamp pwreset_time      = 11 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false, (gogoproto.customname) = "PWResetTime", (gogoproto.jsontag) = "pwresetTime"];
  repeated PersonNote       notes             = 27;
  bool                      no_email          = 28;
  bool                      no_text           = 29;
  string                    unsubscribe_token = 30;
  int64                     volgistics_id     = 32 [(gogoproto.customname) = "VolgisticsID", (gogoproto.casttype) = "int"];
  string                    background_check  = 33;
  string                    hours_token       = 34;
  bool                      hours_reminder    = 35;
  // DSWRegistrations is a map from a DSWClass to the date on the person's most
  // recent valid DSW registration with that classification.  The registration
  // may or may not still be current.
  map<int32,google.protobuf.Timestamp> dsw_registrations = 36 [(gogoproto.customname) = "DSWRegistrations", (gogoproto.castkey) = "DSWClass", (gogoproto.stdtime) = true, (gogoproto.nullable) = false];
  // DSWUntil is a map from a DSWClass to the date on which the person's DSW
  // registration in that classification expired or will expire.  This is cached
  // derivable data, recalculated whenever attendance is recorded for this
  // person.
  map<int32,google.protobuf.Timestamp> dsw_until = 37 [(gogoproto.customname) = "DSWUntil", (gogoproto.castkey) = "DSWClass", (gogoproto.stdtime) = true, (gogoproto.nullable) = false];
  // Identification is a bitmask of the types of identification that have been
  // issued to this person (and should be retrieved if they leave).
  int64 identification = 38 [(gogoproto.casttype) = "IdentType"];
  // Roles is the set of roles held by the person.  Each one maps to a boolean
  // indicating whether the role is directly held (true) or implied (false).
  map<int64,bool> roles = 39 [(gogoproto.castkey) = "RoleID"];
  // Orgs is an array, indexed by Org, of descriptions of the person's
  // membership (or lack thereof) in that Org.
  repeated OrgMembership orgs = 40 [(gogoproto.nullable) = false];
  // BGCheckStatus is the status of the person's background check.
  int64 bg_check_status = 41 [(gogoproto.customname) = "BGCheckStatus", (gogoproto.casttype) = "BGCheckStatus"];
  // BGCheckType is a bitmask of the types of background check the person has
  // received (or is assumed to have received).
  int64 bg_check_type = 42 [(gogoproto.customname) = "BGCheckType", (gogoproto.casttype) = "BGCheckType"];
  // BGCheckDate is the YYYY-MM-DD date when the person cleared the background
  // check identified by BGCheckType.  It is empty if the date is not known.
  string bg_check_date = 43 [(gogoproto.customname) = "BGCheckDate"];
}

message PersonNote {
  string note = 2;
  string date = 4;
  int64 visibility = 5 [(gogoproto.casttype) = "NoteVisibility"];
}

// A Role is a role that one or more people hold, describing their
// participation in SERV.
message Role {
  // ID is the unique identifier of the role.
  int64 id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "RoleID"];
  // Name is the name of the role.  If multiple people can hold the role, this
  // is generally a plural noun phrase; otherwise it is generally singular.
  string name = 2;
  // Title is the title describing people who hold this role.  It is generally
  // the singular form of Name.  It may be empty, if this role should not be
  // shown for the people who hold it.
  string title = 3;
  // Org is the organization to which this role belongs.
  int64 org = 4 [(gogoproto.casttype) = "Org"];
  // PrivLevel is the membership privilege level that this role conveys in Org
  // to the people who hold the role.  If it is PrivNone, membership is not
  // conveyed by the role.
  int64 privLevel = 5 [(gogoproto.casttype) = "PrivLevel"];
  // ShowRoster is a flag indicating that this role is a grouping that people
  // can usefully select on the roster page.
  bool showRoster = 6;
  // ImplicitOnly is a flag indicating that this role cannot be granted to a
  // person directly; it can only be implied through the granting of some other
  // role.
  bool implicitOnly = 7;
  // Priority is the priority of this role within its organization, where lower
  // numbers imply higher priority.  When displaying a person's title within an
  // organization, the title is taken from the role, held by that person, with
  // the lowest Priority value (excluding roles with empty Title).
  int64 priority = 8 [(gogoproto.casttype) = "int"];
  // Implies is the set of other roles are implied by this one. Each one is
  // mapped to a flag indicating whether the role is directly implied (true) or
  // indirectly implied (false).
  map<int64,bool> implies = 9 [(gogoproto.castkey) = "RoleID"];
  // Lists is the set of lists associated with the role.  Each one is mapped to
  // the subscription model and sender flag that together describe the
  // relationship between the list and holders of the role.
  map<int64,int64> lists = 10 [(gogoproto.castkey) = "ListID", (gogoproto.castvalue) = "RoleToList"];
  // People is the ordered list of people holding the role.
  repeated int64 people = 11 [(gogoproto.casttype) = "PersonID"];
}

message Roles {
  repeated Role roles = 1;
}

message TextMessage {
  int64                     id         = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "TextMessageID"];
  int64                     sender     = 2 [(gogoproto.casttype) = "PersonID"];
  google.protobuf.Timestamp timestamp  = 4 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
  string                    message    = 5;
  repeated TextRecipient    recipients = 6;
  // Lists is the array of lists to which the message was sent.
  repeated int64 lists = 7 [(gogoproto.casttype) = "ListID"];
}

message TextRecipient {
  int64                     recipient   = 1 [(gogoproto.casttype) = "PersonID"];
  string                    number      = 2;
  string                    status      = 3;
  google.protobuf.Timestamp timestamp   = 4 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
  repeated TextResponse     responses   = 5;
}

message TextResponse {
  string                    response  = 1;
  google.protobuf.Timestamp timestamp = 2 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

message Venue {
  int64  id      = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "VenueID"];
  string name    = 2;
  string address = 3;
  string city    = 4;
  string url     = 5 [(gogoproto.customname) = "URL"];
}

message Venues {
  repeated Venue venues = 1;
}
