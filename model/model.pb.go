// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: model.proto

package model

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Address struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	SameAsHome           bool     `protobuf:"varint,2,opt,name=same_as_home,json=sameAsHome,proto3" json:"sameAsHome"`
	Latitude             float64  `protobuf:"fixed64,3,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude            float64  `protobuf:"fixed64,4,opt,name=longitude,proto3" json:"longitude,omitempty"`
	FireDistrict         int      `protobuf:"varint,5,opt,name=fire_district,json=fireDistrict,proto3,casttype=int" json:"fireDistrict"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
}

func (m *Address) Reset()      { *m = Address{} }
func (*Address) ProtoMessage() {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{0}
}
func (m *Address) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Address.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(m, src)
}
func (m *Address) XXX_Size() int {
	return m.Size()
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

// A BackgroundCheck is the record of a (presumed or actual) background check of
// a person.
type BackgroundCheck struct {
	// Date is the date on which the background check was cleared.  It will be
	// empty if the date is not known.
	Date string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	// Type is a bitmask of the type(s) of background check performed.
	Type BGCheckType `protobuf:"varint,2,opt,name=type,proto3,casttype=BGCheckType" json:"type,omitempty"`
	// Assumed is true if the background check is assumed rather than
	// substantiated by records.
	Assumed              bool     `protobuf:"varint,3,opt,name=assumed,proto3" json:"assumed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
}

func (m *BackgroundCheck) Reset()      { *m = BackgroundCheck{} }
func (*BackgroundCheck) ProtoMessage() {}
func (*BackgroundCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{1}
}
func (m *BackgroundCheck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackgroundCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackgroundCheck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackgroundCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackgroundCheck.Merge(m, src)
}
func (m *BackgroundCheck) XXX_Size() int {
	return m.Size()
}
func (m *BackgroundCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_BackgroundCheck.DiscardUnknown(m)
}

var xxx_messageInfo_BackgroundCheck proto.InternalMessageInfo

type EmContact struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	HomePhone            string   `protobuf:"bytes,2,opt,name=home_phone,json=homePhone,proto3" json:"home_phone,omitempty"`
	CellPhone            string   `protobuf:"bytes,3,opt,name=cell_phone,json=cellPhone,proto3" json:"cell_phone,omitempty"`
	Relationship         string   `protobuf:"bytes,4,opt,name=relationship,proto3" json:"relationship,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
}

func (m *EmContact) Reset()      { *m = EmContact{} }
func (*EmContact) ProtoMessage() {}
func (*EmContact) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{2}
}
func (m *EmContact) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmContact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EmContact.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EmContact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmContact.Merge(m, src)
}
func (m *EmContact) XXX_Size() int {
	return m.Size()
}
func (m *EmContact) XXX_DiscardUnknown() {
	xxx_messageInfo_EmContact.DiscardUnknown(m)
}

var xxx_messageInfo_EmContact proto.InternalMessageInfo

type Event struct {
	ID      EventID   `protobuf:"varint,1,opt,name=id,proto3,casttype=EventID" json:"id,omitempty"`
	Name    string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Date    string    `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
	Start   string    `protobuf:"bytes,4,opt,name=start,proto3" json:"start,omitempty"`
	End     string    `protobuf:"bytes,5,opt,name=end,proto3" json:"end,omitempty"`
	Venue   VenueID   `protobuf:"varint,6,opt,name=venue,proto3,casttype=VenueID" json:"venue,omitempty"`
	Details string    `protobuf:"bytes,7,opt,name=details,proto3" json:"details,omitempty"`
	Type    EventType `protobuf:"varint,8,opt,name=type,proto3,casttype=EventType" json:"type,omitempty"`
	// RenewsDSW, if true, indicates that a person whose DSW registration is valid
	// at the time of the event, and who is marked as attending the event, got
	// their DSW registration automatically renewed.  THIS SETTING IS OBSOLETE.
	// It is retained for historical data, but the code no longer pays any
	// attention to it, and DSW renewals are no longer automatic.
	RenewsDSW bool `protobuf:"varint,13,opt,name=renewsDSW,proto3" json:"renewsDSW,omitempty"`
	// CoveredByDSW, if true, indicates that injuries at the event are covered by
	// DSW for attendees with current DSW registration.  For training events, it
	// essentially indicates that the event has been pre-approved by the ADC.
	CoveredByDSW bool `protobuf:"varint,14,opt,name=coveredByDSW,proto3" json:"coveredByDSW,omitempty"`
	// Org is the org that owns the event.  Leaders of this org (and admins) are
	// the ones who can manage this event.
	Org Org `protobuf:"varint,15,opt,name=org,proto3,casttype=Org" json:"org,omitempty"`
	// Roles are the roles "invited" to the event.  They control which people are
	// displayed on the attendance page for the event.  They also control who can
	// claim open assignment shifts.
	Roles []RoleID `protobuf:"varint,16,rep,packed,name=roles,proto3,casttype=RoleID" json:"roles,omitempty"`
	// Shifts are the shifts for this event that people can sign up for.
	Shifts []*Shift `protobuf:"bytes,17,rep,name=shifts,proto3" json:"shifts,omitempty"`
	// SignupText is the descriptive text for signing up for shifts for this
	// event.  It is HTML and can have embedded tags.
	SignupText           string   `protobuf:"bytes,18,opt,name=signup_text,json=signupText,proto3" json:"signup_text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
}

func (m *Event) Reset()      { *m = Event{} }
func (*Event) ProtoMessage() {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{3}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

// List is a distribution list for messages to people.
type List struct {
	// ID is the identifier of the List.
	ID ListID `protobuf:"varint,1,opt,name=id,proto3,casttype=ListID" json:"id,omitempty"`
	// Type is the list type.
	Type ListType `protobuf:"varint,2,opt,name=type,proto3,casttype=ListType" json:"type,omitempty"`
	// Name is the name of the list (and, for email lists, the local part of its
	// email address).
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// People is a map from PersonID to that person's status on the list.
	People               map[PersonID]ListPersonStatus `protobuf:"bytes,4,rep,name=people,proto3,castkey=PersonID,castvalue=ListPersonStatus" json:"people,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
}

func (m *List) Reset()      { *m = List{} }
func (*List) ProtoMessage() {}
func (*List) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{4}
}
func (m *List) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *List) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_List.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *List) XXX_Merge(src proto.Message) {
	xxx_messageInfo_List.Merge(m, src)
}
func (m *List) XXX_Size() int {
	return m.Size()
}
func (m *List) XXX_DiscardUnknown() {
	xxx_messageInfo_List.DiscardUnknown(m)
}

var xxx_messageInfo_List proto.InternalMessageInfo

type Lists struct {
	Lists                []*List  `protobuf:"bytes,1,rep,name=lists,proto3" json:"lists,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
}

func (m *Lists) Reset()      { *m = Lists{} }
func (*Lists) ProtoMessage() {}
func (*Lists) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{5}
}
func (m *Lists) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Lists) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Lists.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Lists) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Lists.Merge(m, src)
}
func (m *Lists) XXX_Size() int {
	return m.Size()
}
func (m *Lists) XXX_DiscardUnknown() {
	xxx_messageInfo_Lists.DiscardUnknown(m)
}

var xxx_messageInfo_Lists proto.InternalMessageInfo

// An OrgMembership describes the membership (or lack thereof) of a Person to an
// Org.
type OrgMembership struct {
	// PrivLevel is the privilege level the person holds in the organization.
	PrivLevel PrivLevel `protobuf:"varint,1,opt,name=privLevel,proto3,casttype=PrivLevel" json:"privLevel,omitempty"`
	// Title is the person's title (or role description) in the organization.
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
}

func (m *OrgMembership) Reset()      { *m = OrgMembership{} }
func (*OrgMembership) ProtoMessage() {}
func (*OrgMembership) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{6}
}
func (m *OrgMembership) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrgMembership) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrgMembership.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrgMembership) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrgMembership.Merge(m, src)
}
func (m *OrgMembership) XXX_Size() int {
	return m.Size()
}
func (m *OrgMembership) XXX_DiscardUnknown() {
	xxx_messageInfo_OrgMembership.DiscardUnknown(m)
}

var xxx_messageInfo_OrgMembership proto.InternalMessageInfo

type Person struct {
	ID            PersonID      `protobuf:"varint,1,opt,name=id,proto3,casttype=PersonID" json:"id,omitempty"`
	InformalName  string        `protobuf:"bytes,17,opt,name=informal_name,json=informalName,proto3" json:"informalName"`
	FormalName    string        `protobuf:"bytes,3,opt,name=formal_name,json=formalName,proto3" json:"formalName"`
	SortName      string        `protobuf:"bytes,4,opt,name=sort_name,json=sortName,proto3" json:"sortName"`
	CallSign      string        `protobuf:"bytes,6,opt,name=call_sign,json=callSign,proto3" json:"callSign,omitempty"`
	Email         string        `protobuf:"bytes,25,opt,name=email,proto3" json:"email,omitempty"`
	Email2        string        `protobuf:"bytes,26,opt,name=email2,proto3" json:"email2,omitempty"`
	HomeAddress   Address       `protobuf:"bytes,18,opt,name=home_address,json=homeAddress,proto3" json:"homeAddress"`
	WorkAddress   Address       `protobuf:"bytes,19,opt,name=work_address,json=workAddress,proto3" json:"workAddress"`
	MailAddress   Address       `protobuf:"bytes,20,opt,name=mail_address,json=mailAddress,proto3" json:"mailAddress"`
	CellPhone     string        `protobuf:"bytes,21,opt,name=cell_phone,json=cellPhone,proto3" json:"cellPhone"`
	HomePhone     string        `protobuf:"bytes,22,opt,name=home_phone,json=homePhone,proto3" json:"homePhone"`
	WorkPhone     string        `protobuf:"bytes,23,opt,name=work_phone,json=workPhone,proto3" json:"workPhone"`
	Password      []byte        `protobuf:"bytes,7,opt,name=password,proto3" json:"password,omitempty"`
	BadLoginCount int           `protobuf:"varint,8,opt,name=bad_login_count,json=badLoginCount,proto3,casttype=int" json:"badLoginCount,omitempty"`
	BadLoginTime  time.Time     `protobuf:"bytes,9,opt,name=bad_login_time,json=badLoginTime,proto3,stdtime" json:"badLoginTime"`
	PWResetToken  string        `protobuf:"bytes,10,opt,name=pwreset_token,json=pwresetToken,proto3" json:"pwresetToken,omitempty"`
	PWResetTime   time.Time     `protobuf:"bytes,11,opt,name=pwreset_time,json=pwresetTime,proto3,stdtime" json:"pwresetTime"`
	Notes         []*PersonNote `protobuf:"bytes,27,rep,name=notes,proto3" json:"notes,omitempty"`
	NoEmail       bool          `protobuf:"varint,28,opt,name=no_email,json=noEmail,proto3" json:"no_email,omitempty"`
	NoText        bool          `protobuf:"varint,29,opt,name=no_text,json=noText,proto3" json:"no_text,omitempty"`
	// UnsubscribeToken is the token sent to this person in email that allows them
	// to do limited activities without logging in.  Unsubscribing from lists is
	// one such activity, for which this field was named, but it's now used for
	// signing up for assignments as well.
	UnsubscribeToken string `protobuf:"bytes,30,opt,name=unsubscribe_token,json=unsubscribeToken,proto3" json:"unsubscribe_token,omitempty"`
	VolgisticsID     int    `protobuf:"varint,32,opt,name=volgistics_id,json=volgisticsId,proto3,casttype=int" json:"volgistics_id,omitempty"`
	HoursToken       string `protobuf:"bytes,34,opt,name=hours_token,json=hoursToken,proto3" json:"hours_token,omitempty"`
	HoursReminder    bool   `protobuf:"varint,35,opt,name=hours_reminder,json=hoursReminder,proto3" json:"hours_reminder,omitempty"`
	// DSWRegistrations is a map from a DSWClass to the date on the person's most
	// recent valid DSW registration with that classification.  The registration
	// may or may not still be current.
	DSWRegistrations map[DSWClass]time.Time `protobuf:"bytes,36,rep,name=dsw_registrations,json=dswRegistrations,proto3,castkey=DSWClass,stdtime" json:"dsw_registrations" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// DSWUntil is a map from a DSWClass to the date on which the person's DSW
	// registration in that classification expired.  If someone has an entry in
	// DSWRegistrations for a particular DSWClass and no corresponding entry in
	// DSWUntil, that means their registration is current.
	DSWUntil map[DSWClass]time.Time `protobuf:"bytes,37,rep,name=dsw_until,json=dswUntil,proto3,castkey=DSWClass,stdtime" json:"dsw_until" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Identification is a bitmask of the types of identification that have been
	// issued to this person (and should be retrieved if they leave).
	Identification IdentType `protobuf:"varint,38,opt,name=identification,proto3,casttype=IdentType" json:"identification,omitempty"`
	// Roles is the set of roles held by the person.  Each one maps to a boolean
	// indicating whether the role is directly held (true) or implied (false).
	Roles map[RoleID]bool `protobuf:"bytes,39,rep,name=roles,proto3,castkey=RoleID" json:"roles,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Orgs is an array, indexed by Org, of descriptions of the person's
	// membership (or lack thereof) in that Org.
	Orgs []OrgMembership `protobuf:"bytes,40,rep,name=orgs,proto3" json:"orgs"`
	// BGChecks is the list of background checks the person has cleared.
	BGChecks []*BackgroundCheck `protobuf:"bytes,41,rep,name=bg_checks,json=bgChecks,proto3" json:"bg_checks,omitempty"`
	// EmContacts is the list of emergency contacts for the person.
	EmContacts           []*EmContact `protobuf:"bytes,42,rep,name=em_contacts,json=emContacts,proto3" json:"em_contacts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
}

func (m *Person) Reset()      { *m = Person{} }
func (*Person) ProtoMessage() {}
func (*Person) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{7}
}
func (m *Person) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Person) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Person.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Person) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Person.Merge(m, src)
}
func (m *Person) XXX_Size() int {
	return m.Size()
}
func (m *Person) XXX_DiscardUnknown() {
	xxx_messageInfo_Person.DiscardUnknown(m)
}

var xxx_messageInfo_Person proto.InternalMessageInfo

type PersonNote struct {
	Note                 string         `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
	Date                 string         `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
	Visibility           NoteVisibility `protobuf:"varint,5,opt,name=visibility,proto3,casttype=NoteVisibility" json:"visibility,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
}

func (m *PersonNote) Reset()      { *m = PersonNote{} }
func (*PersonNote) ProtoMessage() {}
func (*PersonNote) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{8}
}
func (m *PersonNote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PersonNote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PersonNote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PersonNote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersonNote.Merge(m, src)
}
func (m *PersonNote) XXX_Size() int {
	return m.Size()
}
func (m *PersonNote) XXX_DiscardUnknown() {
	xxx_messageInfo_PersonNote.DiscardUnknown(m)
}

var xxx_messageInfo_PersonNote proto.InternalMessageInfo

// A Role is a role that one or more people hold, describing their
// participation in SERV.
type Role struct {
	// ID is the unique identifier of the role.
	ID RoleID `protobuf:"varint,1,opt,name=id,proto3,casttype=RoleID" json:"id,omitempty"`
	// Name is the name of the role.  If multiple people can hold the role, this
	// is generally a plural noun phrase; otherwise it is generally singular.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Title is the title describing people who hold this role.  It is generally
	// the singular form of Name.  It may be empty, if this role should not be
	// shown for the people who hold it.
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// Org is the organization to which this role belongs.
	Org Org `protobuf:"varint,4,opt,name=org,proto3,casttype=Org" json:"org,omitempty"`
	// PrivLevel is the membership privilege level that this role conveys in Org
	// to the people who hold the role.  If it is PrivNone, membership is not
	// conveyed by the role.
	PrivLevel PrivLevel `protobuf:"varint,5,opt,name=privLevel,proto3,casttype=PrivLevel" json:"privLevel,omitempty"`
	// ShowRoster is a flag indicating that this role is a grouping that people
	// can usefully select on the roster page.
	ShowRoster bool `protobuf:"varint,6,opt,name=showRoster,proto3" json:"showRoster,omitempty"`
	// ImplicitOnly is a flag indicating that this role cannot be granted to a
	// person directly; it can only be implied through the granting of some other
	// role.
	ImplicitOnly bool `protobuf:"varint,7,opt,name=implicitOnly,proto3" json:"implicitOnly,omitempty"`
	// Priority is the priority of this role within its organization, where lower
	// numbers imply higher priority.  When displaying a person's title within an
	// organization, the title is taken from the role, held by that person, with
	// the lowest Priority value (excluding roles with empty Title).
	Priority int `protobuf:"varint,8,opt,name=priority,proto3,casttype=int" json:"priority,omitempty"`
	// Implies is the set of other roles are implied by this one. Each one is
	// mapped to a flag indicating whether the role is directly implied (true) or
	// indirectly implied (false).
	Implies map[RoleID]bool `protobuf:"bytes,9,rep,name=implies,proto3,castkey=RoleID" json:"implies,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Lists is the set of lists associated with the role.  Each one is mapped to
	// the subscription model and sender flag that together describe the
	// relationship between the list and holders of the role.
	Lists map[ListID]RoleToList `protobuf:"bytes,10,rep,name=lists,proto3,castkey=ListID,castvalue=RoleToList" json:"lists,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// People is the ordered list of people holding the role.
	People               []PersonID `protobuf:"varint,11,rep,packed,name=people,proto3,casttype=PersonID" json:"people,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
}

func (m *Role) Reset()      { *m = Role{} }
func (*Role) ProtoMessage() {}
func (*Role) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{9}
}
func (m *Role) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Role) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Role.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Role) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Role.Merge(m, src)
}
func (m *Role) XXX_Size() int {
	return m.Size()
}
func (m *Role) XXX_DiscardUnknown() {
	xxx_messageInfo_Role.DiscardUnknown(m)
}

var xxx_messageInfo_Role proto.InternalMessageInfo

type Roles struct {
	Roles                []*Role  `protobuf:"bytes,1,rep,name=roles,proto3" json:"roles,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
}

func (m *Roles) Reset()      { *m = Roles{} }
func (*Roles) ProtoMessage() {}
func (*Roles) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{10}
}
func (m *Roles) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Roles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Roles.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Roles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Roles.Merge(m, src)
}
func (m *Roles) XXX_Size() int {
	return m.Size()
}
func (m *Roles) XXX_DiscardUnknown() {
	xxx_messageInfo_Roles.DiscardUnknown(m)
}

var xxx_messageInfo_Roles proto.InternalMessageInfo

// A Shift identifies a time period for an Assignment, a range of people who can
// sign up for that shift, and the set of people who have signed up for that
// shift.
type Shift struct {
	// Start is the start time of the shift, in HH:MM format.
	Start string `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	// End is the end time of the shift, in HH:MM format.
	End string `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	// Task is an optional task name, used to distinguish this shift from other
	// shifts at the same time based on what task will be performed.
	Task string `protobuf:"bytes,3,opt,name=task,proto3" json:"task,omitempty"`
	// Min is the number of slots that need to be filled for this shift.
	Min int `protobuf:"varint,4,opt,name=min,proto3,casttype=int" json:"min,omitempty"`
	// Max is the maxinum number of people who can sign up for this shift; zero
	// means unlimited.
	Max int `protobuf:"varint,5,opt,name=max,proto3,casttype=int" json:"max,omitempty"`
	// SignedUp is the list of people who have signed up for this shift, ordered
	// by sortName.
	SignedUp []PersonID `protobuf:"varint,6,rep,packed,name=signed_up,json=signedUp,proto3,casttype=PersonID" json:"signed_up,omitempty"`
	// Declined is the list of people wha have declined this shift, ordered by
	// sortName.
	Declined []PersonID `protobuf:"varint,7,rep,packed,name=declined,proto3,casttype=PersonID" json:"declined,omitempty"`
	// Announce is a flag indicating that this shift (if open) should be included
	// in email announcements of open shifts.
	Announce             bool     `protobuf:"varint,8,opt,name=announce,proto3" json:"announce,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
}

func (m *Shift) Reset()      { *m = Shift{} }
func (*Shift) ProtoMessage() {}
func (*Shift) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{11}
}
func (m *Shift) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Shift) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Shift.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Shift) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Shift.Merge(m, src)
}
func (m *Shift) XXX_Size() int {
	return m.Size()
}
func (m *Shift) XXX_DiscardUnknown() {
	xxx_messageInfo_Shift.DiscardUnknown(m)
}

var xxx_messageInfo_Shift proto.InternalMessageInfo

type TextMessage struct {
	ID         TextMessageID    `protobuf:"varint,1,opt,name=id,proto3,casttype=TextMessageID" json:"id,omitempty"`
	Sender     PersonID         `protobuf:"varint,2,opt,name=sender,proto3,casttype=PersonID" json:"sender,omitempty"`
	Timestamp  time.Time        `protobuf:"bytes,4,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
	Message    string           `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	Recipients []*TextRecipient `protobuf:"bytes,6,rep,name=recipients,proto3" json:"recipients,omitempty"`
	// Lists is the array of lists to which the message was sent.
	Lists                []ListID `protobuf:"varint,7,rep,packed,name=lists,proto3,casttype=ListID" json:"lists,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
}

func (m *TextMessage) Reset()      { *m = TextMessage{} }
func (*TextMessage) ProtoMessage() {}
func (*TextMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{12}
}
func (m *TextMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TextMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TextMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TextMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TextMessage.Merge(m, src)
}
func (m *TextMessage) XXX_Size() int {
	return m.Size()
}
func (m *TextMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TextMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TextMessage proto.InternalMessageInfo

type TextRecipient struct {
	Recipient            PersonID        `protobuf:"varint,1,opt,name=recipient,proto3,casttype=PersonID" json:"recipient,omitempty"`
	Number               string          `protobuf:"bytes,2,opt,name=number,proto3" json:"number,omitempty"`
	Status               string          `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Timestamp            time.Time       `protobuf:"bytes,4,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
	Responses            []*TextResponse `protobuf:"bytes,5,rep,name=responses,proto3" json:"responses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
}

func (m *TextRecipient) Reset()      { *m = TextRecipient{} }
func (*TextRecipient) ProtoMessage() {}
func (*TextRecipient) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{13}
}
func (m *TextRecipient) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TextRecipient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TextRecipient.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TextRecipient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TextRecipient.Merge(m, src)
}
func (m *TextRecipient) XXX_Size() int {
	return m.Size()
}
func (m *TextRecipient) XXX_DiscardUnknown() {
	xxx_messageInfo_TextRecipient.DiscardUnknown(m)
}

var xxx_messageInfo_TextRecipient proto.InternalMessageInfo

type TextResponse struct {
	Response             string    `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Timestamp            time.Time `protobuf:"bytes,2,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
}

func (m *TextResponse) Reset()      { *m = TextResponse{} }
func (*TextResponse) ProtoMessage() {}
func (*TextResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{14}
}
func (m *TextResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TextResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TextResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TextResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TextResponse.Merge(m, src)
}
func (m *TextResponse) XXX_Size() int {
	return m.Size()
}
func (m *TextResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TextResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TextResponse proto.InternalMessageInfo

type Venue struct {
	ID                   VenueID  `protobuf:"varint,1,opt,name=id,proto3,casttype=VenueID" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Address              string   `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	City                 string   `protobuf:"bytes,4,opt,name=city,proto3" json:"city,omitempty"`
	URL                  string   `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
}

func (m *Venue) Reset()      { *m = Venue{} }
func (*Venue) ProtoMessage() {}
func (*Venue) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{15}
}
func (m *Venue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Venue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Venue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Venue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Venue.Merge(m, src)
}
func (m *Venue) XXX_Size() int {
	return m.Size()
}
func (m *Venue) XXX_DiscardUnknown() {
	xxx_messageInfo_Venue.DiscardUnknown(m)
}

var xxx_messageInfo_Venue proto.InternalMessageInfo

type Venues struct {
	Venues               []*Venue `protobuf:"bytes,1,rep,name=venues,proto3" json:"venues,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
}

func (m *Venues) Reset()      { *m = Venues{} }
func (*Venues) ProtoMessage() {}
func (*Venues) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{16}
}
func (m *Venues) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Venues) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Venues.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Venues) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Venues.Merge(m, src)
}
func (m *Venues) XXX_Size() int {
	return m.Size()
}
func (m *Venues) XXX_DiscardUnknown() {
	xxx_messageInfo_Venues.DiscardUnknown(m)
}

var xxx_messageInfo_Venues proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Address)(nil), "model.Address")
	proto.RegisterType((*BackgroundCheck)(nil), "model.BackgroundCheck")
	proto.RegisterType((*EmContact)(nil), "model.EmContact")
	proto.RegisterType((*Event)(nil), "model.Event")
	proto.RegisterType((*List)(nil), "model.List")
	proto.RegisterMapType((map[PersonID]ListPersonStatus)(nil), "model.List.PeopleEntry")
	proto.RegisterType((*Lists)(nil), "model.Lists")
	proto.RegisterType((*OrgMembership)(nil), "model.OrgMembership")
	proto.RegisterType((*Person)(nil), "model.Person")
	proto.RegisterMapType((map[DSWClass]time.Time)(nil), "model.Person.DswRegistrationsEntry")
	proto.RegisterMapType((map[DSWClass]time.Time)(nil), "model.Person.DswUntilEntry")
	proto.RegisterMapType((map[RoleID]bool)(nil), "model.Person.RolesEntry")
	proto.RegisterType((*PersonNote)(nil), "model.PersonNote")
	proto.RegisterType((*Role)(nil), "model.Role")
	proto.RegisterMapType((map[RoleID]bool)(nil), "model.Role.ImpliesEntry")
	proto.RegisterMapType((map[ListID]RoleToList)(nil), "model.Role.ListsEntry")
	proto.RegisterType((*Roles)(nil), "model.Roles")
	proto.RegisterType((*Shift)(nil), "model.Shift")
	proto.RegisterType((*TextMessage)(nil), "model.TextMessage")
	proto.RegisterType((*TextRecipient)(nil), "model.TextRecipient")
	proto.RegisterType((*TextResponse)(nil), "model.TextResponse")
	proto.RegisterType((*Venue)(nil), "model.Venue")
	proto.RegisterType((*Venues)(nil), "model.Venues")
}

func init() { proto.RegisterFile("model.proto", fileDescriptor_4c16552f9fdb66d8) }

var fileDescriptor_4c16552f9fdb66d8 = []byte{
	// 2160 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xcd, 0x6f, 0x5b, 0xc7,
	0x11, 0x37, 0x45, 0x52, 0x22, 0x87, 0xa4, 0x2c, 0xad, 0x1d, 0xeb, 0x59, 0x49, 0xf4, 0x68, 0x3a,
	0x1f, 0x8a, 0xe3, 0xca, 0x89, 0x93, 0x00, 0xa9, 0x11, 0x14, 0x30, 0x2d, 0xa7, 0x55, 0xe1, 0xc4,
	0xee, 0xfa, 0x0b, 0xc8, 0x85, 0x78, 0xe4, 0x5b, 0x53, 0x0b, 0x3d, 0xbe, 0x25, 0xde, 0x2e, 0x25,
	0xab, 0xa7, 0x36, 0x97, 0x02, 0x39, 0x05, 0xfd, 0x27, 0xfa, 0x77, 0xf4, 0xe6, 0x4b, 0x81, 0x1c,
	0x7b, 0xa2, 0x1b, 0xe5, 0x26, 0xf4, 0xda, 0x8b, 0x4e, 0xc5, 0xcc, 0xee, 0xfb, 0xf2, 0x27, 0x12,
	0xe4, 0xb6, 0x33, 0xbf, 0xd9, 0xdd, 0x79, 0xb3, 0xb3, 0x33, 0xbf, 0x7d, 0xd0, 0x9a, 0xa8, 0x50,
	0x44, 0x5b, 0xd3, 0x44, 0x19, 0xc5, 0xea, 0x24, 0xac, 0xff, 0x66, 0x2c, 0xcd, 0xee, 0x6c, 0xb8,
	0x35, 0x52, 0x93, 0x2b, 0x63, 0x35, 0x56, 0x57, 0x08, 0x1d, 0xce, 0x1e, 0x91, 0x44, 0x02, 0x8d,
	0xec, 0xac, 0x75, 0x7f, 0xac, 0xd4, 0x38, 0x12, 0xb9, 0x95, 0x91, 0x13, 0xa1, 0x4d, 0x30, 0x99,
	0x5a, 0x83, 0xde, 0xbf, 0x2a, 0xb0, 0x74, 0x3d, 0x0c, 0x13, 0xa1, 0x35, 0xf3, 0x60, 0x29, 0xb0,
	0x43, 0xaf, 0xd2, 0xad, 0x6c, 0x36, 0x79, 0x2a, 0xb2, 0x8f, 0xa0, 0xad, 0x83, 0x89, 0x18, 0x04,
	0x7a, 0xb0, 0xab, 0x26, 0xc2, 0x5b, 0xe8, 0x56, 0x36, 0x1b, 0xfd, 0xe5, 0xe3, 0xb9, 0x0f, 0xa8,
	0xbf, 0xae, 0xff, 0xa0, 0x26, 0x82, 0x17, 0xc6, 0x6c, 0x1d, 0x1a, 0x51, 0x60, 0xa4, 0x99, 0x85,
	0xc2, 0xab, 0x76, 0x2b, 0x9b, 0x15, 0x9e, 0xc9, 0xec, 0x2d, 0x68, 0x46, 0x2a, 0x1e, 0x5b, 0xb0,
	0x46, 0x60, 0xae, 0x60, 0x5f, 0x40, 0xe7, 0x91, 0x4c, 0xc4, 0x20, 0x94, 0xda, 0x24, 0x72, 0x64,
	0xbc, 0x7a, 0xb7, 0xb2, 0xd9, 0xe9, 0xaf, 0x1d, 0xcf, 0xfd, 0x36, 0x02, 0xdb, 0x4e, 0x7f, 0x32,
	0xf7, 0xab, 0x32, 0x36, 0xbc, 0xa4, 0xec, 0x85, 0x70, 0xba, 0x1f, 0x8c, 0xf6, 0xc6, 0x89, 0x9a,
	0xc5, 0xe1, 0x8d, 0x5d, 0x31, 0xda, 0x63, 0x0c, 0x6a, 0x61, 0x60, 0x84, 0xfb, 0x26, 0x1a, 0xb3,
	0x8b, 0x50, 0x33, 0x87, 0x53, 0xfb, 0x21, 0xd5, 0xfe, 0xe9, 0x93, 0xb9, 0xdf, 0xea, 0xff, 0x9e,
	0xcc, 0xef, 0x1d, 0x4e, 0x05, 0x27, 0x90, 0xe2, 0xa1, 0xf5, 0x6c, 0x22, 0x42, 0xfa, 0x84, 0x06,
	0x4f, 0xc5, 0xde, 0x5f, 0x2b, 0xd0, 0xbc, 0x39, 0xb9, 0xa1, 0x62, 0x13, 0x8c, 0x0c, 0x6e, 0x10,
	0x07, 0x93, 0x6c, 0x03, 0x1c, 0xb3, 0xb7, 0x01, 0x30, 0x52, 0x83, 0xe9, 0xae, 0x8a, 0xed, 0x36,
	0x4d, 0xde, 0x44, 0xcd, 0x1d, 0x54, 0x20, 0x3c, 0x12, 0x51, 0xe4, 0xe0, 0xaa, 0x85, 0x51, 0x63,
	0xe1, 0x1e, 0xb4, 0x13, 0x81, 0xf1, 0x52, 0xb1, 0xde, 0x95, 0x53, 0x0a, 0x52, 0x93, 0x97, 0x74,
	0xbd, 0x7f, 0x56, 0xa1, 0x7e, 0x73, 0x5f, 0xc4, 0x86, 0x5d, 0x80, 0x05, 0x19, 0xd2, 0xee, 0xd5,
	0xfe, 0xea, 0xd1, 0xdc, 0x5f, 0xd8, 0xd9, 0x3e, 0x99, 0xfb, 0x4b, 0x04, 0xee, 0x6c, 0xf3, 0x05,
	0x19, 0x66, 0x2e, 0x2e, 0x14, 0x5c, 0x4c, 0xe3, 0x52, 0x2d, 0xc4, 0xe5, 0x2c, 0xd4, 0xb5, 0x09,
	0x12, 0xe3, 0x76, 0xb4, 0x02, 0x5b, 0x81, 0xaa, 0x88, 0x43, 0x3a, 0x88, 0x26, 0xc7, 0x21, 0xbb,
	0x00, 0xf5, 0x7d, 0x11, 0xcf, 0x84, 0xb7, 0x48, 0xbb, 0xb6, 0x70, 0xbf, 0x07, 0xa8, 0xd8, 0xd9,
	0xe6, 0x16, 0xc1, 0xe8, 0x85, 0xc2, 0x04, 0x32, 0xd2, 0xde, 0x92, 0xcd, 0x26, 0x27, 0xb2, 0x0b,
	0x2e, 0xf8, 0x8d, 0x6e, 0x65, 0xb3, 0xde, 0xef, 0x9c, 0xcc, 0xfd, 0x26, 0xf9, 0x5a, 0x08, 0xfd,
	0x87, 0xd0, 0x4c, 0x44, 0x2c, 0x0e, 0xf4, 0xf6, 0xdd, 0x87, 0x5e, 0x87, 0xb2, 0xad, 0x73, 0x34,
	0xf7, 0x9b, 0x3c, 0x55, 0xf2, 0x1c, 0x67, 0x9f, 0x42, 0x7b, 0xa4, 0xf6, 0x45, 0x22, 0xc2, 0xfe,
	0x21, 0xda, 0x2f, 0x93, 0xfd, 0xca, 0xd1, 0xdc, 0x6f, 0xdf, 0x28, 0xe8, 0x79, 0xc9, 0x8a, 0x9d,
	0x87, 0xaa, 0x4a, 0xc6, 0xde, 0x69, 0xfa, 0x80, 0x25, 0xcc, 0xa6, 0xdb, 0xc9, 0x98, 0xa3, 0x8e,
	0x75, 0xa1, 0x9e, 0xa8, 0x48, 0x68, 0x6f, 0xa5, 0x5b, 0xdd, 0xac, 0xf6, 0xe1, 0x64, 0xee, 0x2f,
	0x72, 0x15, 0xd1, 0xc7, 0x11, 0xc0, 0xde, 0x81, 0x45, 0xbd, 0x2b, 0x1f, 0x19, 0xed, 0xad, 0x76,
	0xab, 0x9b, 0xad, 0xab, 0xed, 0x2d, 0x7b, 0x57, 0xef, 0xa2, 0x92, 0x3b, 0x8c, 0xf9, 0xd0, 0xd2,
	0x72, 0x1c, 0xcf, 0xa6, 0x03, 0x23, 0x1e, 0x1b, 0x8f, 0x51, 0x18, 0xc0, 0xaa, 0xee, 0x89, 0xc7,
	0xa6, 0xf7, 0xdf, 0x0a, 0xd4, 0x6e, 0x49, 0x6d, 0x58, 0xb7, 0x70, 0x84, 0x2b, 0xd9, 0x11, 0x2e,
	0x22, 0xe6, 0x4e, 0xb0, 0x5b, 0xca, 0xd8, 0xf6, 0xc9, 0xdc, 0x6f, 0x20, 0x5a, 0x88, 0x59, 0x7a,
	0xc6, 0xd5, 0xc2, 0x19, 0xff, 0x09, 0x16, 0xa7, 0x42, 0x4d, 0x23, 0xbc, 0x67, 0xe8, 0xe7, 0x9a,
	0xf3, 0x13, 0xa7, 0x6e, 0xdd, 0x21, 0xe4, 0x66, 0x6c, 0x92, 0xc3, 0x7e, 0xf7, 0xdb, 0xa7, 0x7e,
	0xe3, 0x8e, 0x48, 0xb4, 0x8a, 0x77, 0xb6, 0xbf, 0x7b, 0xea, 0xaf, 0xa0, 0x85, 0x95, 0xef, 0x9a,
	0xc0, 0xcc, 0x34, 0x77, 0x0b, 0xad, 0xff, 0x16, 0x5a, 0x85, 0x89, 0x98, 0x1b, 0x7b, 0xe2, 0xd0,
	0xba, 0xce, 0x71, 0x88, 0x39, 0xb4, 0x1f, 0x44, 0x33, 0xe7, 0x2a, 0xb7, 0xc2, 0xb5, 0x85, 0xcf,
	0x2b, 0xbd, 0x4b, 0x50, 0xc7, 0x65, 0x31, 0x03, 0xea, 0x11, 0x0e, 0xbc, 0x0a, 0x79, 0xd5, 0x2a,
	0x78, 0xc5, 0x2d, 0xd2, 0xe3, 0xd0, 0xb9, 0x9d, 0x8c, 0xbf, 0x12, 0x93, 0xa1, 0x48, 0x30, 0xdf,
	0x31, 0x25, 0xa6, 0x89, 0xdc, 0xbf, 0x25, 0xf6, 0x45, 0xe4, 0x22, 0x45, 0xa9, 0x73, 0x27, 0x55,
	0xf2, 0x1c, 0x47, 0x1f, 0x8c, 0x34, 0x51, 0x9a, 0xf0, 0x56, 0xe8, 0xfd, 0xef, 0x34, 0x2c, 0xda,
	0x6f, 0x62, 0xbd, 0x42, 0xc0, 0x59, 0x16, 0xf0, 0x2c, 0x02, 0x14, 0xf2, 0xcf, 0xa0, 0x23, 0xe3,
	0x47, 0x2a, 0x99, 0x04, 0xd1, 0x80, 0x22, 0xbb, 0x8a, 0x8b, 0xf5, 0x57, 0xb0, 0x12, 0xa5, 0xc0,
	0xd7, 0xc1, 0x44, 0xf0, 0x92, 0xc4, 0xae, 0x40, 0xab, 0x38, 0x89, 0x8e, 0xc3, 0xd6, 0xca, 0xc2,
	0x94, 0xc2, 0x98, 0x7d, 0x00, 0x4d, 0xad, 0x12, 0x63, 0xcd, 0xe9, 0xe2, 0xf5, 0xdb, 0xc7, 0x73,
	0xbf, 0x81, 0x4a, 0x32, 0xce, 0x46, 0xec, 0x13, 0x68, 0x8e, 0x82, 0x28, 0x1a, 0x60, 0x0e, 0xd1,
	0xdd, 0x6b, 0xf6, 0xcf, 0x1d, 0xcf, 0x7d, 0x86, 0xca, 0xbb, 0x72, 0x1c, 0x5f, 0x56, 0x13, 0x69,
	0xc4, 0x64, 0x6a, 0x0e, 0x79, 0x23, 0xd5, 0x61, 0x30, 0xc4, 0x24, 0x90, 0x91, 0x77, 0xde, 0x06,
	0x83, 0x04, 0x76, 0x0e, 0x16, 0x69, 0x70, 0xd5, 0x5b, 0x27, 0xb5, 0x93, 0xd8, 0x97, 0xd0, 0xa6,
	0xca, 0x95, 0xb6, 0x02, 0xcc, 0xda, 0xd6, 0xd5, 0x65, 0x77, 0x44, 0xae, 0x57, 0xf4, 0xcf, 0x3c,
	0x99, 0xfb, 0xa7, 0x8e, 0xe7, 0x7e, 0x0b, 0x6d, 0x9d, 0x92, 0x17, 0x05, 0x5c, 0xe7, 0x40, 0x25,
	0x7b, 0xd9, 0x3a, 0x67, 0x5e, 0xbd, 0x0e, 0xda, 0x66, 0xeb, 0x14, 0x04, 0x5c, 0x07, 0x1d, 0xcb,
	0xd6, 0x39, 0xfb, 0xea, 0x75, 0xd0, 0x36, 0x5b, 0xa7, 0x20, 0xb0, 0xcb, 0xa5, 0x92, 0xfb, 0x06,
	0xc5, 0xae, 0x73, 0x3c, 0xf7, 0xf3, 0xb2, 0x5b, 0xac, 0xc0, 0x97, 0x4b, 0xf5, 0xfb, 0x5c, 0x6e,
	0x9d, 0xd5, 0xf0, 0x62, 0x39, 0xbf, 0x0c, 0x40, 0xdf, 0x6a, 0xad, 0xd7, 0x72, 0x6b, 0xd4, 0x3a,
	0xeb, 0x6c, 0x88, 0xbd, 0x71, 0x1a, 0x68, 0x7d, 0xa0, 0x92, 0x90, 0x4a, 0x63, 0x9b, 0x67, 0x32,
	0xfb, 0x23, 0x9c, 0x1e, 0x06, 0xe1, 0x20, 0x52, 0x63, 0x19, 0x0f, 0x46, 0x6a, 0x16, 0x1b, 0x2a,
	0x93, 0xd5, 0x7e, 0xef, 0x78, 0xee, 0xaf, 0x0d, 0x83, 0xf0, 0x16, 0x22, 0x37, 0x10, 0xc8, 0xcf,
	0x3a, 0x6d, 0x85, 0x9d, 0x12, 0xce, 0xbe, 0x81, 0xe5, 0x7c, 0x2d, 0x6c, 0xfc, 0x5e, 0x93, 0x62,
	0xb7, 0xbe, 0x65, 0x59, 0xc1, 0x56, 0xca, 0x0a, 0xb6, 0xee, 0xa5, 0xac, 0xa0, 0xef, 0xb9, 0x38,
	0xb6, 0xd3, 0xa5, 0x10, 0xfa, 0xfe, 0xa9, 0x5f, 0xe1, 0x25, 0x0d, 0xbb, 0x0d, 0x9d, 0xe9, 0x41,
	0x22, 0xb4, 0x30, 0x03, 0xa3, 0xf6, 0x44, 0xec, 0x01, 0x7d, 0xf4, 0x25, 0x2c, 0xba, 0x77, 0x1e,
	0x72, 0x04, 0xee, 0xa1, 0xfe, 0x78, 0xee, 0x9f, 0x73, 0x86, 0x24, 0x17, 0x12, 0xb4, 0x5d, 0xd4,
	0x33, 0x01, 0xed, 0x6c, 0x41, 0x74, 0xb5, 0xf5, 0x5a, 0x57, 0xdf, 0x43, 0x57, 0x8f, 0xe6, 0x7e,
	0x2b, 0xdd, 0x4f, 0x4e, 0x04, 0x66, 0x40, 0xba, 0x6c, 0xea, 0x78, 0x51, 0xc1, 0xde, 0x87, 0x7a,
	0xac, 0x8c, 0xd0, 0xde, 0x9b, 0x54, 0x79, 0x56, 0x5d, 0x1a, 0xd9, 0x7b, 0xff, 0xb5, 0x32, 0x82,
	0x5b, 0x9c, 0x9d, 0x87, 0x46, 0xac, 0x06, 0xf6, 0xde, 0xbc, 0x65, 0xbb, 0x7f, 0xac, 0x6e, 0xd2,
	0xcd, 0x59, 0x83, 0xa5, 0x58, 0xd9, 0x92, 0xfe, 0x36, 0x21, 0x8b, 0xb1, 0xc2, 0x72, 0xce, 0x3e,
	0x84, 0xd5, 0x59, 0xac, 0x67, 0x43, 0x3d, 0x4a, 0xe4, 0x50, 0xb8, 0xc0, 0x6c, 0xd0, 0xed, 0x5a,
	0x29, 0x00, 0xf6, 0x83, 0xbf, 0x80, 0xce, 0xbe, 0x8a, 0xc6, 0x52, 0x1b, 0x39, 0xd2, 0x03, 0x19,
	0x7a, 0x5d, 0x3a, 0xe7, 0x35, 0x8c, 0xe0, 0x83, 0x0c, 0xa0, 0xb2, 0x64, 0x79, 0x4e, 0x6e, 0xbd,
	0x13, 0x62, 0x6b, 0xd9, 0x55, 0xb3, 0x44, 0xbb, 0x4d, 0x7a, 0xb6, 0xb5, 0x90, 0xca, 0x2e, 0xff,
	0x2e, 0x2c, 0x5b, 0x83, 0x44, 0x4c, 0x64, 0x1c, 0x8a, 0xc4, 0xbb, 0x48, 0xbe, 0x76, 0x48, 0xcb,
	0x9d, 0x92, 0xfd, 0x19, 0x56, 0x43, 0x7d, 0x30, 0x48, 0x04, 0x2e, 0x9d, 0x58, 0x76, 0xe1, 0xbd,
	0x43, 0xb1, 0xb9, 0x58, 0x8a, 0xcd, 0xd6, 0xb6, 0x3e, 0xe0, 0x45, 0x2b, 0xdb, 0x37, 0x36, 0xdd,
	0x21, 0xac, 0x60, 0x83, 0x2d, 0xc2, 0xd8, 0x4f, 0xb6, 0xef, 0x3e, 0xbc, 0x11, 0x05, 0x5a, 0xd3,
	0x31, 0xac, 0x84, 0xcf, 0x2c, 0xc0, 0xbe, 0x81, 0x26, 0xee, 0x3d, 0x8b, 0x8d, 0x8c, 0xbc, 0x77,
	0x69, 0xcf, 0x37, 0x9f, 0xdb, 0xf3, 0x3e, 0xa2, 0xae, 0x47, 0xb9, 0xbd, 0x70, 0x5d, 0x52, 0x3f,
	0xb7, 0x47, 0x23, 0x74, 0x13, 0xd8, 0x67, 0xb0, 0x2c, 0x43, 0x11, 0x1b, 0xf9, 0x48, 0x8e, 0x68,
	0x3b, 0xef, 0xbd, 0xbc, 0x65, 0xec, 0x84, 0x29, 0xdb, 0x78, 0xc6, 0x88, 0x5d, 0x4b, 0x3b, 0xff,
	0xfb, 0xe4, 0x8e, 0x57, 0x76, 0x07, 0x39, 0x80, 0xfb, 0x6e, 0xf8, 0xf6, 0xe9, 0xb3, 0x9c, 0x60,
	0x0b, 0x6a, 0x2a, 0x19, 0x6b, 0x6f, 0x93, 0xa6, 0x9e, 0x75, 0x53, 0x4b, 0x4d, 0xac, 0x5f, 0xc3,
	0x4f, 0xe0, 0x64, 0xc7, 0xae, 0x43, 0x73, 0x38, 0x1e, 0x8c, 0x90, 0x74, 0x6a, 0xef, 0x03, 0x9a,
	0x74, 0xce, 0x4d, 0x7a, 0x86, 0xc2, 0xf6, 0xdb, 0xf8, 0xd5, 0x8e, 0xa0, 0x6a, 0xde, 0x18, 0x8e,
	0xed, 0x88, 0x7d, 0x0c, 0x2d, 0x31, 0x19, 0x8c, 0x2c, 0x0f, 0xd5, 0xde, 0x25, 0x5a, 0x64, 0xc5,
	0x2d, 0x92, 0x11, 0x54, 0x0e, 0x22, 0x1d, 0xea, 0xf5, 0x01, 0xbc, 0xf1, 0xc2, 0x93, 0x2c, 0x36,
	0xf2, 0xba, 0x6d, 0xe4, 0x1f, 0x15, 0x1b, 0xf9, 0x2b, 0xef, 0x62, 0xa1, 0xc9, 0xaf, 0x3f, 0x84,
	0x4e, 0xe9, 0xd8, 0x7e, 0xb5, 0x85, 0x3f, 0x07, 0xc8, 0x0f, 0xe0, 0x75, 0xbc, 0xa3, 0x51, 0xe4,
	0x1d, 0xbb, 0x00, 0xf9, 0x05, 0x27, 0x9e, 0xa4, 0x4c, 0xce, 0x85, 0x9d, 0x8e, 0xb8, 0x70, 0xad,
	0xc0, 0x85, 0xaf, 0x02, 0xec, 0x4b, 0x2d, 0x87, 0x32, 0x92, 0xe6, 0x90, 0xc8, 0x6f, 0xb5, 0xcf,
	0x4e, 0xe6, 0xfe, 0x32, 0xae, 0xf2, 0x20, 0x43, 0x78, 0xc1, 0xaa, 0xf7, 0x8f, 0x1a, 0xd4, 0xd0,
	0xc9, 0x97, 0x11, 0x3a, 0x97, 0x31, 0x2f, 0xa3, 0xe4, 0x19, 0x6d, 0xa9, 0x16, 0x68, 0x4b, 0xca,
	0x54, 0x6b, 0x2f, 0x60, 0xaa, 0x25, 0x52, 0x54, 0x7f, 0x0d, 0x29, 0xda, 0x00, 0xd0, 0xbb, 0xea,
	0x80, 0x2b, 0x6d, 0x44, 0x42, 0xec, 0xa1, 0xc1, 0x0b, 0x1a, 0x7c, 0x75, 0xc8, 0xc9, 0x34, 0x92,
	0x23, 0x69, 0x6e, 0xc7, 0xd1, 0x21, 0xf5, 0xa6, 0x06, 0x2f, 0xe9, 0xd8, 0x45, 0x68, 0x4c, 0x13,
	0xa9, 0x12, 0x0c, 0x49, 0x23, 0x77, 0x08, 0x0b, 0x54, 0x06, 0xb0, 0xdf, 0xc1, 0x12, 0x4d, 0x12,
	0xda, 0x6b, 0x96, 0xee, 0x11, 0x7e, 0xfe, 0xd6, 0x8e, 0x85, 0x9e, 0xbf, 0x47, 0xe9, 0x24, 0xf6,
	0x65, 0x4a, 0x0f, 0xa1, 0x74, 0x2b, 0x68, 0x36, 0x11, 0x48, 0x3b, 0xd7, 0xc3, 0xb9, 0x96, 0x22,
	0x7f, 0xf7, 0xd4, 0xa7, 0xe4, 0xb8, 0xa7, 0x0a, 0x1c, 0x12, 0x59, 0xba, 0x63, 0xbf, 0x2d, 0x22,
	0xf2, 0xed, 0x12, 0xc5, 0x4b, 0x09, 0xed, 0x35, 0x68, 0x17, 0x5d, 0xfa, 0x39, 0x99, 0x85, 0x39,
	0x99, 0x3b, 0xf4, 0x73, 0xb9, 0x30, 0x65, 0x33, 0x72, 0x61, 0x5b, 0x72, 0xca, 0x5c, 0x18, 0x41,
	0x57, 0x59, 0x7a, 0xc7, 0x15, 0xa8, 0xd3, 0xcb, 0x22, 0x7f, 0x9f, 0x55, 0x5e, 0xf0, 0x3e, 0x5b,
	0xc8, 0xdf, 0x67, 0x0c, 0x6a, 0x26, 0xd0, 0x7b, 0xe9, 0x5b, 0x00, 0xc7, 0x98, 0x46, 0x13, 0x19,
	0x53, 0x1a, 0xd5, 0xf3, 0x53, 0x43, 0x1d, 0x41, 0xc1, 0x63, 0x4a, 0xa0, 0x12, 0x14, 0x3c, 0x26,
	0x72, 0x2a, 0xc7, 0xb1, 0x08, 0x07, 0xb3, 0xa9, 0xb7, 0xf8, 0x82, 0x30, 0x36, 0x2c, 0x7c, 0x7f,
	0xca, 0x36, 0xa1, 0x11, 0x8a, 0x51, 0x24, 0x63, 0x81, 0xbc, 0xe6, 0x05, 0x96, 0x29, 0x8a, 0x0c,
	0x28, 0x88, 0x63, 0x35, 0x8b, 0x47, 0xf6, 0x15, 0xd8, 0xe0, 0x99, 0xdc, 0xfb, 0xfb, 0x02, 0xb4,
	0xb0, 0x9b, 0x7e, 0x25, 0xb4, 0x0e, 0xc6, 0xd8, 0xb1, 0xf3, 0x9b, 0xb4, 0x96, 0xdd, 0xa4, 0x4e,
	0xc1, 0xc4, 0x5d, 0x28, 0x7c, 0x93, 0x09, 0xea, 0x74, 0x85, 0x37, 0x52, 0x7e, 0xda, 0x16, 0x63,
	0x7d, 0x68, 0x66, 0xff, 0x40, 0x28, 0x16, 0xaf, 0x26, 0x19, 0x0d, 0x2c, 0xd8, 0xd4, 0x5b, 0xf2,
	0x69, 0xf8, 0xb4, 0x9d, 0xd8, 0xad, 0xdd, 0x9b, 0x38, 0x15, 0xd9, 0xa7, 0x00, 0x89, 0x18, 0xc9,
	0xa9, 0x14, 0xb1, 0xd1, 0x14, 0xae, 0xbc, 0x13, 0xa0, 0xc7, 0x3c, 0x05, 0x79, 0xc1, 0x0e, 0xdf,
	0x9b, 0x36, 0xdf, 0x97, 0xf2, 0xf7, 0xa6, 0x7b, 0xfa, 0xb9, 0xd7, 0xd0, 0x51, 0x05, 0x3a, 0xa5,
	0xf9, 0xec, 0x12, 0xbe, 0x90, 0x9d, 0xe0, 0xa2, 0x53, 0xfe, 0xe0, 0x1c, 0x46, 0xaa, 0x1f, 0xcf,
	0xb0, 0x07, 0xb9, 0x14, 0x71, 0x12, 0xea, 0x35, 0x3d, 0xee, 0x5c, 0x9e, 0x38, 0xe9, 0x57, 0x89,
	0xd1, 0xc7, 0xe8, 0x9f, 0x9e, 0xaa, 0x58, 0x0b, 0xed, 0xd5, 0x29, 0x10, 0x67, 0x4a, 0x81, 0xb0,
	0x18, 0xcf, 0xad, 0x7a, 0x31, 0xb4, 0x8b, 0x10, 0x66, 0x49, 0x0a, 0xba, 0x7c, 0xcf, 0xe4, 0xb2,
	0x8b, 0x0b, 0xbf, 0xc8, 0xc5, 0xde, 0xdf, 0x2a, 0x50, 0xa7, 0x9f, 0x16, 0x2f, 0xfb, 0x83, 0x92,
	0xfe, 0xd1, 0x78, 0x59, 0xb9, 0x2e, 0xfc, 0x30, 0xab, 0x96, 0x7f, 0x98, 0x31, 0xa8, 0x8d, 0xb0,
	0x44, 0xba, 0x7e, 0x82, 0x63, 0xbc, 0x64, 0xb3, 0xc4, 0x56, 0xe9, 0x66, 0x7f, 0xe9, 0x68, 0xee,
	0x57, 0xef, 0xf3, 0x5b, 0x1c, 0x75, 0xbd, 0x2d, 0x58, 0xa4, 0xbd, 0xa8, 0x64, 0xd1, 0xef, 0x93,
	0xb4, 0x1c, 0xa4, 0x3f, 0x16, 0x08, 0xe6, 0x0e, 0xeb, 0x77, 0x9f, 0xfc, 0xb8, 0x71, 0xea, 0xdf,
	0x3f, 0x6e, 0x9c, 0xfa, 0xcb, 0xd1, 0x46, 0xe5, 0xc9, 0xd1, 0x46, 0xe5, 0x87, 0xa3, 0x8d, 0xca,
	0x7f, 0x8e, 0x36, 0x2a, 0xdf, 0xff, 0xb4, 0x71, 0xea, 0x87, 0x9f, 0x36, 0x4e, 0x0d, 0x17, 0x29,
	0x08, 0x9f, 0xfc, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xb6, 0xb6, 0x1e, 0x6f, 0x44, 0x14, 0x00, 0x00,
}

func (m *Address) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Address) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Address) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FireDistrict != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.FireDistrict))
		i--
		dAtA[i] = 0x28
	}
	if m.Longitude != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Longitude))))
		i--
		dAtA[i] = 0x21
	}
	if m.Latitude != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Latitude))))
		i--
		dAtA[i] = 0x19
	}
	if m.SameAsHome {
		i--
		if m.SameAsHome {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BackgroundCheck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackgroundCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackgroundCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Assumed {
		i--
		if m.Assumed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Type != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Date) > 0 {
		i -= len(m.Date)
		copy(dAtA[i:], m.Date)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Date)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EmContact) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmContact) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EmContact) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Relationship) > 0 {
		i -= len(m.Relationship)
		copy(dAtA[i:], m.Relationship)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Relationship)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CellPhone) > 0 {
		i -= len(m.CellPhone)
		copy(dAtA[i:], m.CellPhone)
		i = encodeVarintModel(dAtA, i, uint64(len(m.CellPhone)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.HomePhone) > 0 {
		i -= len(m.HomePhone)
		copy(dAtA[i:], m.HomePhone)
		i = encodeVarintModel(dAtA, i, uint64(len(m.HomePhone)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SignupText) > 0 {
		i -= len(m.SignupText)
		copy(dAtA[i:], m.SignupText)
		i = encodeVarintModel(dAtA, i, uint64(len(m.SignupText)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.Shifts) > 0 {
		for iNdEx := len(m.Shifts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Shifts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.Roles) > 0 {
		dAtA2 := make([]byte, len(m.Roles)*10)
		var j1 int
		for _, num1 := range m.Roles {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintModel(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Org != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Org))
		i--
		dAtA[i] = 0x78
	}
	if m.CoveredByDSW {
		i--
		if m.CoveredByDSW {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.RenewsDSW {
		i--
		if m.RenewsDSW {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.Type != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Details) > 0 {
		i -= len(m.Details)
		copy(dAtA[i:], m.Details)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Details)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Venue != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Venue))
		i--
		dAtA[i] = 0x30
	}
	if len(m.End) > 0 {
		i -= len(m.End)
		copy(dAtA[i:], m.End)
		i = encodeVarintModel(dAtA, i, uint64(len(m.End)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Start) > 0 {
		i -= len(m.Start)
		copy(dAtA[i:], m.Start)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Start)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Date) > 0 {
		i -= len(m.Date)
		copy(dAtA[i:], m.Date)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Date)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *List) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *List) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *List) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.People) > 0 {
		for k := range m.People {
			v := m.People[k]
			baseI := i
			i = encodeVarintModel(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintModel(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintModel(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Lists) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Lists) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Lists) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Lists) > 0 {
		for iNdEx := len(m.Lists) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Lists[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OrgMembership) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrgMembership) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrgMembership) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.PrivLevel != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.PrivLevel))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Person) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Person) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Person) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EmContacts) > 0 {
		for iNdEx := len(m.EmContacts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EmContacts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xd2
		}
	}
	if len(m.BGChecks) > 0 {
		for iNdEx := len(m.BGChecks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BGChecks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xca
		}
	}
	if len(m.Orgs) > 0 {
		for iNdEx := len(m.Orgs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Orgs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xc2
		}
	}
	if len(m.Roles) > 0 {
		for k := range m.Roles {
			v := m.Roles[k]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i = encodeVarintModel(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintModel(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xba
		}
	}
	if m.Identification != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Identification))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb0
	}
	if len(m.DSWUntil) > 0 {
		for k := range m.DSWUntil {
			v := m.DSWUntil[k]
			baseI := i
			n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo((*(&v)), dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime((*(&v))):])
			if err3 != nil {
				return 0, err3
			}
			i -= n3
			i = encodeVarintModel(dAtA, i, uint64(n3))
			i--
			dAtA[i] = 0x12
			i = encodeVarintModel(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintModel(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xaa
		}
	}
	if len(m.DSWRegistrations) > 0 {
		for k := range m.DSWRegistrations {
			v := m.DSWRegistrations[k]
			baseI := i
			n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo((*(&v)), dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime((*(&v))):])
			if err4 != nil {
				return 0, err4
			}
			i -= n4
			i = encodeVarintModel(dAtA, i, uint64(n4))
			i--
			dAtA[i] = 0x12
			i = encodeVarintModel(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintModel(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xa2
		}
	}
	if m.HoursReminder {
		i--
		if m.HoursReminder {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x98
	}
	if len(m.HoursToken) > 0 {
		i -= len(m.HoursToken)
		copy(dAtA[i:], m.HoursToken)
		i = encodeVarintModel(dAtA, i, uint64(len(m.HoursToken)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	if m.VolgisticsID != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.VolgisticsID))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if len(m.UnsubscribeToken) > 0 {
		i -= len(m.UnsubscribeToken)
		copy(dAtA[i:], m.UnsubscribeToken)
		i = encodeVarintModel(dAtA, i, uint64(len(m.UnsubscribeToken)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	if m.NoText {
		i--
		if m.NoText {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if m.NoEmail {
		i--
		if m.NoEmail {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if len(m.Notes) > 0 {
		for iNdEx := len(m.Notes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Notes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xda
		}
	}
	if len(m.Email2) > 0 {
		i -= len(m.Email2)
		copy(dAtA[i:], m.Email2)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Email2)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if len(m.WorkPhone) > 0 {
		i -= len(m.WorkPhone)
		copy(dAtA[i:], m.WorkPhone)
		i = encodeVarintModel(dAtA, i, uint64(len(m.WorkPhone)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.HomePhone) > 0 {
		i -= len(m.HomePhone)
		copy(dAtA[i:], m.HomePhone)
		i = encodeVarintModel(dAtA, i, uint64(len(m.HomePhone)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.CellPhone) > 0 {
		i -= len(m.CellPhone)
		copy(dAtA[i:], m.CellPhone)
		i = encodeVarintModel(dAtA, i, uint64(len(m.CellPhone)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	{
		size, err := m.MailAddress.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintModel(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa2
	{
		size, err := m.WorkAddress.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintModel(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x9a
	{
		size, err := m.HomeAddress.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintModel(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x92
	if len(m.InformalName) > 0 {
		i -= len(m.InformalName)
		copy(dAtA[i:], m.InformalName)
		i = encodeVarintModel(dAtA, i, uint64(len(m.InformalName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	n8, err8 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.PWResetTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.PWResetTime):])
	if err8 != nil {
		return 0, err8
	}
	i -= n8
	i = encodeVarintModel(dAtA, i, uint64(n8))
	i--
	dAtA[i] = 0x5a
	if len(m.PWResetToken) > 0 {
		i -= len(m.PWResetToken)
		copy(dAtA[i:], m.PWResetToken)
		i = encodeVarintModel(dAtA, i, uint64(len(m.PWResetToken)))
		i--
		dAtA[i] = 0x52
	}
	n9, err9 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.BadLoginTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.BadLoginTime):])
	if err9 != nil {
		return 0, err9
	}
	i -= n9
	i = encodeVarintModel(dAtA, i, uint64(n9))
	i--
	dAtA[i] = 0x4a
	if m.BadLoginCount != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.BadLoginCount))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CallSign) > 0 {
		i -= len(m.CallSign)
		copy(dAtA[i:], m.CallSign)
		i = encodeVarintModel(dAtA, i, uint64(len(m.CallSign)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SortName) > 0 {
		i -= len(m.SortName)
		copy(dAtA[i:], m.SortName)
		i = encodeVarintModel(dAtA, i, uint64(len(m.SortName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FormalName) > 0 {
		i -= len(m.FormalName)
		copy(dAtA[i:], m.FormalName)
		i = encodeVarintModel(dAtA, i, uint64(len(m.FormalName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ID != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PersonNote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PersonNote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PersonNote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Visibility != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Visibility))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Date) > 0 {
		i -= len(m.Date)
		copy(dAtA[i:], m.Date)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Date)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Note) > 0 {
		i -= len(m.Note)
		copy(dAtA[i:], m.Note)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Note)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *Role) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Role) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Role) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.People) > 0 {
		dAtA11 := make([]byte, len(m.People)*10)
		var j10 int
		for _, num1 := range m.People {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		i -= j10
		copy(dAtA[i:], dAtA11[:j10])
		i = encodeVarintModel(dAtA, i, uint64(j10))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Lists) > 0 {
		for k := range m.Lists {
			v := m.Lists[k]
			baseI := i
			i = encodeVarintModel(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintModel(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintModel(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Implies) > 0 {
		for k := range m.Implies {
			v := m.Implies[k]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i = encodeVarintModel(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintModel(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.Priority != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Priority))
		i--
		dAtA[i] = 0x40
	}
	if m.ImplicitOnly {
		i--
		if m.ImplicitOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.ShowRoster {
		i--
		if m.ShowRoster {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.PrivLevel != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.PrivLevel))
		i--
		dAtA[i] = 0x28
	}
	if m.Org != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Org))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Roles) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Roles) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Roles) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Roles) > 0 {
		for iNdEx := len(m.Roles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Roles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Shift) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Shift) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Shift) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Announce {
		i--
		if m.Announce {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.Declined) > 0 {
		dAtA13 := make([]byte, len(m.Declined)*10)
		var j12 int
		for _, num1 := range m.Declined {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA13[j12] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j12++
			}
			dAtA13[j12] = uint8(num)
			j12++
		}
		i -= j12
		copy(dAtA[i:], dAtA13[:j12])
		i = encodeVarintModel(dAtA, i, uint64(j12))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SignedUp) > 0 {
		dAtA15 := make([]byte, len(m.SignedUp)*10)
		var j14 int
		for _, num1 := range m.SignedUp {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA15[j14] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j14++
			}
			dAtA15[j14] = uint8(num)
			j14++
		}
		i -= j14
		copy(dAtA[i:], dAtA15[:j14])
		i = encodeVarintModel(dAtA, i, uint64(j14))
		i--
		dAtA[i] = 0x32
	}
	if m.Max != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Max))
		i--
		dAtA[i] = 0x28
	}
	if m.Min != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Min))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Task) > 0 {
		i -= len(m.Task)
		copy(dAtA[i:], m.Task)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Task)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.End) > 0 {
		i -= len(m.End)
		copy(dAtA[i:], m.End)
		i = encodeVarintModel(dAtA, i, uint64(len(m.End)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Start) > 0 {
		i -= len(m.Start)
		copy(dAtA[i:], m.Start)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Start)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TextMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TextMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TextMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Lists) > 0 {
		dAtA17 := make([]byte, len(m.Lists)*10)
		var j16 int
		for _, num1 := range m.Lists {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA17[j16] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j16++
			}
			dAtA17[j16] = uint8(num)
			j16++
		}
		i -= j16
		copy(dAtA[i:], dAtA17[:j16])
		i = encodeVarintModel(dAtA, i, uint64(j16))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Recipients) > 0 {
		for iNdEx := len(m.Recipients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Recipients[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x2a
	}
	n18, err18 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp):])
	if err18 != nil {
		return 0, err18
	}
	i -= n18
	i = encodeVarintModel(dAtA, i, uint64(n18))
	i--
	dAtA[i] = 0x22
	if m.Sender != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Sender))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TextRecipient) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TextRecipient) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TextRecipient) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Responses) > 0 {
		for iNdEx := len(m.Responses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Responses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	n19, err19 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp):])
	if err19 != nil {
		return 0, err19
	}
	i -= n19
	i = encodeVarintModel(dAtA, i, uint64(n19))
	i--
	dAtA[i] = 0x22
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Number) > 0 {
		i -= len(m.Number)
		copy(dAtA[i:], m.Number)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Number)))
		i--
		dAtA[i] = 0x12
	}
	if m.Recipient != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Recipient))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TextResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TextResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TextResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n20, err20 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp):])
	if err20 != nil {
		return 0, err20
	}
	i -= n20
	i = encodeVarintModel(dAtA, i, uint64(n20))
	i--
	dAtA[i] = 0x12
	if len(m.Response) > 0 {
		i -= len(m.Response)
		copy(dAtA[i:], m.Response)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Response)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Venue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Venue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Venue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.URL) > 0 {
		i -= len(m.URL)
		copy(dAtA[i:], m.URL)
		i = encodeVarintModel(dAtA, i, uint64(len(m.URL)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.City) > 0 {
		i -= len(m.City)
		copy(dAtA[i:], m.City)
		i = encodeVarintModel(dAtA, i, uint64(len(m.City)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Venues) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Venues) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Venues) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Venues) > 0 {
		for iNdEx := len(m.Venues) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Venues[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintModel(dAtA []byte, offset int, v uint64) int {
	offset -= sovModel(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Address) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.SameAsHome {
		n += 2
	}
	if m.Latitude != 0 {
		n += 9
	}
	if m.Longitude != 0 {
		n += 9
	}
	if m.FireDistrict != 0 {
		n += 1 + sovModel(uint64(m.FireDistrict))
	}
	return n
}

func (m *BackgroundCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Date)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovModel(uint64(m.Type))
	}
	if m.Assumed {
		n += 2
	}
	return n
}

func (m *EmContact) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.HomePhone)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.CellPhone)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Relationship)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	return n
}

func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovModel(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Date)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Start)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.End)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Venue != 0 {
		n += 1 + sovModel(uint64(m.Venue))
	}
	l = len(m.Details)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovModel(uint64(m.Type))
	}
	if m.RenewsDSW {
		n += 2
	}
	if m.CoveredByDSW {
		n += 2
	}
	if m.Org != 0 {
		n += 1 + sovModel(uint64(m.Org))
	}
	if len(m.Roles) > 0 {
		l = 0
		for _, e := range m.Roles {
			l += sovModel(uint64(e))
		}
		n += 2 + sovModel(uint64(l)) + l
	}
	if len(m.Shifts) > 0 {
		for _, e := range m.Shifts {
			l = e.Size()
			n += 2 + l + sovModel(uint64(l))
		}
	}
	l = len(m.SignupText)
	if l > 0 {
		n += 2 + l + sovModel(uint64(l))
	}
	return n
}

func (m *List) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovModel(uint64(m.ID))
	}
	if m.Type != 0 {
		n += 1 + sovModel(uint64(m.Type))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if len(m.People) > 0 {
		for k, v := range m.People {
			_ = k
			_ = v
			mapEntrySize := 1 + sovModel(uint64(k)) + 1 + sovModel(uint64(v))
			n += mapEntrySize + 1 + sovModel(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Lists) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Lists) > 0 {
		for _, e := range m.Lists {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	return n
}

func (m *OrgMembership) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrivLevel != 0 {
		n += 1 + sovModel(uint64(m.PrivLevel))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	return n
}

func (m *Person) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovModel(uint64(m.ID))
	}
	l = len(m.FormalName)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.SortName)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.CallSign)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.BadLoginCount != 0 {
		n += 1 + sovModel(uint64(m.BadLoginCount))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.BadLoginTime)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.PWResetToken)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.PWResetTime)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.InformalName)
	if l > 0 {
		n += 2 + l + sovModel(uint64(l))
	}
	l = m.HomeAddress.Size()
	n += 2 + l + sovModel(uint64(l))
	l = m.WorkAddress.Size()
	n += 2 + l + sovModel(uint64(l))
	l = m.MailAddress.Size()
	n += 2 + l + sovModel(uint64(l))
	l = len(m.CellPhone)
	if l > 0 {
		n += 2 + l + sovModel(uint64(l))
	}
	l = len(m.HomePhone)
	if l > 0 {
		n += 2 + l + sovModel(uint64(l))
	}
	l = len(m.WorkPhone)
	if l > 0 {
		n += 2 + l + sovModel(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 2 + l + sovModel(uint64(l))
	}
	l = len(m.Email2)
	if l > 0 {
		n += 2 + l + sovModel(uint64(l))
	}
	if len(m.Notes) > 0 {
		for _, e := range m.Notes {
			l = e.Size()
			n += 2 + l + sovModel(uint64(l))
		}
	}
	if m.NoEmail {
		n += 3
	}
	if m.NoText {
		n += 3
	}
	l = len(m.UnsubscribeToken)
	if l > 0 {
		n += 2 + l + sovModel(uint64(l))
	}
	if m.VolgisticsID != 0 {
		n += 2 + sovModel(uint64(m.VolgisticsID))
	}
	l = len(m.HoursToken)
	if l > 0 {
		n += 2 + l + sovModel(uint64(l))
	}
	if m.HoursReminder {
		n += 3
	}
	if len(m.DSWRegistrations) > 0 {
		for k, v := range m.DSWRegistrations {
			_ = k
			_ = v
			l = github_com_gogo_protobuf_types.SizeOfStdTime(v)
			mapEntrySize := 1 + sovModel(uint64(k)) + 1 + l + sovModel(uint64(l))
			n += mapEntrySize + 2 + sovModel(uint64(mapEntrySize))
		}
	}
	if len(m.DSWUntil) > 0 {
		for k, v := range m.DSWUntil {
			_ = k
			_ = v
			l = github_com_gogo_protobuf_types.SizeOfStdTime(v)
			mapEntrySize := 1 + sovModel(uint64(k)) + 1 + l + sovModel(uint64(l))
			n += mapEntrySize + 2 + sovModel(uint64(mapEntrySize))
		}
	}
	if m.Identification != 0 {
		n += 2 + sovModel(uint64(m.Identification))
	}
	if len(m.Roles) > 0 {
		for k, v := range m.Roles {
			_ = k
			_ = v
			mapEntrySize := 1 + sovModel(uint64(k)) + 1 + 1
			n += mapEntrySize + 2 + sovModel(uint64(mapEntrySize))
		}
	}
	if len(m.Orgs) > 0 {
		for _, e := range m.Orgs {
			l = e.Size()
			n += 2 + l + sovModel(uint64(l))
		}
	}
	if len(m.BGChecks) > 0 {
		for _, e := range m.BGChecks {
			l = e.Size()
			n += 2 + l + sovModel(uint64(l))
		}
	}
	if len(m.EmContacts) > 0 {
		for _, e := range m.EmContacts {
			l = e.Size()
			n += 2 + l + sovModel(uint64(l))
		}
	}
	return n
}

func (m *PersonNote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Note)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Date)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Visibility != 0 {
		n += 1 + sovModel(uint64(m.Visibility))
	}
	return n
}

func (m *Role) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovModel(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Org != 0 {
		n += 1 + sovModel(uint64(m.Org))
	}
	if m.PrivLevel != 0 {
		n += 1 + sovModel(uint64(m.PrivLevel))
	}
	if m.ShowRoster {
		n += 2
	}
	if m.ImplicitOnly {
		n += 2
	}
	if m.Priority != 0 {
		n += 1 + sovModel(uint64(m.Priority))
	}
	if len(m.Implies) > 0 {
		for k, v := range m.Implies {
			_ = k
			_ = v
			mapEntrySize := 1 + sovModel(uint64(k)) + 1 + 1
			n += mapEntrySize + 1 + sovModel(uint64(mapEntrySize))
		}
	}
	if len(m.Lists) > 0 {
		for k, v := range m.Lists {
			_ = k
			_ = v
			mapEntrySize := 1 + sovModel(uint64(k)) + 1 + sovModel(uint64(v))
			n += mapEntrySize + 1 + sovModel(uint64(mapEntrySize))
		}
	}
	if len(m.People) > 0 {
		l = 0
		for _, e := range m.People {
			l += sovModel(uint64(e))
		}
		n += 1 + sovModel(uint64(l)) + l
	}
	return n
}

func (m *Roles) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Roles) > 0 {
		for _, e := range m.Roles {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	return n
}

func (m *Shift) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Start)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.End)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Task)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Min != 0 {
		n += 1 + sovModel(uint64(m.Min))
	}
	if m.Max != 0 {
		n += 1 + sovModel(uint64(m.Max))
	}
	if len(m.SignedUp) > 0 {
		l = 0
		for _, e := range m.SignedUp {
			l += sovModel(uint64(e))
		}
		n += 1 + sovModel(uint64(l)) + l
	}
	if len(m.Declined) > 0 {
		l = 0
		for _, e := range m.Declined {
			l += sovModel(uint64(e))
		}
		n += 1 + sovModel(uint64(l)) + l
	}
	if m.Announce {
		n += 2
	}
	return n
}

func (m *TextMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovModel(uint64(m.ID))
	}
	if m.Sender != 0 {
		n += 1 + sovModel(uint64(m.Sender))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if len(m.Recipients) > 0 {
		for _, e := range m.Recipients {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	if len(m.Lists) > 0 {
		l = 0
		for _, e := range m.Lists {
			l += sovModel(uint64(e))
		}
		n += 1 + sovModel(uint64(l)) + l
	}
	return n
}

func (m *TextRecipient) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Recipient != 0 {
		n += 1 + sovModel(uint64(m.Recipient))
	}
	l = len(m.Number)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovModel(uint64(l))
	if len(m.Responses) > 0 {
		for _, e := range m.Responses {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	return n
}

func (m *TextResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Response)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovModel(uint64(l))
	return n
}

func (m *Venue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovModel(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	return n
}

func (m *Venues) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Venues) > 0 {
		for _, e := range m.Venues {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	return n
}

func sovModel(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozModel(x uint64) (n int) {
	return sovModel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Address) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Address{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`SameAsHome:` + fmt.Sprintf("%v", this.SameAsHome) + `,`,
		`Latitude:` + fmt.Sprintf("%v", this.Latitude) + `,`,
		`Longitude:` + fmt.Sprintf("%v", this.Longitude) + `,`,
		`FireDistrict:` + fmt.Sprintf("%v", this.FireDistrict) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BackgroundCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BackgroundCheck{`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Assumed:` + fmt.Sprintf("%v", this.Assumed) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EmContact) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EmContact{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`HomePhone:` + fmt.Sprintf("%v", this.HomePhone) + `,`,
		`CellPhone:` + fmt.Sprintf("%v", this.CellPhone) + `,`,
		`Relationship:` + fmt.Sprintf("%v", this.Relationship) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Event) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForShifts := "[]*Shift{"
	for _, f := range this.Shifts {
		repeatedStringForShifts += strings.Replace(f.String(), "Shift", "Shift", 1) + ","
	}
	repeatedStringForShifts += "}"
	s := strings.Join([]string{`&Event{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`Start:` + fmt.Sprintf("%v", this.Start) + `,`,
		`End:` + fmt.Sprintf("%v", this.End) + `,`,
		`Venue:` + fmt.Sprintf("%v", this.Venue) + `,`,
		`Details:` + fmt.Sprintf("%v", this.Details) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`RenewsDSW:` + fmt.Sprintf("%v", this.RenewsDSW) + `,`,
		`CoveredByDSW:` + fmt.Sprintf("%v", this.CoveredByDSW) + `,`,
		`Org:` + fmt.Sprintf("%v", this.Org) + `,`,
		`Roles:` + fmt.Sprintf("%v", this.Roles) + `,`,
		`Shifts:` + repeatedStringForShifts + `,`,
		`SignupText:` + fmt.Sprintf("%v", this.SignupText) + `,`,
		`}`,
	}, "")
	return s
}
func (this *List) String() string {
	if this == nil {
		return "nil"
	}
	keysForPeople := make([]int64, 0, len(this.People))
	for k, _ := range this.People {
		keysForPeople = append(keysForPeople, int64(k))
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForPeople)
	mapStringForPeople := "map[PersonID]ListPersonStatus{"
	for _, k := range keysForPeople {
		mapStringForPeople += fmt.Sprintf("%v: %v,", k, this.People[PersonID(k)])
	}
	mapStringForPeople += "}"
	s := strings.Join([]string{`&List{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`People:` + mapStringForPeople + `,`,
		`}`,
	}, "")
	return s
}
func (this *Lists) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLists := "[]*List{"
	for _, f := range this.Lists {
		repeatedStringForLists += strings.Replace(f.String(), "List", "List", 1) + ","
	}
	repeatedStringForLists += "}"
	s := strings.Join([]string{`&Lists{`,
		`Lists:` + repeatedStringForLists + `,`,
		`}`,
	}, "")
	return s
}
func (this *OrgMembership) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OrgMembership{`,
		`PrivLevel:` + fmt.Sprintf("%v", this.PrivLevel) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Person) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNotes := "[]*PersonNote{"
	for _, f := range this.Notes {
		repeatedStringForNotes += strings.Replace(f.String(), "PersonNote", "PersonNote", 1) + ","
	}
	repeatedStringForNotes += "}"
	repeatedStringForOrgs := "[]OrgMembership{"
	for _, f := range this.Orgs {
		repeatedStringForOrgs += strings.Replace(strings.Replace(f.String(), "OrgMembership", "OrgMembership", 1), `&`, ``, 1) + ","
	}
	repeatedStringForOrgs += "}"
	repeatedStringForBGChecks := "[]*BackgroundCheck{"
	for _, f := range this.BGChecks {
		repeatedStringForBGChecks += strings.Replace(f.String(), "BackgroundCheck", "BackgroundCheck", 1) + ","
	}
	repeatedStringForBGChecks += "}"
	repeatedStringForEmContacts := "[]*EmContact{"
	for _, f := range this.EmContacts {
		repeatedStringForEmContacts += strings.Replace(f.String(), "EmContact", "EmContact", 1) + ","
	}
	repeatedStringForEmContacts += "}"
	keysForDSWRegistrations := make([]int32, 0, len(this.DSWRegistrations))
	for k, _ := range this.DSWRegistrations {
		keysForDSWRegistrations = append(keysForDSWRegistrations, int32(k))
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForDSWRegistrations)
	mapStringForDSWRegistrations := "map[DSWClass]time.Time{"
	for _, k := range keysForDSWRegistrations {
		mapStringForDSWRegistrations += fmt.Sprintf("%v: %v,", k, this.DSWRegistrations[DSWClass(k)])
	}
	mapStringForDSWRegistrations += "}"
	keysForDSWUntil := make([]int32, 0, len(this.DSWUntil))
	for k, _ := range this.DSWUntil {
		keysForDSWUntil = append(keysForDSWUntil, int32(k))
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForDSWUntil)
	mapStringForDSWUntil := "map[DSWClass]time.Time{"
	for _, k := range keysForDSWUntil {
		mapStringForDSWUntil += fmt.Sprintf("%v: %v,", k, this.DSWUntil[DSWClass(k)])
	}
	mapStringForDSWUntil += "}"
	keysForRoles := make([]int64, 0, len(this.Roles))
	for k, _ := range this.Roles {
		keysForRoles = append(keysForRoles, int64(k))
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForRoles)
	mapStringForRoles := "map[RoleID]bool{"
	for _, k := range keysForRoles {
		mapStringForRoles += fmt.Sprintf("%v: %v,", k, this.Roles[RoleID(k)])
	}
	mapStringForRoles += "}"
	s := strings.Join([]string{`&Person{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`FormalName:` + fmt.Sprintf("%v", this.FormalName) + `,`,
		`SortName:` + fmt.Sprintf("%v", this.SortName) + `,`,
		`CallSign:` + fmt.Sprintf("%v", this.CallSign) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`BadLoginCount:` + fmt.Sprintf("%v", this.BadLoginCount) + `,`,
		`BadLoginTime:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.BadLoginTime), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`PWResetToken:` + fmt.Sprintf("%v", this.PWResetToken) + `,`,
		`PWResetTime:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.PWResetTime), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`InformalName:` + fmt.Sprintf("%v", this.InformalName) + `,`,
		`HomeAddress:` + strings.Replace(strings.Replace(this.HomeAddress.String(), "Address", "Address", 1), `&`, ``, 1) + `,`,
		`WorkAddress:` + strings.Replace(strings.Replace(this.WorkAddress.String(), "Address", "Address", 1), `&`, ``, 1) + `,`,
		`MailAddress:` + strings.Replace(strings.Replace(this.MailAddress.String(), "Address", "Address", 1), `&`, ``, 1) + `,`,
		`CellPhone:` + fmt.Sprintf("%v", this.CellPhone) + `,`,
		`HomePhone:` + fmt.Sprintf("%v", this.HomePhone) + `,`,
		`WorkPhone:` + fmt.Sprintf("%v", this.WorkPhone) + `,`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`Email2:` + fmt.Sprintf("%v", this.Email2) + `,`,
		`Notes:` + repeatedStringForNotes + `,`,
		`NoEmail:` + fmt.Sprintf("%v", this.NoEmail) + `,`,
		`NoText:` + fmt.Sprintf("%v", this.NoText) + `,`,
		`UnsubscribeToken:` + fmt.Sprintf("%v", this.UnsubscribeToken) + `,`,
		`VolgisticsID:` + fmt.Sprintf("%v", this.VolgisticsID) + `,`,
		`HoursToken:` + fmt.Sprintf("%v", this.HoursToken) + `,`,
		`HoursReminder:` + fmt.Sprintf("%v", this.HoursReminder) + `,`,
		`DSWRegistrations:` + mapStringForDSWRegistrations + `,`,
		`DSWUntil:` + mapStringForDSWUntil + `,`,
		`Identification:` + fmt.Sprintf("%v", this.Identification) + `,`,
		`Roles:` + mapStringForRoles + `,`,
		`Orgs:` + repeatedStringForOrgs + `,`,
		`BGChecks:` + repeatedStringForBGChecks + `,`,
		`EmContacts:` + repeatedStringForEmContacts + `,`,
		`}`,
	}, "")
	return s
}
func (this *PersonNote) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PersonNote{`,
		`Note:` + fmt.Sprintf("%v", this.Note) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`Visibility:` + fmt.Sprintf("%v", this.Visibility) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Role) String() string {
	if this == nil {
		return "nil"
	}
	keysForImplies := make([]int64, 0, len(this.Implies))
	for k, _ := range this.Implies {
		keysForImplies = append(keysForImplies, int64(k))
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForImplies)
	mapStringForImplies := "map[RoleID]bool{"
	for _, k := range keysForImplies {
		mapStringForImplies += fmt.Sprintf("%v: %v,", k, this.Implies[RoleID(k)])
	}
	mapStringForImplies += "}"
	keysForLists := make([]int64, 0, len(this.Lists))
	for k, _ := range this.Lists {
		keysForLists = append(keysForLists, int64(k))
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForLists)
	mapStringForLists := "map[ListID]RoleToList{"
	for _, k := range keysForLists {
		mapStringForLists += fmt.Sprintf("%v: %v,", k, this.Lists[ListID(k)])
	}
	mapStringForLists += "}"
	s := strings.Join([]string{`&Role{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Org:` + fmt.Sprintf("%v", this.Org) + `,`,
		`PrivLevel:` + fmt.Sprintf("%v", this.PrivLevel) + `,`,
		`ShowRoster:` + fmt.Sprintf("%v", this.ShowRoster) + `,`,
		`ImplicitOnly:` + fmt.Sprintf("%v", this.ImplicitOnly) + `,`,
		`Priority:` + fmt.Sprintf("%v", this.Priority) + `,`,
		`Implies:` + mapStringForImplies + `,`,
		`Lists:` + mapStringForLists + `,`,
		`People:` + fmt.Sprintf("%v", this.People) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Roles) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRoles := "[]*Role{"
	for _, f := range this.Roles {
		repeatedStringForRoles += strings.Replace(f.String(), "Role", "Role", 1) + ","
	}
	repeatedStringForRoles += "}"
	s := strings.Join([]string{`&Roles{`,
		`Roles:` + repeatedStringForRoles + `,`,
		`}`,
	}, "")
	return s
}
func (this *Shift) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Shift{`,
		`Start:` + fmt.Sprintf("%v", this.Start) + `,`,
		`End:` + fmt.Sprintf("%v", this.End) + `,`,
		`Task:` + fmt.Sprintf("%v", this.Task) + `,`,
		`Min:` + fmt.Sprintf("%v", this.Min) + `,`,
		`Max:` + fmt.Sprintf("%v", this.Max) + `,`,
		`SignedUp:` + fmt.Sprintf("%v", this.SignedUp) + `,`,
		`Declined:` + fmt.Sprintf("%v", this.Declined) + `,`,
		`Announce:` + fmt.Sprintf("%v", this.Announce) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TextMessage) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRecipients := "[]*TextRecipient{"
	for _, f := range this.Recipients {
		repeatedStringForRecipients += strings.Replace(f.String(), "TextRecipient", "TextRecipient", 1) + ","
	}
	repeatedStringForRecipients += "}"
	s := strings.Join([]string{`&TextMessage{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Sender:` + fmt.Sprintf("%v", this.Sender) + `,`,
		`Timestamp:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Timestamp), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`Recipients:` + repeatedStringForRecipients + `,`,
		`Lists:` + fmt.Sprintf("%v", this.Lists) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TextRecipient) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForResponses := "[]*TextResponse{"
	for _, f := range this.Responses {
		repeatedStringForResponses += strings.Replace(f.String(), "TextResponse", "TextResponse", 1) + ","
	}
	repeatedStringForResponses += "}"
	s := strings.Join([]string{`&TextRecipient{`,
		`Recipient:` + fmt.Sprintf("%v", this.Recipient) + `,`,
		`Number:` + fmt.Sprintf("%v", this.Number) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Timestamp:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Timestamp), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`Responses:` + repeatedStringForResponses + `,`,
		`}`,
	}, "")
	return s
}
func (this *TextResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TextResponse{`,
		`Response:` + fmt.Sprintf("%v", this.Response) + `,`,
		`Timestamp:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Timestamp), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Venue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Venue{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`City:` + fmt.Sprintf("%v", this.City) + `,`,
		`URL:` + fmt.Sprintf("%v", this.URL) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Venues) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForVenues := "[]*Venue{"
	for _, f := range this.Venues {
		repeatedStringForVenues += strings.Replace(f.String(), "Venue", "Venue", 1) + ","
	}
	repeatedStringForVenues += "}"
	s := strings.Join([]string{`&Venues{`,
		`Venues:` + repeatedStringForVenues + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringModel(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Address) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Address: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Address: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SameAsHome", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SameAsHome = bool(v != 0)
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Latitude = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Longitude = float64(math.Float64frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FireDistrict", wireType)
			}
			m.FireDistrict = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FireDistrict |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackgroundCheck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackgroundCheck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackgroundCheck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Date = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= BGCheckType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assumed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Assumed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmContact) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmContact: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmContact: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomePhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomePhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CellPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relationship", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Relationship = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= EventID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Date = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Start = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.End = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Venue", wireType)
			}
			m.Venue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Venue |= VenueID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= EventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenewsDSW", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RenewsDSW = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoveredByDSW", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CoveredByDSW = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Org", wireType)
			}
			m.Org = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Org |= Org(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType == 0 {
				var v RoleID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= RoleID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Roles = append(m.Roles, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthModel
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthModel
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Roles) == 0 {
					m.Roles = make([]RoleID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v RoleID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= RoleID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Roles = append(m.Roles, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shifts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shifts = append(m.Shifts, &Shift{})
			if err := m.Shifts[len(m.Shifts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignupText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignupText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *List) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: List: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: List: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= ListID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ListType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field People", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.People == nil {
				m.People = make(map[PersonID]ListPersonStatus)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipModel(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthModel
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.People[PersonID(mapkey)] = ((ListPersonStatus)(mapvalue))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Lists) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Lists: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Lists: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lists", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lists = append(m.Lists, &List{})
			if err := m.Lists[len(m.Lists)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrgMembership) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrgMembership: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrgMembership: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivLevel", wireType)
			}
			m.PrivLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrivLevel |= PrivLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Person) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Person: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Person: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= PersonID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FormalName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FormalName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SortName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallSign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallSign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = append(m.Password[:0], dAtA[iNdEx:postIndex]...)
			if m.Password == nil {
				m.Password = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadLoginCount", wireType)
			}
			m.BadLoginCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BadLoginCount |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadLoginTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.BadLoginTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PWResetToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PWResetToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PWResetTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.PWResetTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InformalName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InformalName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HomeAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WorkAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MailAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CellPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomePhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomePhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notes = append(m.Notes, &PersonNote{})
			if err := m.Notes[len(m.Notes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoEmail", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoEmail = bool(v != 0)
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoText", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoText = bool(v != 0)
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnsubscribeToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnsubscribeToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolgisticsID", wireType)
			}
			m.VolgisticsID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VolgisticsID |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HoursToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HoursToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HoursReminder", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HoursReminder = bool(v != 0)
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DSWRegistrations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DSWRegistrations == nil {
				m.DSWRegistrations = make(map[DSWClass]time.Time)
			}
			var mapkey int32
			mapvalue := new(time.Time)
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthModel
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthModel
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(mapvalue, dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipModel(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthModel
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DSWRegistrations[DSWClass(mapkey)] = *mapvalue
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DSWUntil", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DSWUntil == nil {
				m.DSWUntil = make(map[DSWClass]time.Time)
			}
			var mapkey int32
			mapvalue := new(time.Time)
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthModel
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthModel
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(mapvalue, dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipModel(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthModel
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DSWUntil[DSWClass(mapkey)] = *mapvalue
			iNdEx = postIndex
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identification", wireType)
			}
			m.Identification = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Identification |= IdentType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Roles == nil {
				m.Roles = make(map[RoleID]bool)
			}
			var mapkey int64
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipModel(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthModel
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Roles[RoleID(mapkey)] = mapvalue
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orgs = append(m.Orgs, OrgMembership{})
			if err := m.Orgs[len(m.Orgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BGChecks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BGChecks = append(m.BGChecks, &BackgroundCheck{})
			if err := m.BGChecks[len(m.BGChecks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmContacts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmContacts = append(m.EmContacts, &EmContact{})
			if err := m.EmContacts[len(m.EmContacts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PersonNote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PersonNote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PersonNote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Note = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Date = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Visibility", wireType)
			}
			m.Visibility = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Visibility |= NoteVisibility(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Role) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Role: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Role: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= RoleID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Org", wireType)
			}
			m.Org = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Org |= Org(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivLevel", wireType)
			}
			m.PrivLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrivLevel |= PrivLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowRoster", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowRoster = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImplicitOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ImplicitOnly = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Implies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Implies == nil {
				m.Implies = make(map[RoleID]bool)
			}
			var mapkey int64
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipModel(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthModel
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Implies[RoleID(mapkey)] = mapvalue
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lists", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Lists == nil {
				m.Lists = make(map[ListID]RoleToList)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipModel(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthModel
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Lists[ListID(mapkey)] = ((RoleToList)(mapvalue))
			iNdEx = postIndex
		case 11:
			if wireType == 0 {
				var v PersonID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= PersonID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.People = append(m.People, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthModel
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthModel
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.People) == 0 {
					m.People = make([]PersonID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v PersonID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= PersonID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.People = append(m.People, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field People", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Roles) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Roles: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Roles: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roles = append(m.Roles, &Role{})
			if err := m.Roles[len(m.Roles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Shift) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Shift: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Shift: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Start = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.End = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Task = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			m.Min = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Min |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			m.Max = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Max |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType == 0 {
				var v PersonID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= PersonID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SignedUp = append(m.SignedUp, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthModel
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthModel
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SignedUp) == 0 {
					m.SignedUp = make([]PersonID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v PersonID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= PersonID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SignedUp = append(m.SignedUp, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedUp", wireType)
			}
		case 7:
			if wireType == 0 {
				var v PersonID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= PersonID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Declined = append(m.Declined, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthModel
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthModel
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Declined) == 0 {
					m.Declined = make([]PersonID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v PersonID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= PersonID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Declined = append(m.Declined, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Declined", wireType)
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Announce", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Announce = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TextMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TextMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TextMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= TextMessageID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			m.Sender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sender |= PersonID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipients = append(m.Recipients, &TextRecipient{})
			if err := m.Recipients[len(m.Recipients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType == 0 {
				var v ListID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= ListID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Lists = append(m.Lists, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthModel
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthModel
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Lists) == 0 {
					m.Lists = make([]ListID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v ListID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= ListID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Lists = append(m.Lists, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Lists", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TextRecipient) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TextRecipient: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TextRecipient: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			m.Recipient = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Recipient |= PersonID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Number = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Responses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Responses = append(m.Responses, &TextResponse{})
			if err := m.Responses[len(m.Responses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TextResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TextResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TextResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Venue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Venue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Venue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= VenueID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Venues) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Venues: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Venues: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Venues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Venues = append(m.Venues, &Venue{})
			if err := m.Venues[len(m.Venues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthModel
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupModel
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthModel
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthModel        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModel          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupModel = fmt.Errorf("proto: unexpected end of group")
)
