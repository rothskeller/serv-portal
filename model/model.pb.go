// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: model.proto

package model

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Address struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	SameAsHome           bool     `protobuf:"varint,2,opt,name=same_as_home,json=sameAsHome,proto3" json:"sameAsHome"`
	Latitude             float64  `protobuf:"fixed64,3,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude            float64  `protobuf:"fixed64,4,opt,name=longitude,proto3" json:"longitude,omitempty"`
	FireDistrict         int      `protobuf:"varint,5,opt,name=fire_district,json=fireDistrict,proto3,casttype=int" json:"fireDistrict"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Address) Reset()      { *m = Address{} }
func (*Address) ProtoMessage() {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{0}
}
func (m *Address) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Address.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(m, src)
}
func (m *Address) XXX_Size() int {
	return m.Size()
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

type Document struct {
	ID                   DocumentID `protobuf:"varint,1,opt,name=id,proto3,casttype=DocumentID" json:"id,omitempty"`
	Name                 string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PostedBy             PersonID   `protobuf:"varint,3,opt,name=posted_by,json=postedBy,proto3,casttype=PersonID" json:"posted_by,omitempty"`
	PostedAt             time.Time  `protobuf:"bytes,4,opt,name=posted_at,json=postedAt,proto3,stdtime" json:"posted_at"`
	NeedsApproval        bool       `protobuf:"varint,5,opt,name=needs_approval,json=needsApproval,proto3" json:"needs_approval,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Document) Reset()      { *m = Document{} }
func (*Document) ProtoMessage() {}
func (*Document) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{1}
}
func (m *Document) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Document) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Document.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Document) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Document.Merge(m, src)
}
func (m *Document) XXX_Size() int {
	return m.Size()
}
func (m *Document) XXX_DiscardUnknown() {
	xxx_messageInfo_Document.DiscardUnknown(m)
}

var xxx_messageInfo_Document proto.InternalMessageInfo

type DSWForm struct {
	From                 time.Time `protobuf:"bytes,1,opt,name=from,proto3,stdtime" json:"from"`
	To                   time.Time `protobuf:"bytes,2,opt,name=to,proto3,stdtime" json:"to"`
	For                  string    `protobuf:"bytes,3,opt,name=for,proto3" json:"for,omitempty"`
	Invalid              string    `protobuf:"bytes,4,opt,name=invalid,proto3" json:"invalid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *DSWForm) Reset()      { *m = DSWForm{} }
func (*DSWForm) ProtoMessage() {}
func (*DSWForm) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{2}
}
func (m *DSWForm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DSWForm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DSWForm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DSWForm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DSWForm.Merge(m, src)
}
func (m *DSWForm) XXX_Size() int {
	return m.Size()
}
func (m *DSWForm) XXX_DiscardUnknown() {
	xxx_messageInfo_DSWForm.DiscardUnknown(m)
}

var xxx_messageInfo_DSWForm proto.InternalMessageInfo

type EmailMessage struct {
	ID                   EmailMessageID   `protobuf:"varint,1,opt,name=id,proto3,casttype=EmailMessageID" json:"id,omitempty"`
	MessageID            string           `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"messageID"`
	Timestamp            time.Time        `protobuf:"bytes,3,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
	Type                 EmailMessageType `protobuf:"varint,4,opt,name=type,proto3,casttype=EmailMessageType" json:"type,omitempty"`
	Attention            bool             `protobuf:"varint,5,opt,name=attention,proto3" json:"attention,omitempty"`
	Groups               []GroupID        `protobuf:"varint,6,rep,packed,name=groups,proto3,casttype=GroupID" json:"groups,omitempty"`
	From                 string           `protobuf:"bytes,7,opt,name=from,proto3" json:"from,omitempty"`
	Subject              string           `protobuf:"bytes,8,opt,name=subject,proto3" json:"subject,omitempty"`
	Error                string           `protobuf:"bytes,9,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *EmailMessage) Reset()      { *m = EmailMessage{} }
func (*EmailMessage) ProtoMessage() {}
func (*EmailMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{3}
}
func (m *EmailMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmailMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EmailMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EmailMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmailMessage.Merge(m, src)
}
func (m *EmailMessage) XXX_Size() int {
	return m.Size()
}
func (m *EmailMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_EmailMessage.DiscardUnknown(m)
}

var xxx_messageInfo_EmailMessage proto.InternalMessageInfo

type Event struct {
	ID           EventID      `protobuf:"varint,1,opt,name=id,proto3,casttype=EventID" json:"id,omitempty"`
	Name         string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Date         string       `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
	Start        string       `protobuf:"bytes,4,opt,name=start,proto3" json:"start,omitempty"`
	End          string       `protobuf:"bytes,5,opt,name=end,proto3" json:"end,omitempty"`
	Venue        VenueID      `protobuf:"varint,6,opt,name=venue,proto3,casttype=VenueID" json:"venue,omitempty"`
	Details      string       `protobuf:"bytes,7,opt,name=details,proto3" json:"details,omitempty"`
	Type         EventType    `protobuf:"varint,8,opt,name=type,proto3,casttype=EventType" json:"type,omitempty"`
	Groups       []GroupID    `protobuf:"varint,9,rep,packed,name=groups,proto3,casttype=GroupID" json:"groups,omitempty"`
	Organization Organization `protobuf:"varint,11,opt,name=organization,proto3,casttype=Organization" json:"organization,omitempty"`
	Private      bool         `protobuf:"varint,12,opt,name=private,proto3" json:"private,omitempty"`
	// RenewsDSW, if true, indicates that a person whose DSW registration is valid
	// at the time of the event, and who is marked as attending the event, gets
	// their DSW registration automatically renewed.
	RenewsDSW bool `protobuf:"varint,13,opt,name=renewsDSW,proto3" json:"renewsDSW,omitempty"`
	// CoveredByDSW, if true, indicates that injuries at the event are covered by
	// DSW for attendees with current DSW registration.  For training events, it
	// essentially indicates that the event has been pre-approved by the ADC.
	CoveredByDSW         bool     `protobuf:"varint,14,opt,name=coveredByDSW,proto3" json:"coveredByDSW,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Event) Reset()      { *m = Event{} }
func (*Event) ProtoMessage() {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{4}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

type Folder struct {
	ID                   FolderID    `protobuf:"varint,1,opt,name=id,proto3,casttype=FolderID" json:"id,omitempty"`
	Parent               FolderID    `protobuf:"varint,2,opt,name=parent,proto3,casttype=FolderID" json:"parent,omitempty"`
	Name                 string      `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Group                GroupID     `protobuf:"varint,4,opt,name=group,proto3,casttype=GroupID" json:"group,omitempty"`
	Documents            []*Document `protobuf:"bytes,5,rep,name=documents,proto3" json:"documents,omitempty"`
	Approvals            int         `protobuf:"varint,6,opt,name=approvals,proto3,casttype=int" json:"approvals,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Folder) Reset()      { *m = Folder{} }
func (*Folder) ProtoMessage() {}
func (*Folder) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{5}
}
func (m *Folder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Folder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Folder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Folder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Folder.Merge(m, src)
}
func (m *Folder) XXX_Size() int {
	return m.Size()
}
func (m *Folder) XXX_DiscardUnknown() {
	xxx_messageInfo_Folder.DiscardUnknown(m)
}

var xxx_messageInfo_Folder proto.InternalMessageInfo

type Group struct {
	ID      GroupID    `protobuf:"varint,1,opt,name=id,proto3,casttype=GroupID" json:"id,omitempty"`
	Tag     GroupTag   `protobuf:"bytes,2,opt,name=tag,proto3,casttype=GroupTag" json:"tag,omitempty"`
	Name    string     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Email   string     `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	NoEmail []PersonID `protobuf:"varint,6,rep,packed,name=no_email,json=noEmail,proto3,casttype=PersonID" json:"no_email,omitempty"`
	NoText  []PersonID `protobuf:"varint,7,rep,packed,name=no_text,json=noText,proto3,casttype=PersonID" json:"no_text,omitempty"`
	DSWType DSWType    `protobuf:"varint,8,opt,name=dsw_type,json=dswType,proto3,casttype=DSWType" json:"dswType,omitempty"`
	// Organization is the organization with which this group is affiliated.
	// Members of this group will be asked for any additional hours they may have
	// for this organization.
	Organization Organization `protobuf:"varint,9,opt,name=organization,proto3,casttype=Organization" json:"organization,omitempty"`
	// GetHours, when true, indicates that members of this group should receive
	// monthly email reminders to record their volunteer hours.
	GetHours bool `protobuf:"varint,10,opt,name=get_hours,json=getHours,proto3" json:"get_hours,omitempty"`
	// DSWClass indicates which classification of DSW registration is required for
	// members of this group.
	DSWClass             DSWClass `protobuf:"varint,11,opt,name=dsw_class,json=dswClass,proto3,casttype=DSWClass" json:"dswClass,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Group) Reset()      { *m = Group{} }
func (*Group) ProtoMessage() {}
func (*Group) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{6}
}
func (m *Group) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Group) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Group.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Group) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Group.Merge(m, src)
}
func (m *Group) XXX_Size() int {
	return m.Size()
}
func (m *Group) XXX_DiscardUnknown() {
	xxx_messageInfo_Group.DiscardUnknown(m)
}

var xxx_messageInfo_Group proto.InternalMessageInfo

type Person struct {
	ID               PersonID      `protobuf:"varint,1,opt,name=id,proto3,casttype=PersonID" json:"id,omitempty"`
	Username         string        `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	InformalName     string        `protobuf:"bytes,17,opt,name=informal_name,json=informalName,proto3" json:"informalName"`
	FormalName       string        `protobuf:"bytes,3,opt,name=formal_name,json=formalName,proto3" json:"formalName"`
	SortName         string        `protobuf:"bytes,4,opt,name=sort_name,json=sortName,proto3" json:"sortName"`
	CallSign         string        `protobuf:"bytes,6,opt,name=call_sign,json=callSign,proto3" json:"callSign,omitempty"`
	Email            string        `protobuf:"bytes,25,opt,name=email,proto3" json:"email,omitempty"`
	Email2           string        `protobuf:"bytes,26,opt,name=email2,proto3" json:"email2,omitempty"`
	HomeAddress      Address       `protobuf:"bytes,18,opt,name=home_address,json=homeAddress,proto3" json:"homeAddress"`
	WorkAddress      Address       `protobuf:"bytes,19,opt,name=work_address,json=workAddress,proto3" json:"workAddress"`
	MailAddress      Address       `protobuf:"bytes,20,opt,name=mail_address,json=mailAddress,proto3" json:"mailAddress"`
	CellPhone        string        `protobuf:"bytes,21,opt,name=cell_phone,json=cellPhone,proto3" json:"cellPhone"`
	HomePhone        string        `protobuf:"bytes,22,opt,name=home_phone,json=homePhone,proto3" json:"homePhone"`
	WorkPhone        string        `protobuf:"bytes,23,opt,name=work_phone,json=workPhone,proto3" json:"workPhone"`
	Password         []byte        `protobuf:"bytes,7,opt,name=password,proto3" json:"password,omitempty"`
	BadLoginCount    int           `protobuf:"varint,8,opt,name=bad_login_count,json=badLoginCount,proto3,casttype=int" json:"badLoginCount,omitempty"`
	BadLoginTime     time.Time     `protobuf:"bytes,9,opt,name=bad_login_time,json=badLoginTime,proto3,stdtime" json:"badLoginTime"`
	PWResetToken     string        `protobuf:"bytes,10,opt,name=pwreset_token,json=pwresetToken,proto3" json:"pwresetToken,omitempty"`
	PWResetTime      time.Time     `protobuf:"bytes,11,opt,name=pwreset_time,json=pwresetTime,proto3,stdtime" json:"pwresetTime"`
	Notes            []*PersonNote `protobuf:"bytes,27,rep,name=notes,proto3" json:"notes,omitempty"`
	NoEmail          bool          `protobuf:"varint,28,opt,name=no_email,json=noEmail,proto3" json:"no_email,omitempty"`
	NoText           bool          `protobuf:"varint,29,opt,name=no_text,json=noText,proto3" json:"no_text,omitempty"`
	UnsubscribeToken string        `protobuf:"bytes,30,opt,name=unsubscribe_token,json=unsubscribeToken,proto3" json:"unsubscribe_token,omitempty"`
	DSWForms         []*DSWForm    `protobuf:"bytes,31,rep,name=dsw_forms,json=dswForms,proto3" json:"dsw_forms,omitempty"`
	VolgisticsID     int           `protobuf:"varint,32,opt,name=volgistics_id,json=volgisticsId,proto3,casttype=int" json:"volgistics_id,omitempty"`
	BackgroundCheck  string        `protobuf:"bytes,33,opt,name=background_check,json=backgroundCheck,proto3" json:"background_check,omitempty"`
	HoursToken       string        `protobuf:"bytes,34,opt,name=hours_token,json=hoursToken,proto3" json:"hours_token,omitempty"`
	HoursReminder    bool          `protobuf:"varint,35,opt,name=hours_reminder,json=hoursReminder,proto3" json:"hours_reminder,omitempty"`
	// DSWRegistrations is a map from a DSWClass to the date on the person's most
	// recent valid DSW registration with that classification.  The registration
	// may or may not still be current.
	DSWRegistrations map[DSWClass]time.Time `protobuf:"bytes,36,rep,name=dsw_registrations,json=dswRegistrations,proto3,castkey=DSWClass,stdtime" json:"dsw_registrations" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// DSWUntil is a map from a DSWClass to the date on which the person's DSW
	// registration in that classification expired or will expire.  This is cached
	// derivable data, recalculated whenever attendance is recorded for this
	// person.
	DSWUntil             map[DSWClass]time.Time `protobuf:"bytes,37,rep,name=dsw_until,json=dswUntil,proto3,castkey=DSWClass,stdtime" json:"dsw_until" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Person) Reset()      { *m = Person{} }
func (*Person) ProtoMessage() {}
func (*Person) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{7}
}
func (m *Person) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Person) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Person.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Person) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Person.Merge(m, src)
}
func (m *Person) XXX_Size() int {
	return m.Size()
}
func (m *Person) XXX_DiscardUnknown() {
	xxx_messageInfo_Person.DiscardUnknown(m)
}

var xxx_messageInfo_Person proto.InternalMessageInfo

type PersonNote struct {
	Note                 string    `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
	Date                 string    `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
	Privilege            Privilege `protobuf:"varint,5,opt,name=privilege,proto3,casttype=Privilege" json:"privilege,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *PersonNote) Reset()      { *m = PersonNote{} }
func (*PersonNote) ProtoMessage() {}
func (*PersonNote) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{8}
}
func (m *PersonNote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PersonNote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PersonNote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PersonNote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersonNote.Merge(m, src)
}
func (m *PersonNote) XXX_Size() int {
	return m.Size()
}
func (m *PersonNote) XXX_DiscardUnknown() {
	xxx_messageInfo_PersonNote.DiscardUnknown(m)
}

var xxx_messageInfo_PersonNote proto.InternalMessageInfo

type Role struct {
	ID                   RoleID     `protobuf:"varint,1,opt,name=id,proto3,casttype=RoleID" json:"id,omitempty"`
	Tag                  RoleTag    `protobuf:"bytes,2,opt,name=tag,proto3,casttype=RoleTag" json:"tag,omitempty"`
	Name                 string     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Individual           bool       `protobuf:"varint,4,opt,name=individual,proto3" json:"individual,omitempty"`
	Detail               bool       `protobuf:"varint,5,opt,name=detail,proto3" json:"detail,omitempty"`
	Permissions          Permission `protobuf:"varint,6,opt,name=permissions,proto3,casttype=Permission" json:"permissions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Role) Reset()      { *m = Role{} }
func (*Role) ProtoMessage() {}
func (*Role) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{9}
}
func (m *Role) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Role) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Role.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Role) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Role.Merge(m, src)
}
func (m *Role) XXX_Size() int {
	return m.Size()
}
func (m *Role) XXX_DiscardUnknown() {
	xxx_messageInfo_Role.DiscardUnknown(m)
}

var xxx_messageInfo_Role proto.InternalMessageInfo

type TextMessage struct {
	ID                   TextMessageID    `protobuf:"varint,1,opt,name=id,proto3,casttype=TextMessageID" json:"id,omitempty"`
	Sender               PersonID         `protobuf:"varint,2,opt,name=sender,proto3,casttype=PersonID" json:"sender,omitempty"`
	Groups               []GroupID        `protobuf:"varint,3,rep,packed,name=groups,proto3,casttype=GroupID" json:"groups,omitempty"`
	Timestamp            time.Time        `protobuf:"bytes,4,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
	Message              string           `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	Recipients           []*TextRecipient `protobuf:"bytes,6,rep,name=recipients,proto3" json:"recipients,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TextMessage) Reset()      { *m = TextMessage{} }
func (*TextMessage) ProtoMessage() {}
func (*TextMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{10}
}
func (m *TextMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TextMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TextMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TextMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TextMessage.Merge(m, src)
}
func (m *TextMessage) XXX_Size() int {
	return m.Size()
}
func (m *TextMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TextMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TextMessage proto.InternalMessageInfo

type TextRecipient struct {
	Recipient            PersonID        `protobuf:"varint,1,opt,name=recipient,proto3,casttype=PersonID" json:"recipient,omitempty"`
	Number               string          `protobuf:"bytes,2,opt,name=number,proto3" json:"number,omitempty"`
	Status               string          `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Timestamp            time.Time       `protobuf:"bytes,4,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
	Responses            []*TextResponse `protobuf:"bytes,5,rep,name=responses,proto3" json:"responses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *TextRecipient) Reset()      { *m = TextRecipient{} }
func (*TextRecipient) ProtoMessage() {}
func (*TextRecipient) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{11}
}
func (m *TextRecipient) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TextRecipient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TextRecipient.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TextRecipient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TextRecipient.Merge(m, src)
}
func (m *TextRecipient) XXX_Size() int {
	return m.Size()
}
func (m *TextRecipient) XXX_DiscardUnknown() {
	xxx_messageInfo_TextRecipient.DiscardUnknown(m)
}

var xxx_messageInfo_TextRecipient proto.InternalMessageInfo

type TextResponse struct {
	Response             string    `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Timestamp            time.Time `protobuf:"bytes,2,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *TextResponse) Reset()      { *m = TextResponse{} }
func (*TextResponse) ProtoMessage() {}
func (*TextResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{12}
}
func (m *TextResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TextResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TextResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TextResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TextResponse.Merge(m, src)
}
func (m *TextResponse) XXX_Size() int {
	return m.Size()
}
func (m *TextResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TextResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TextResponse proto.InternalMessageInfo

type Venue struct {
	ID                   VenueID  `protobuf:"varint,1,opt,name=id,proto3,casttype=VenueID" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Address              string   `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	City                 string   `protobuf:"bytes,4,opt,name=city,proto3" json:"city,omitempty"`
	URL                  string   `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Venue) Reset()      { *m = Venue{} }
func (*Venue) ProtoMessage() {}
func (*Venue) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{13}
}
func (m *Venue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Venue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Venue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Venue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Venue.Merge(m, src)
}
func (m *Venue) XXX_Size() int {
	return m.Size()
}
func (m *Venue) XXX_DiscardUnknown() {
	xxx_messageInfo_Venue.DiscardUnknown(m)
}

var xxx_messageInfo_Venue proto.InternalMessageInfo

type Venues struct {
	Venues               []*Venue `protobuf:"bytes,1,rep,name=venues,proto3" json:"venues,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Venues) Reset()      { *m = Venues{} }
func (*Venues) ProtoMessage() {}
func (*Venues) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{14}
}
func (m *Venues) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Venues) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Venues.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Venues) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Venues.Merge(m, src)
}
func (m *Venues) XXX_Size() int {
	return m.Size()
}
func (m *Venues) XXX_DiscardUnknown() {
	xxx_messageInfo_Venues.DiscardUnknown(m)
}

var xxx_messageInfo_Venues proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Address)(nil), "model.Address")
	proto.RegisterType((*Document)(nil), "model.Document")
	proto.RegisterType((*DSWForm)(nil), "model.DSWForm")
	proto.RegisterType((*EmailMessage)(nil), "model.EmailMessage")
	proto.RegisterType((*Event)(nil), "model.Event")
	proto.RegisterType((*Folder)(nil), "model.Folder")
	proto.RegisterType((*Group)(nil), "model.Group")
	proto.RegisterType((*Person)(nil), "model.Person")
	proto.RegisterMapType((map[DSWClass]time.Time)(nil), "model.Person.DswRegistrationsEntry")
	proto.RegisterMapType((map[DSWClass]time.Time)(nil), "model.Person.DswUntilEntry")
	proto.RegisterType((*PersonNote)(nil), "model.PersonNote")
	proto.RegisterType((*Role)(nil), "model.Role")
	proto.RegisterType((*TextMessage)(nil), "model.TextMessage")
	proto.RegisterType((*TextRecipient)(nil), "model.TextRecipient")
	proto.RegisterType((*TextResponse)(nil), "model.TextResponse")
	proto.RegisterType((*Venue)(nil), "model.Venue")
	proto.RegisterType((*Venues)(nil), "model.Venues")
}

func init() { proto.RegisterFile("model.proto", fileDescriptor_4c16552f9fdb66d8) }

var fileDescriptor_4c16552f9fdb66d8 = []byte{
	// 2086 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0x4f, 0x93, 0x13, 0xc7,
	0x15, 0x47, 0xd2, 0xea, 0xcf, 0x3c, 0x49, 0xcb, 0xd2, 0x60, 0x76, 0x58, 0xf0, 0xce, 0x22, 0x20,
	0xac, 0x8d, 0xbd, 0x10, 0x4c, 0xaa, 0xec, 0x54, 0x2e, 0x08, 0x41, 0xbc, 0x89, 0x63, 0x53, 0x0d,
	0x36, 0x55, 0xbe, 0xa8, 0x46, 0x9a, 0x46, 0x4c, 0x18, 0x4d, 0xab, 0xa6, 0x5b, 0xbb, 0x5e, 0x9f,
	0x52, 0xb9, 0xe4, 0xea, 0x4b, 0xbe, 0x41, 0x72, 0xcb, 0x29, 0xdf, 0x21, 0x55, 0x5c, 0x52, 0x95,
	0x63, 0x72, 0x19, 0x62, 0xe5, 0x92, 0xda, 0x8f, 0xb0, 0x27, 0xd7, 0x7b, 0xdd, 0xf3, 0x47, 0x86,
	0x5d, 0x53, 0x2e, 0xdf, 0xfa, 0xbd, 0xdf, 0x9b, 0xee, 0xf7, 0xaf, 0x5f, 0xbf, 0x37, 0xd0, 0x9e,
	0xca, 0x40, 0x44, 0x3b, 0xb3, 0x44, 0x6a, 0xc9, 0xea, 0x44, 0x6c, 0xbc, 0x3f, 0x09, 0xf5, 0xb3,
	0xf9, 0x68, 0x67, 0x2c, 0xa7, 0x37, 0x27, 0x72, 0x22, 0x6f, 0x12, 0x3a, 0x9a, 0x3f, 0x25, 0x8a,
	0x08, 0x5a, 0x99, 0xaf, 0x36, 0xbc, 0x89, 0x94, 0x93, 0x48, 0x14, 0x52, 0x3a, 0x9c, 0x0a, 0xa5,
	0xfd, 0xe9, 0xcc, 0x08, 0xf4, 0xfe, 0x59, 0x81, 0xe6, 0xdd, 0x20, 0x48, 0x84, 0x52, 0xcc, 0x85,
	0xa6, 0x6f, 0x96, 0x6e, 0x65, 0xab, 0xb2, 0xed, 0xf0, 0x8c, 0x64, 0xb7, 0xa0, 0xa3, 0xfc, 0xa9,
	0x18, 0xfa, 0x6a, 0xf8, 0x4c, 0x4e, 0x85, 0x5b, 0xdd, 0xaa, 0x6c, 0xb7, 0xfa, 0xab, 0x87, 0xa9,
	0x07, 0xc8, 0xbf, 0xab, 0x3e, 0x96, 0x53, 0xc1, 0x4b, 0x6b, 0xb6, 0x01, 0xad, 0xc8, 0xd7, 0xa1,
	0x9e, 0x07, 0xc2, 0xad, 0x6d, 0x55, 0xb6, 0x2b, 0x3c, 0xa7, 0xd9, 0x25, 0x70, 0x22, 0x19, 0x4f,
	0x0c, 0xb8, 0x42, 0x60, 0xc1, 0x60, 0xbf, 0x82, 0xee, 0xd3, 0x30, 0x11, 0xc3, 0x20, 0x54, 0x3a,
	0x09, 0xc7, 0xda, 0xad, 0x6f, 0x55, 0xb6, 0xbb, 0xfd, 0xf5, 0xc3, 0xd4, 0xeb, 0x20, 0x30, 0xb0,
	0xfc, 0xa3, 0xd4, 0xab, 0x85, 0xb1, 0xe6, 0x4b, 0xcc, 0xde, 0x7f, 0x2a, 0xd0, 0x1a, 0xc8, 0xf1,
	0x7c, 0x2a, 0x62, 0xcd, 0xae, 0x42, 0x35, 0x0c, 0xc8, 0x96, 0x5a, 0xff, 0xdc, 0x22, 0xf5, 0xaa,
	0xbb, 0x83, 0xa3, 0xd4, 0x83, 0x0c, 0xdf, 0x1d, 0xf0, 0x6a, 0x18, 0x30, 0x06, 0x2b, 0xb1, 0x6f,
	0x8d, 0x72, 0x38, 0xad, 0xd9, 0x3b, 0xe0, 0xcc, 0xa4, 0xd2, 0x22, 0x18, 0x8e, 0x0e, 0x48, 0xff,
	0x5a, 0xbf, 0x73, 0x94, 0x7a, 0xad, 0x87, 0x22, 0x51, 0x32, 0xde, 0x1d, 0xf0, 0x96, 0x81, 0xfb,
	0x07, 0xec, 0x6e, 0x2e, 0xea, 0x6b, 0xb2, 0xa6, 0x7d, 0x7b, 0x63, 0xc7, 0xb8, 0x7d, 0x27, 0x73,
	0xfb, 0xce, 0xe3, 0xcc, 0xed, 0xfd, 0xd6, 0x8b, 0xd4, 0x3b, 0xf5, 0xcd, 0x4b, 0xaf, 0x92, 0x6d,
	0x71, 0x57, 0xb3, 0x6b, 0xb0, 0x1a, 0x0b, 0x11, 0xa8, 0xa1, 0x3f, 0x9b, 0x25, 0x72, 0xcf, 0x8f,
	0xc8, 0xe6, 0x16, 0xef, 0x12, 0xf7, 0xae, 0x65, 0xf6, 0xfe, 0x5a, 0x81, 0xe6, 0xe0, 0xd1, 0x93,
	0x07, 0x32, 0x99, 0xb2, 0x0f, 0x61, 0xe5, 0x69, 0x22, 0xa7, 0x64, 0xdc, 0x9b, 0x1e, 0x48, 0x5f,
	0xb0, 0x3b, 0x50, 0xd5, 0x92, 0x8c, 0x7d, 0xd3, 0xef, 0xaa, 0x5a, 0xb2, 0x35, 0xa8, 0x3d, 0x95,
	0x09, 0xb9, 0xc2, 0xe1, 0xb8, 0xc4, 0x6c, 0x09, 0xe3, 0x3d, 0x3f, 0x0a, 0x03, 0xb2, 0xda, 0xe1,
	0x19, 0xd9, 0xfb, 0x7f, 0x15, 0x3a, 0xf7, 0xa7, 0x7e, 0x18, 0xfd, 0x4e, 0x28, 0xe5, 0x4f, 0x04,
	0xdb, 0x2e, 0xc5, 0xc1, 0xcd, 0xe3, 0xb0, 0x5a, 0x96, 0xb1, 0xb1, 0xf8, 0x08, 0x60, 0x6a, 0x18,
	0xc3, 0x30, 0x30, 0x11, 0xe9, 0x6f, 0x2c, 0x52, 0xcf, 0xc9, 0xc5, 0x0e, 0x53, 0xcf, 0x99, 0xe6,
	0xdf, 0xe4, 0xcb, 0x80, 0xf5, 0xc1, 0xc9, 0x93, 0x9b, 0xf4, 0x7c, 0x53, 0xf3, 0x8a, 0xcf, 0xd8,
	0x36, 0xac, 0xe8, 0x83, 0x99, 0x49, 0xca, 0x7a, 0xff, 0xdc, 0x51, 0xea, 0xad, 0x95, 0x95, 0x7c,
	0x7c, 0x30, 0x13, 0x9c, 0x24, 0x30, 0x87, 0x7d, 0xad, 0x45, 0xac, 0x43, 0x19, 0xdb, 0x68, 0x15,
	0x0c, 0x76, 0x05, 0x1a, 0x93, 0x44, 0xce, 0x67, 0xca, 0x6d, 0x6c, 0xd5, 0xb6, 0x6b, 0xfd, 0xf6,
	0x51, 0xea, 0x35, 0x7f, 0x8d, 0x9c, 0xdd, 0x01, 0xb7, 0x10, 0xe6, 0x1d, 0x85, 0xb0, 0x69, 0xf2,
	0x8e, 0x82, 0xe3, 0x42, 0x53, 0xcd, 0x47, 0xbf, 0x17, 0x63, 0xed, 0xb6, 0x8c, 0x53, 0x2d, 0xc9,
	0xce, 0x41, 0x5d, 0x24, 0x89, 0x4c, 0x5c, 0x87, 0xf8, 0x86, 0xe8, 0xfd, 0xbd, 0x06, 0xf5, 0xfb,
	0x7b, 0x98, 0xeb, 0x97, 0x4b, 0x3e, 0x3e, 0x93, 0xfb, 0xb8, 0x49, 0xe0, 0x09, 0x89, 0xce, 0x60,
	0x25, 0xf0, 0xb5, 0xb0, 0x81, 0xa5, 0x35, 0x1e, 0xa5, 0xb4, 0x9f, 0x68, 0x1b, 0x57, 0x43, 0x60,
	0x06, 0x88, 0x38, 0x20, 0x5b, 0x1d, 0x8e, 0x4b, 0x76, 0x19, 0xea, 0x7b, 0x22, 0x9e, 0x0b, 0xb7,
	0x41, 0xa7, 0x92, 0x91, 0x5f, 0x20, 0x63, 0x77, 0xc0, 0x0d, 0x82, 0xf6, 0x04, 0x42, 0xfb, 0x61,
	0xa4, 0xac, 0x99, 0x19, 0xc9, 0x2e, 0x5b, 0x57, 0xb7, 0xc8, 0xd5, 0xdd, 0xa3, 0xd4, 0x73, 0x48,
	0xd7, 0x92, 0x8f, 0x0b, 0x2f, 0x3a, 0xc7, 0x7b, 0xf1, 0x0e, 0x74, 0x64, 0x32, 0xf1, 0xe3, 0xf0,
	0x6b, 0x9f, 0x62, 0xd1, 0xa6, 0xfd, 0xd6, 0x8e, 0x52, 0xaf, 0xf3, 0x59, 0x89, 0xcf, 0x97, 0xa4,
	0x50, 0xaf, 0x59, 0x12, 0xee, 0xa1, 0xe5, 0x1d, 0x0a, 0x5e, 0x46, 0xb2, 0x1b, 0xe0, 0x24, 0x22,
	0x16, 0xfb, 0x6a, 0xf0, 0xe8, 0x89, 0xdb, 0xa5, 0x3a, 0xd7, 0xc5, 0x04, 0xe4, 0x19, 0x93, 0x17,
	0x38, 0x1e, 0x3e, 0x96, 0x7b, 0x22, 0xc1, 0x42, 0x80, 0xf2, 0xab, 0x24, 0xbf, 0xb6, 0x48, 0xbd,
	0xce, 0xbd, 0x12, 0x9f, 0x2f, 0x49, 0xf5, 0x5e, 0x56, 0xa0, 0xf1, 0x40, 0x46, 0x81, 0x48, 0x58,
	0xaf, 0x14, 0x35, 0x96, 0x47, 0xad, 0x65, 0x50, 0x1b, 0xb6, 0xab, 0xd0, 0x98, 0xf9, 0x89, 0x88,
	0x35, 0x05, 0xce, 0x16, 0xa2, 0x5c, 0xc2, 0x62, 0x79, 0x70, 0x6b, 0xa5, 0xe0, 0x5e, 0x86, 0x3a,
	0x79, 0x89, 0x02, 0xf9, 0x3d, 0xff, 0x19, 0x84, 0xbd, 0x0f, 0x4e, 0x60, 0xcb, 0xa1, 0x72, 0xeb,
	0x5b, 0xb5, 0xed, 0xf6, 0xed, 0xd3, 0x3b, 0xe6, 0xdd, 0xc9, 0xca, 0x24, 0x2f, 0x24, 0xd8, 0x35,
	0x70, 0xb2, 0x1a, 0xa5, 0x6c, 0xd8, 0x9b, 0x59, 0x21, 0x2e, 0x90, 0xde, 0xdf, 0x6a, 0x50, 0xa7,
	0x83, 0x8e, 0x4b, 0xcb, 0x4c, 0x0b, 0xb4, 0x6f, 0x13, 0x6a, 0xda, 0x9f, 0xd8, 0xcb, 0x4e, 0xc6,
	0x11, 0xfa, 0xd8, 0x9f, 0x70, 0x04, 0x5e, 0x6b, 0x19, 0xde, 0x06, 0xbc, 0x98, 0x36, 0x1d, 0x0d,
	0xc1, 0xae, 0x43, 0x2b, 0x96, 0x43, 0x03, 0x98, 0x8b, 0xb7, 0x5c, 0xb4, 0x9b, 0xb1, 0xa4, 0xeb,
	0xcc, 0xae, 0x41, 0x33, 0x96, 0x43, 0x2d, 0xbe, 0xd2, 0x6e, 0xf3, 0x35, 0x72, 0x8d, 0x58, 0x3e,
	0x16, 0x5f, 0x69, 0xf6, 0x00, 0x5a, 0x81, 0xda, 0x1f, 0x96, 0xf2, 0xf4, 0xc6, 0x22, 0xf5, 0xb0,
	0x06, 0x63, 0x96, 0x1e, 0xa6, 0xde, 0x99, 0x40, 0xed, 0xe3, 0xf2, 0x3d, 0x39, 0x0d, 0xb5, 0x98,
	0xce, 0xf4, 0xc1, 0x51, 0x81, 0xf3, 0xa6, 0x45, 0x5f, 0xc9, 0x51, 0xe7, 0x8d, 0x72, 0xf4, 0x22,
	0x38, 0x13, 0xa1, 0x87, 0xcf, 0xe4, 0x3c, 0x51, 0x2e, 0x50, 0x96, 0xb6, 0x26, 0x42, 0x7f, 0x8c,
	0x34, 0xfb, 0x2d, 0x38, 0xa8, 0xda, 0x38, 0xf2, 0x95, 0xb2, 0x39, 0xbf, 0xb3, 0x48, 0xbd, 0xd6,
	0xe0, 0xd1, 0x93, 0x7b, 0xc8, 0x3b, 0x4c, 0x3d, 0x16, 0xa8, 0x7d, 0x5a, 0x2f, 0x69, 0x97, 0x4b,
	0xf0, 0x56, 0x86, 0xf7, 0xfe, 0xb2, 0x0a, 0x0d, 0x63, 0xfc, 0x71, 0x09, 0x99, 0xbb, 0x06, 0x03,
	0xb6, 0x01, 0xad, 0xb9, 0x12, 0x49, 0xa9, 0x96, 0xe4, 0x34, 0xfb, 0x05, 0x74, 0xc3, 0xf8, 0xa9,
	0x4c, 0xa6, 0x7e, 0x34, 0x24, 0x81, 0x33, 0x14, 0xd6, 0x35, 0x7c, 0xbd, 0x33, 0xe0, 0x53, 0x7f,
	0x2a, 0xf8, 0x12, 0xc5, 0x6e, 0x42, 0xbb, 0xfc, 0x11, 0x85, 0xda, 0xf4, 0x17, 0xa5, 0x4f, 0x4a,
	0x6b, 0x7c, 0xa0, 0x95, 0x4c, 0xb4, 0x11, 0x5f, 0x31, 0xa9, 0x73, 0x98, 0x7a, 0x2d, 0x64, 0x92,
	0x70, 0xbe, 0x62, 0x1f, 0x80, 0x33, 0xf6, 0xa3, 0x68, 0xa8, 0xc2, 0x49, 0x4c, 0x39, 0xeb, 0xf4,
	0xcf, 0xa3, 0x7b, 0x90, 0xf9, 0x28, 0x9c, 0xc4, 0x85, 0x7b, 0x78, 0x2b, 0xe3, 0x15, 0x09, 0x76,
	0xa1, 0x9c, 0x60, 0xe7, 0xa1, 0x41, 0x8b, 0xdb, 0xee, 0x06, 0xb1, 0x2d, 0xc5, 0x1e, 0x40, 0x07,
	0xfb, 0xa2, 0x61, 0xd6, 0x3e, 0x31, 0x7a, 0x7e, 0x56, 0xed, 0x45, 0xb2, 0xfd, 0x55, 0xff, 0x2c,
	0x3e, 0x39, 0x87, 0xa9, 0xd7, 0x46, 0x59, 0xcb, 0xe4, 0x65, 0x02, 0xf7, 0xd9, 0x97, 0xc9, 0xf3,
	0x7c, 0x9f, 0xb3, 0x27, 0xef, 0x83, 0xb2, 0xf9, 0x3e, 0x25, 0x02, 0xf7, 0x41, 0xc5, 0xf2, 0x7d,
	0xce, 0x9d, 0xbc, 0x0f, 0xca, 0xe6, 0xfb, 0x94, 0x08, 0xf6, 0x1e, 0xc0, 0x58, 0x44, 0xd1, 0x70,
	0xf6, 0x4c, 0xc6, 0xc2, 0x7d, 0x8b, 0x7c, 0xd7, 0xc5, 0x17, 0x18, 0xb9, 0x0f, 0x91, 0xc9, 0x8b,
	0x25, 0x4a, 0x93, 0x17, 0x8c, 0xf4, 0xf9, 0x42, 0x1a, 0xb9, 0x56, 0x3a, 0x5f, 0xa2, 0x34, 0xd9,
	0x6a, 0xa4, 0xd7, 0x0b, 0x69, 0xe4, 0x5a, 0xe9, 0x7c, 0x89, 0x39, 0x37, 0xf3, 0x95, 0xda, 0x97,
	0x49, 0x40, 0x2f, 0x49, 0x87, 0xe7, 0x34, 0xfb, 0x0d, 0x9c, 0x1e, 0xf9, 0xc1, 0x30, 0x92, 0x93,
	0x30, 0x1e, 0x8e, 0xe5, 0x3c, 0x36, 0x8f, 0x67, 0xad, 0xdf, 0x3b, 0x4c, 0xbd, 0xf5, 0x91, 0x1f,
	0x7c, 0x82, 0xc8, 0x3d, 0x04, 0x96, 0xae, 0x02, 0x55, 0xad, 0xee, 0x12, 0xce, 0xbe, 0x84, 0xd5,
	0x62, 0x2f, 0x6c, 0x0c, 0xe8, 0xb2, 0x9e, 0xdc, 0x4a, 0xb8, 0xd6, 0x8f, 0x9d, 0x6c, 0x2b, 0x84,
	0xa8, 0xb5, 0x58, 0xe2, 0xb0, 0xcf, 0xa0, 0x3b, 0xdb, 0x4f, 0x84, 0x12, 0x7a, 0xa8, 0xe5, 0x73,
	0x11, 0xd3, 0xa5, 0x76, 0xfa, 0xef, 0xe2, 0x73, 0xf1, 0xf0, 0x09, 0x47, 0xe0, 0x31, 0xf2, 0x0f,
	0x53, 0xef, 0xbc, 0x15, 0x24, 0xba, 0x94, 0xa0, 0x9d, 0x32, 0x9f, 0x09, 0xe8, 0xe4, 0x1b, 0xa2,
	0xaa, 0xed, 0x1f, 0x54, 0xf5, 0x67, 0xa8, 0xea, 0x22, 0xf5, 0xda, 0xd9, 0x79, 0xe1, 0x14, 0xeb,
	0x58, 0x3b, 0xdb, 0x36, 0x53, 0xbc, 0xcc, 0x60, 0xd7, 0xa1, 0x1e, 0x4b, 0x2d, 0x94, 0x7b, 0x91,
	0xde, 0x87, 0x33, 0x36, 0x8d, 0x4c, 0x4d, 0xf8, 0x54, 0x6a, 0xc1, 0x0d, 0xce, 0x2e, 0x94, 0xea,
	0xef, 0x25, 0xf3, 0xac, 0x66, 0x15, 0x77, 0xbd, 0xa8, 0xb8, 0x6f, 0x13, 0x92, 0xd5, 0xd8, 0x1b,
	0x70, 0x66, 0x1e, 0xab, 0xf9, 0x48, 0x8d, 0x93, 0x70, 0x24, 0xac, 0x63, 0x36, 0xe9, 0x76, 0xad,
	0x95, 0x00, 0x63, 0xf0, 0x47, 0xa6, 0xea, 0x61, 0x1d, 0x50, 0xae, 0x47, 0xda, 0x64, 0x49, 0x6d,
	0x1b, 0xe3, 0x7e, 0xc7, 0x56, 0x41, 0x24, 0x4c, 0x8d, 0xa3, 0x15, 0x8e, 0x15, 0x7b, 0x32, 0x9a,
	0x84, 0x4a, 0x87, 0x63, 0x85, 0xcd, 0xe5, 0x16, 0xa5, 0xc8, 0x3a, 0x3a, 0xff, 0x8b, 0x1c, 0xa0,
	0x6a, 0x67, 0xc6, 0x8a, 0x42, 0x7a, 0x37, 0x60, 0xef, 0xc0, 0xda, 0xc8, 0x1f, 0x3f, 0xc7, 0x37,
	0x33, 0x0e, 0x86, 0xe3, 0x67, 0x62, 0xfc, 0xdc, 0xbd, 0x4c, 0x4a, 0x9e, 0x2e, 0xf8, 0xf7, 0x90,
	0xcd, 0x3c, 0x68, 0x53, 0xc9, 0xb6, 0xa6, 0xf4, 0x48, 0x0a, 0x88, 0x65, 0x8c, 0xb8, 0x06, 0xab,
	0x46, 0x20, 0x11, 0xd3, 0x30, 0x0e, 0x44, 0xe2, 0x5e, 0x31, 0xdd, 0x3e, 0x71, 0xb9, 0x65, 0xb2,
	0xaf, 0x01, 0x5f, 0x97, 0x61, 0x22, 0x50, 0x8b, 0x84, 0x9e, 0x04, 0xe5, 0x5e, 0x25, 0x9b, 0xaf,
	0x2c, 0x45, 0x60, 0x67, 0xa0, 0xf6, 0x79, 0x59, 0xea, 0x7e, 0xac, 0x93, 0x83, 0xfe, 0xb6, 0x0d,
	0xf5, 0x1a, 0x36, 0x20, 0x65, 0xf8, 0x8f, 0x2f, 0x8b, 0x47, 0x80, 0x82, 0xbd, 0x16, 0x7c, 0x6f,
	0x03, 0xf6, 0xa5, 0xf1, 0xf3, 0x3c, 0xd6, 0x61, 0xe4, 0x5e, 0xa3, 0x33, 0x2f, 0xbe, 0x72, 0xe6,
	0xe7, 0x88, 0x9a, 0xb3, 0xb6, 0xec, 0x59, 0xb8, 0x2f, 0xb1, 0x5f, 0x39, 0x03, 0x03, 0x41, 0xc8,
	0xc6, 0x10, 0xde, 0x7a, 0xad, 0xc2, 0xd8, 0x60, 0x3e, 0x17, 0x07, 0xf4, 0xf6, 0xd4, 0x39, 0x2e,
	0xd9, 0x2d, 0xa8, 0xef, 0xf9, 0xd1, 0x5c, 0xfc, 0xf0, 0xb4, 0xc2, 0x8d, 0xe0, 0x2f, 0xab, 0x1f,
	0x56, 0x36, 0x9e, 0x40, 0x77, 0x49, 0xbb, 0x9f, 0x6a, 0xe3, 0x9e, 0x0f, 0x50, 0xe4, 0x3c, 0xb5,
	0x25, 0x52, 0x17, 0xdd, 0xb4, 0xe5, 0x51, 0x37, 0xbd, 0x52, 0xea, 0xa6, 0x6f, 0x80, 0x83, 0xbd,
	0x65, 0x18, 0x89, 0x89, 0xa0, 0x76, 0xa5, 0x66, 0xba, 0xdd, 0x87, 0x19, 0x93, 0x17, 0x78, 0xef,
	0x1f, 0x15, 0x58, 0xe1, 0x32, 0x12, 0x6c, 0xab, 0xf4, 0x0e, 0xaf, 0xe5, 0xef, 0x70, 0x03, 0x31,
	0xfb, 0x0a, 0xbf, 0x5d, 0x6e, 0x9b, 0xa8, 0xb5, 0x43, 0xf0, 0xc4, 0xae, 0x69, 0x13, 0x20, 0x8c,
	0x83, 0x70, 0x2f, 0x0c, 0xe6, 0x7e, 0x44, 0x4a, 0xb6, 0x78, 0x89, 0x83, 0xcf, 0x9b, 0x69, 0xcf,
	0xed, 0x44, 0x63, 0x29, 0x76, 0x0b, 0xda, 0x33, 0x91, 0x4c, 0x43, 0xa5, 0x28, 0x09, 0x1b, 0x34,
	0x90, 0xaf, 0xe2, 0x28, 0xfd, 0x30, 0x67, 0xf3, 0xb2, 0x48, 0xef, 0xcf, 0x55, 0x68, 0xe3, 0xf5,
	0xce, 0x26, 0xc0, 0xeb, 0x25, 0x73, 0xd6, 0x73, 0x73, 0xba, 0x25, 0x91, 0xa2, 0xd9, 0x55, 0x82,
	0x2e, 0x45, 0xf5, 0x35, 0x53, 0xb7, 0xc5, 0x4a, 0x93, 0x41, 0xed, 0xf8, 0xc9, 0x60, 0x69, 0x20,
	0x5c, 0xf9, 0x71, 0x03, 0xa1, 0x0b, 0x4d, 0x3b, 0x61, 0xda, 0x4e, 0x33, 0x23, 0xd9, 0x1d, 0x80,
	0x44, 0x8c, 0xc3, 0x59, 0x48, 0x9d, 0x73, 0x83, 0xee, 0xc8, 0x39, 0x7b, 0x47, 0xd0, 0x2c, 0x9e,
	0x81, 0xbc, 0x24, 0xd7, 0x5b, 0x54, 0xa0, 0xbb, 0x84, 0xb2, 0x77, 0x71, 0xde, 0xb0, 0x84, 0x75,
	0xd0, 0xb2, 0xcd, 0x05, 0x8c, 0xf1, 0x89, 0xe7, 0xd3, 0x91, 0x75, 0x8e, 0xc3, 0x2d, 0x85, 0x7c,
	0xa5, 0x7d, 0x3d, 0x57, 0x36, 0xda, 0x96, 0xfa, 0x49, 0x3c, 0xf0, 0x73, 0xd4, 0x4f, 0xcd, 0x64,
	0xac, 0x44, 0x36, 0x20, 0x9c, 0x5d, 0x32, 0xd3, 0x60, 0xbc, 0x90, 0xea, 0xc5, 0xd0, 0x29, 0x43,
	0xf8, 0x76, 0x67, 0xa0, 0xfd, 0xb1, 0x94, 0xd3, 0xcb, 0x2a, 0x56, 0x7f, 0x94, 0x8a, 0xbd, 0x3f,
	0x55, 0xa0, 0x4e, 0x73, 0xe7, 0x71, 0xd3, 0x46, 0x36, 0x94, 0x1e, 0x37, 0x04, 0x97, 0x7e, 0x7c,
	0xd5, 0x96, 0x7f, 0x7c, 0x31, 0x58, 0x19, 0x87, 0xfa, 0x20, 0xbb, 0xd0, 0xb8, 0x66, 0x17, 0xa0,
	0x36, 0x4f, 0xec, 0xe4, 0xd1, 0x6f, 0x2e, 0x52, 0xaf, 0xf6, 0x39, 0xff, 0x84, 0x23, 0xaf, 0xb7,
	0x03, 0x0d, 0x3a, 0x4b, 0x61, 0x1e, 0xd3, 0x04, 0xac, 0xdc, 0x0a, 0xf9, 0xac, 0x63, 0x7d, 0x46,
	0x30, 0xb7, 0x58, 0xff, 0xd2, 0x8b, 0x6f, 0x37, 0x4f, 0xfd, 0xfb, 0xdb, 0xcd, 0x53, 0x7f, 0x58,
	0x6c, 0x56, 0x5e, 0x2c, 0x36, 0x2b, 0xff, 0x5a, 0x6c, 0x56, 0xfe, 0xbb, 0xd8, 0xac, 0x7c, 0xf3,
	0xbf, 0xcd, 0x53, 0xa3, 0x06, 0x39, 0xe0, 0x83, 0xef, 0x02, 0x00, 0x00, 0xff, 0xff, 0x9b, 0xc9,
	0x68, 0x21, 0x08, 0x14, 0x00, 0x00,
}

func (m *Address) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Address) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Address) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FireDistrict != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.FireDistrict))
		i--
		dAtA[i] = 0x28
	}
	if m.Longitude != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Longitude))))
		i--
		dAtA[i] = 0x21
	}
	if m.Latitude != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Latitude))))
		i--
		dAtA[i] = 0x19
	}
	if m.SameAsHome {
		i--
		if m.SameAsHome {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Document) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Document) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Document) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NeedsApproval {
		i--
		if m.NeedsApproval {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.PostedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.PostedAt):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintModel(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x22
	if m.PostedBy != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.PostedBy))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DSWForm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DSWForm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DSWForm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Invalid) > 0 {
		i -= len(m.Invalid)
		copy(dAtA[i:], m.Invalid)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Invalid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.For) > 0 {
		i -= len(m.For)
		copy(dAtA[i:], m.For)
		i = encodeVarintModel(dAtA, i, uint64(len(m.For)))
		i--
		dAtA[i] = 0x1a
	}
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.To, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.To):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintModel(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x12
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.From, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.From):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintModel(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EmailMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmailMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EmailMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintModel(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Groups) > 0 {
		dAtA5 := make([]byte, len(m.Groups)*10)
		var j4 int
		for _, num1 := range m.Groups {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintModel(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x32
	}
	if m.Attention {
		i--
		if m.Attention {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Type != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	n6, err6 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintModel(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0x1a
	if len(m.MessageID) > 0 {
		i -= len(m.MessageID)
		copy(dAtA[i:], m.MessageID)
		i = encodeVarintModel(dAtA, i, uint64(len(m.MessageID)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CoveredByDSW {
		i--
		if m.CoveredByDSW {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.RenewsDSW {
		i--
		if m.RenewsDSW {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.Private {
		i--
		if m.Private {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.Organization != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Organization))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Groups) > 0 {
		dAtA8 := make([]byte, len(m.Groups)*10)
		var j7 int
		for _, num1 := range m.Groups {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintModel(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0x4a
	}
	if m.Type != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Details) > 0 {
		i -= len(m.Details)
		copy(dAtA[i:], m.Details)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Details)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Venue != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Venue))
		i--
		dAtA[i] = 0x30
	}
	if len(m.End) > 0 {
		i -= len(m.End)
		copy(dAtA[i:], m.End)
		i = encodeVarintModel(dAtA, i, uint64(len(m.End)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Start) > 0 {
		i -= len(m.Start)
		copy(dAtA[i:], m.Start)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Start)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Date) > 0 {
		i -= len(m.Date)
		copy(dAtA[i:], m.Date)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Date)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Folder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Folder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Folder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Approvals != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Approvals))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Documents) > 0 {
		for iNdEx := len(m.Documents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Documents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Group != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Group))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Parent != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Parent))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Group) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Group) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Group) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DSWClass != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.DSWClass))
		i--
		dAtA[i] = 0x58
	}
	if m.GetHours {
		i--
		if m.GetHours {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.Organization != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Organization))
		i--
		dAtA[i] = 0x48
	}
	if m.DSWType != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.DSWType))
		i--
		dAtA[i] = 0x40
	}
	if len(m.NoText) > 0 {
		dAtA10 := make([]byte, len(m.NoText)*10)
		var j9 int
		for _, num1 := range m.NoText {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		i -= j9
		copy(dAtA[i:], dAtA10[:j9])
		i = encodeVarintModel(dAtA, i, uint64(j9))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.NoEmail) > 0 {
		dAtA12 := make([]byte, len(m.NoEmail)*10)
		var j11 int
		for _, num1 := range m.NoEmail {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		i -= j11
		copy(dAtA[i:], dAtA12[:j11])
		i = encodeVarintModel(dAtA, i, uint64(j11))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tag) > 0 {
		i -= len(m.Tag)
		copy(dAtA[i:], m.Tag)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Tag)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Person) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Person) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Person) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DSWUntil) > 0 {
		for k := range m.DSWUntil {
			v := m.DSWUntil[k]
			baseI := i
			n13, err13 := github_com_gogo_protobuf_types.StdTimeMarshalTo((*(&v)), dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime((*(&v))):])
			if err13 != nil {
				return 0, err13
			}
			i -= n13
			i = encodeVarintModel(dAtA, i, uint64(n13))
			i--
			dAtA[i] = 0x12
			i = encodeVarintModel(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintModel(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xaa
		}
	}
	if len(m.DSWRegistrations) > 0 {
		for k := range m.DSWRegistrations {
			v := m.DSWRegistrations[k]
			baseI := i
			n14, err14 := github_com_gogo_protobuf_types.StdTimeMarshalTo((*(&v)), dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime((*(&v))):])
			if err14 != nil {
				return 0, err14
			}
			i -= n14
			i = encodeVarintModel(dAtA, i, uint64(n14))
			i--
			dAtA[i] = 0x12
			i = encodeVarintModel(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintModel(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xa2
		}
	}
	if m.HoursReminder {
		i--
		if m.HoursReminder {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x98
	}
	if len(m.HoursToken) > 0 {
		i -= len(m.HoursToken)
		copy(dAtA[i:], m.HoursToken)
		i = encodeVarintModel(dAtA, i, uint64(len(m.HoursToken)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	if len(m.BackgroundCheck) > 0 {
		i -= len(m.BackgroundCheck)
		copy(dAtA[i:], m.BackgroundCheck)
		i = encodeVarintModel(dAtA, i, uint64(len(m.BackgroundCheck)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	if m.VolgisticsID != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.VolgisticsID))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if len(m.DSWForms) > 0 {
		for iNdEx := len(m.DSWForms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DSWForms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xfa
		}
	}
	if len(m.UnsubscribeToken) > 0 {
		i -= len(m.UnsubscribeToken)
		copy(dAtA[i:], m.UnsubscribeToken)
		i = encodeVarintModel(dAtA, i, uint64(len(m.UnsubscribeToken)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	if m.NoText {
		i--
		if m.NoText {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if m.NoEmail {
		i--
		if m.NoEmail {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if len(m.Notes) > 0 {
		for iNdEx := len(m.Notes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Notes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xda
		}
	}
	if len(m.Email2) > 0 {
		i -= len(m.Email2)
		copy(dAtA[i:], m.Email2)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Email2)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if len(m.WorkPhone) > 0 {
		i -= len(m.WorkPhone)
		copy(dAtA[i:], m.WorkPhone)
		i = encodeVarintModel(dAtA, i, uint64(len(m.WorkPhone)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.HomePhone) > 0 {
		i -= len(m.HomePhone)
		copy(dAtA[i:], m.HomePhone)
		i = encodeVarintModel(dAtA, i, uint64(len(m.HomePhone)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.CellPhone) > 0 {
		i -= len(m.CellPhone)
		copy(dAtA[i:], m.CellPhone)
		i = encodeVarintModel(dAtA, i, uint64(len(m.CellPhone)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	{
		size, err := m.MailAddress.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintModel(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa2
	{
		size, err := m.WorkAddress.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintModel(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x9a
	{
		size, err := m.HomeAddress.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintModel(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x92
	if len(m.InformalName) > 0 {
		i -= len(m.InformalName)
		copy(dAtA[i:], m.InformalName)
		i = encodeVarintModel(dAtA, i, uint64(len(m.InformalName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	n18, err18 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.PWResetTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.PWResetTime):])
	if err18 != nil {
		return 0, err18
	}
	i -= n18
	i = encodeVarintModel(dAtA, i, uint64(n18))
	i--
	dAtA[i] = 0x5a
	if len(m.PWResetToken) > 0 {
		i -= len(m.PWResetToken)
		copy(dAtA[i:], m.PWResetToken)
		i = encodeVarintModel(dAtA, i, uint64(len(m.PWResetToken)))
		i--
		dAtA[i] = 0x52
	}
	n19, err19 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.BadLoginTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.BadLoginTime):])
	if err19 != nil {
		return 0, err19
	}
	i -= n19
	i = encodeVarintModel(dAtA, i, uint64(n19))
	i--
	dAtA[i] = 0x4a
	if m.BadLoginCount != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.BadLoginCount))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CallSign) > 0 {
		i -= len(m.CallSign)
		copy(dAtA[i:], m.CallSign)
		i = encodeVarintModel(dAtA, i, uint64(len(m.CallSign)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SortName) > 0 {
		i -= len(m.SortName)
		copy(dAtA[i:], m.SortName)
		i = encodeVarintModel(dAtA, i, uint64(len(m.SortName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FormalName) > 0 {
		i -= len(m.FormalName)
		copy(dAtA[i:], m.FormalName)
		i = encodeVarintModel(dAtA, i, uint64(len(m.FormalName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PersonNote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PersonNote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PersonNote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Privilege != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Privilege))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Date) > 0 {
		i -= len(m.Date)
		copy(dAtA[i:], m.Date)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Date)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Note) > 0 {
		i -= len(m.Note)
		copy(dAtA[i:], m.Note)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Note)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *Role) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Role) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Role) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Permissions != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Permissions))
		i--
		dAtA[i] = 0x30
	}
	if m.Detail {
		i--
		if m.Detail {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Individual {
		i--
		if m.Individual {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tag) > 0 {
		i -= len(m.Tag)
		copy(dAtA[i:], m.Tag)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Tag)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TextMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TextMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TextMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Recipients) > 0 {
		for iNdEx := len(m.Recipients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Recipients[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x2a
	}
	n20, err20 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp):])
	if err20 != nil {
		return 0, err20
	}
	i -= n20
	i = encodeVarintModel(dAtA, i, uint64(n20))
	i--
	dAtA[i] = 0x22
	if len(m.Groups) > 0 {
		dAtA22 := make([]byte, len(m.Groups)*10)
		var j21 int
		for _, num1 := range m.Groups {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA22[j21] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j21++
			}
			dAtA22[j21] = uint8(num)
			j21++
		}
		i -= j21
		copy(dAtA[i:], dAtA22[:j21])
		i = encodeVarintModel(dAtA, i, uint64(j21))
		i--
		dAtA[i] = 0x1a
	}
	if m.Sender != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Sender))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TextRecipient) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TextRecipient) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TextRecipient) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Responses) > 0 {
		for iNdEx := len(m.Responses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Responses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	n23, err23 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp):])
	if err23 != nil {
		return 0, err23
	}
	i -= n23
	i = encodeVarintModel(dAtA, i, uint64(n23))
	i--
	dAtA[i] = 0x22
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Number) > 0 {
		i -= len(m.Number)
		copy(dAtA[i:], m.Number)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Number)))
		i--
		dAtA[i] = 0x12
	}
	if m.Recipient != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Recipient))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TextResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TextResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TextResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n24, err24 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp):])
	if err24 != nil {
		return 0, err24
	}
	i -= n24
	i = encodeVarintModel(dAtA, i, uint64(n24))
	i--
	dAtA[i] = 0x12
	if len(m.Response) > 0 {
		i -= len(m.Response)
		copy(dAtA[i:], m.Response)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Response)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Venue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Venue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Venue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.URL) > 0 {
		i -= len(m.URL)
		copy(dAtA[i:], m.URL)
		i = encodeVarintModel(dAtA, i, uint64(len(m.URL)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.City) > 0 {
		i -= len(m.City)
		copy(dAtA[i:], m.City)
		i = encodeVarintModel(dAtA, i, uint64(len(m.City)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Venues) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Venues) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Venues) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Venues) > 0 {
		for iNdEx := len(m.Venues) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Venues[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintModel(dAtA []byte, offset int, v uint64) int {
	offset -= sovModel(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Address) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.SameAsHome {
		n += 2
	}
	if m.Latitude != 0 {
		n += 9
	}
	if m.Longitude != 0 {
		n += 9
	}
	if m.FireDistrict != 0 {
		n += 1 + sovModel(uint64(m.FireDistrict))
	}
	return n
}

func (m *Document) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovModel(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.PostedBy != 0 {
		n += 1 + sovModel(uint64(m.PostedBy))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.PostedAt)
	n += 1 + l + sovModel(uint64(l))
	if m.NeedsApproval {
		n += 2
	}
	return n
}

func (m *DSWForm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.From)
	n += 1 + l + sovModel(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.To)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.For)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Invalid)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	return n
}

func (m *EmailMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovModel(uint64(m.ID))
	}
	l = len(m.MessageID)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovModel(uint64(l))
	if m.Type != 0 {
		n += 1 + sovModel(uint64(m.Type))
	}
	if m.Attention {
		n += 2
	}
	if len(m.Groups) > 0 {
		l = 0
		for _, e := range m.Groups {
			l += sovModel(uint64(e))
		}
		n += 1 + sovModel(uint64(l)) + l
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	return n
}

func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovModel(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Date)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Start)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.End)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Venue != 0 {
		n += 1 + sovModel(uint64(m.Venue))
	}
	l = len(m.Details)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovModel(uint64(m.Type))
	}
	if len(m.Groups) > 0 {
		l = 0
		for _, e := range m.Groups {
			l += sovModel(uint64(e))
		}
		n += 1 + sovModel(uint64(l)) + l
	}
	if m.Organization != 0 {
		n += 1 + sovModel(uint64(m.Organization))
	}
	if m.Private {
		n += 2
	}
	if m.RenewsDSW {
		n += 2
	}
	if m.CoveredByDSW {
		n += 2
	}
	return n
}

func (m *Folder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovModel(uint64(m.ID))
	}
	if m.Parent != 0 {
		n += 1 + sovModel(uint64(m.Parent))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Group != 0 {
		n += 1 + sovModel(uint64(m.Group))
	}
	if len(m.Documents) > 0 {
		for _, e := range m.Documents {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	if m.Approvals != 0 {
		n += 1 + sovModel(uint64(m.Approvals))
	}
	return n
}

func (m *Group) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovModel(uint64(m.ID))
	}
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if len(m.NoEmail) > 0 {
		l = 0
		for _, e := range m.NoEmail {
			l += sovModel(uint64(e))
		}
		n += 1 + sovModel(uint64(l)) + l
	}
	if len(m.NoText) > 0 {
		l = 0
		for _, e := range m.NoText {
			l += sovModel(uint64(e))
		}
		n += 1 + sovModel(uint64(l)) + l
	}
	if m.DSWType != 0 {
		n += 1 + sovModel(uint64(m.DSWType))
	}
	if m.Organization != 0 {
		n += 1 + sovModel(uint64(m.Organization))
	}
	if m.GetHours {
		n += 2
	}
	if m.DSWClass != 0 {
		n += 1 + sovModel(uint64(m.DSWClass))
	}
	return n
}

func (m *Person) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovModel(uint64(m.ID))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.FormalName)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.SortName)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.CallSign)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.BadLoginCount != 0 {
		n += 1 + sovModel(uint64(m.BadLoginCount))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.BadLoginTime)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.PWResetToken)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.PWResetTime)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.InformalName)
	if l > 0 {
		n += 2 + l + sovModel(uint64(l))
	}
	l = m.HomeAddress.Size()
	n += 2 + l + sovModel(uint64(l))
	l = m.WorkAddress.Size()
	n += 2 + l + sovModel(uint64(l))
	l = m.MailAddress.Size()
	n += 2 + l + sovModel(uint64(l))
	l = len(m.CellPhone)
	if l > 0 {
		n += 2 + l + sovModel(uint64(l))
	}
	l = len(m.HomePhone)
	if l > 0 {
		n += 2 + l + sovModel(uint64(l))
	}
	l = len(m.WorkPhone)
	if l > 0 {
		n += 2 + l + sovModel(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 2 + l + sovModel(uint64(l))
	}
	l = len(m.Email2)
	if l > 0 {
		n += 2 + l + sovModel(uint64(l))
	}
	if len(m.Notes) > 0 {
		for _, e := range m.Notes {
			l = e.Size()
			n += 2 + l + sovModel(uint64(l))
		}
	}
	if m.NoEmail {
		n += 3
	}
	if m.NoText {
		n += 3
	}
	l = len(m.UnsubscribeToken)
	if l > 0 {
		n += 2 + l + sovModel(uint64(l))
	}
	if len(m.DSWForms) > 0 {
		for _, e := range m.DSWForms {
			l = e.Size()
			n += 2 + l + sovModel(uint64(l))
		}
	}
	if m.VolgisticsID != 0 {
		n += 2 + sovModel(uint64(m.VolgisticsID))
	}
	l = len(m.BackgroundCheck)
	if l > 0 {
		n += 2 + l + sovModel(uint64(l))
	}
	l = len(m.HoursToken)
	if l > 0 {
		n += 2 + l + sovModel(uint64(l))
	}
	if m.HoursReminder {
		n += 3
	}
	if len(m.DSWRegistrations) > 0 {
		for k, v := range m.DSWRegistrations {
			_ = k
			_ = v
			l = github_com_gogo_protobuf_types.SizeOfStdTime(v)
			mapEntrySize := 1 + sovModel(uint64(k)) + 1 + l + sovModel(uint64(l))
			n += mapEntrySize + 2 + sovModel(uint64(mapEntrySize))
		}
	}
	if len(m.DSWUntil) > 0 {
		for k, v := range m.DSWUntil {
			_ = k
			_ = v
			l = github_com_gogo_protobuf_types.SizeOfStdTime(v)
			mapEntrySize := 1 + sovModel(uint64(k)) + 1 + l + sovModel(uint64(l))
			n += mapEntrySize + 2 + sovModel(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *PersonNote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Note)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Date)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Privilege != 0 {
		n += 1 + sovModel(uint64(m.Privilege))
	}
	return n
}

func (m *Role) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovModel(uint64(m.ID))
	}
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Individual {
		n += 2
	}
	if m.Detail {
		n += 2
	}
	if m.Permissions != 0 {
		n += 1 + sovModel(uint64(m.Permissions))
	}
	return n
}

func (m *TextMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovModel(uint64(m.ID))
	}
	if m.Sender != 0 {
		n += 1 + sovModel(uint64(m.Sender))
	}
	if len(m.Groups) > 0 {
		l = 0
		for _, e := range m.Groups {
			l += sovModel(uint64(e))
		}
		n += 1 + sovModel(uint64(l)) + l
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if len(m.Recipients) > 0 {
		for _, e := range m.Recipients {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	return n
}

func (m *TextRecipient) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Recipient != 0 {
		n += 1 + sovModel(uint64(m.Recipient))
	}
	l = len(m.Number)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovModel(uint64(l))
	if len(m.Responses) > 0 {
		for _, e := range m.Responses {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	return n
}

func (m *TextResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Response)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovModel(uint64(l))
	return n
}

func (m *Venue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovModel(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	return n
}

func (m *Venues) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Venues) > 0 {
		for _, e := range m.Venues {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	return n
}

func sovModel(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozModel(x uint64) (n int) {
	return sovModel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Address) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Address{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`SameAsHome:` + fmt.Sprintf("%v", this.SameAsHome) + `,`,
		`Latitude:` + fmt.Sprintf("%v", this.Latitude) + `,`,
		`Longitude:` + fmt.Sprintf("%v", this.Longitude) + `,`,
		`FireDistrict:` + fmt.Sprintf("%v", this.FireDistrict) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Document) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Document{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`PostedBy:` + fmt.Sprintf("%v", this.PostedBy) + `,`,
		`PostedAt:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.PostedAt), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`NeedsApproval:` + fmt.Sprintf("%v", this.NeedsApproval) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DSWForm) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DSWForm{`,
		`From:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.From), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`To:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.To), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`For:` + fmt.Sprintf("%v", this.For) + `,`,
		`Invalid:` + fmt.Sprintf("%v", this.Invalid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EmailMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EmailMessage{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`MessageID:` + fmt.Sprintf("%v", this.MessageID) + `,`,
		`Timestamp:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Timestamp), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Attention:` + fmt.Sprintf("%v", this.Attention) + `,`,
		`Groups:` + fmt.Sprintf("%v", this.Groups) + `,`,
		`From:` + fmt.Sprintf("%v", this.From) + `,`,
		`Subject:` + fmt.Sprintf("%v", this.Subject) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Event) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Event{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`Start:` + fmt.Sprintf("%v", this.Start) + `,`,
		`End:` + fmt.Sprintf("%v", this.End) + `,`,
		`Venue:` + fmt.Sprintf("%v", this.Venue) + `,`,
		`Details:` + fmt.Sprintf("%v", this.Details) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Groups:` + fmt.Sprintf("%v", this.Groups) + `,`,
		`Organization:` + fmt.Sprintf("%v", this.Organization) + `,`,
		`Private:` + fmt.Sprintf("%v", this.Private) + `,`,
		`RenewsDSW:` + fmt.Sprintf("%v", this.RenewsDSW) + `,`,
		`CoveredByDSW:` + fmt.Sprintf("%v", this.CoveredByDSW) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Folder) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDocuments := "[]*Document{"
	for _, f := range this.Documents {
		repeatedStringForDocuments += strings.Replace(f.String(), "Document", "Document", 1) + ","
	}
	repeatedStringForDocuments += "}"
	s := strings.Join([]string{`&Folder{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Parent:` + fmt.Sprintf("%v", this.Parent) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Group:` + fmt.Sprintf("%v", this.Group) + `,`,
		`Documents:` + repeatedStringForDocuments + `,`,
		`Approvals:` + fmt.Sprintf("%v", this.Approvals) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Group) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Group{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Tag:` + fmt.Sprintf("%v", this.Tag) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`NoEmail:` + fmt.Sprintf("%v", this.NoEmail) + `,`,
		`NoText:` + fmt.Sprintf("%v", this.NoText) + `,`,
		`DSWType:` + fmt.Sprintf("%v", this.DSWType) + `,`,
		`Organization:` + fmt.Sprintf("%v", this.Organization) + `,`,
		`GetHours:` + fmt.Sprintf("%v", this.GetHours) + `,`,
		`DSWClass:` + fmt.Sprintf("%v", this.DSWClass) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Person) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNotes := "[]*PersonNote{"
	for _, f := range this.Notes {
		repeatedStringForNotes += strings.Replace(f.String(), "PersonNote", "PersonNote", 1) + ","
	}
	repeatedStringForNotes += "}"
	repeatedStringForDSWForms := "[]*DSWForm{"
	for _, f := range this.DSWForms {
		repeatedStringForDSWForms += strings.Replace(f.String(), "DSWForm", "DSWForm", 1) + ","
	}
	repeatedStringForDSWForms += "}"
	keysForDSWRegistrations := make([]int32, 0, len(this.DSWRegistrations))
	for k, _ := range this.DSWRegistrations {
		keysForDSWRegistrations = append(keysForDSWRegistrations, int32(k))
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForDSWRegistrations)
	mapStringForDSWRegistrations := "map[DSWClass]time.Time{"
	for _, k := range keysForDSWRegistrations {
		mapStringForDSWRegistrations += fmt.Sprintf("%v: %v,", k, this.DSWRegistrations[DSWClass(k)])
	}
	mapStringForDSWRegistrations += "}"
	keysForDSWUntil := make([]int32, 0, len(this.DSWUntil))
	for k, _ := range this.DSWUntil {
		keysForDSWUntil = append(keysForDSWUntil, int32(k))
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForDSWUntil)
	mapStringForDSWUntil := "map[DSWClass]time.Time{"
	for _, k := range keysForDSWUntil {
		mapStringForDSWUntil += fmt.Sprintf("%v: %v,", k, this.DSWUntil[DSWClass(k)])
	}
	mapStringForDSWUntil += "}"
	s := strings.Join([]string{`&Person{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`FormalName:` + fmt.Sprintf("%v", this.FormalName) + `,`,
		`SortName:` + fmt.Sprintf("%v", this.SortName) + `,`,
		`CallSign:` + fmt.Sprintf("%v", this.CallSign) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`BadLoginCount:` + fmt.Sprintf("%v", this.BadLoginCount) + `,`,
		`BadLoginTime:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.BadLoginTime), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`PWResetToken:` + fmt.Sprintf("%v", this.PWResetToken) + `,`,
		`PWResetTime:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.PWResetTime), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`InformalName:` + fmt.Sprintf("%v", this.InformalName) + `,`,
		`HomeAddress:` + strings.Replace(strings.Replace(this.HomeAddress.String(), "Address", "Address", 1), `&`, ``, 1) + `,`,
		`WorkAddress:` + strings.Replace(strings.Replace(this.WorkAddress.String(), "Address", "Address", 1), `&`, ``, 1) + `,`,
		`MailAddress:` + strings.Replace(strings.Replace(this.MailAddress.String(), "Address", "Address", 1), `&`, ``, 1) + `,`,
		`CellPhone:` + fmt.Sprintf("%v", this.CellPhone) + `,`,
		`HomePhone:` + fmt.Sprintf("%v", this.HomePhone) + `,`,
		`WorkPhone:` + fmt.Sprintf("%v", this.WorkPhone) + `,`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`Email2:` + fmt.Sprintf("%v", this.Email2) + `,`,
		`Notes:` + repeatedStringForNotes + `,`,
		`NoEmail:` + fmt.Sprintf("%v", this.NoEmail) + `,`,
		`NoText:` + fmt.Sprintf("%v", this.NoText) + `,`,
		`UnsubscribeToken:` + fmt.Sprintf("%v", this.UnsubscribeToken) + `,`,
		`DSWForms:` + repeatedStringForDSWForms + `,`,
		`VolgisticsID:` + fmt.Sprintf("%v", this.VolgisticsID) + `,`,
		`BackgroundCheck:` + fmt.Sprintf("%v", this.BackgroundCheck) + `,`,
		`HoursToken:` + fmt.Sprintf("%v", this.HoursToken) + `,`,
		`HoursReminder:` + fmt.Sprintf("%v", this.HoursReminder) + `,`,
		`DSWRegistrations:` + mapStringForDSWRegistrations + `,`,
		`DSWUntil:` + mapStringForDSWUntil + `,`,
		`}`,
	}, "")
	return s
}
func (this *PersonNote) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PersonNote{`,
		`Note:` + fmt.Sprintf("%v", this.Note) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`Privilege:` + fmt.Sprintf("%v", this.Privilege) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Role) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Role{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Tag:` + fmt.Sprintf("%v", this.Tag) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Individual:` + fmt.Sprintf("%v", this.Individual) + `,`,
		`Detail:` + fmt.Sprintf("%v", this.Detail) + `,`,
		`Permissions:` + fmt.Sprintf("%v", this.Permissions) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TextMessage) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRecipients := "[]*TextRecipient{"
	for _, f := range this.Recipients {
		repeatedStringForRecipients += strings.Replace(f.String(), "TextRecipient", "TextRecipient", 1) + ","
	}
	repeatedStringForRecipients += "}"
	s := strings.Join([]string{`&TextMessage{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Sender:` + fmt.Sprintf("%v", this.Sender) + `,`,
		`Groups:` + fmt.Sprintf("%v", this.Groups) + `,`,
		`Timestamp:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Timestamp), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`Recipients:` + repeatedStringForRecipients + `,`,
		`}`,
	}, "")
	return s
}
func (this *TextRecipient) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForResponses := "[]*TextResponse{"
	for _, f := range this.Responses {
		repeatedStringForResponses += strings.Replace(f.String(), "TextResponse", "TextResponse", 1) + ","
	}
	repeatedStringForResponses += "}"
	s := strings.Join([]string{`&TextRecipient{`,
		`Recipient:` + fmt.Sprintf("%v", this.Recipient) + `,`,
		`Number:` + fmt.Sprintf("%v", this.Number) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Timestamp:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Timestamp), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`Responses:` + repeatedStringForResponses + `,`,
		`}`,
	}, "")
	return s
}
func (this *TextResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TextResponse{`,
		`Response:` + fmt.Sprintf("%v", this.Response) + `,`,
		`Timestamp:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Timestamp), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Venue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Venue{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`City:` + fmt.Sprintf("%v", this.City) + `,`,
		`URL:` + fmt.Sprintf("%v", this.URL) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Venues) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForVenues := "[]*Venue{"
	for _, f := range this.Venues {
		repeatedStringForVenues += strings.Replace(f.String(), "Venue", "Venue", 1) + ","
	}
	repeatedStringForVenues += "}"
	s := strings.Join([]string{`&Venues{`,
		`Venues:` + repeatedStringForVenues + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringModel(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Address) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Address: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Address: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SameAsHome", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SameAsHome = bool(v != 0)
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Latitude = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Longitude = float64(math.Float64frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FireDistrict", wireType)
			}
			m.FireDistrict = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FireDistrict |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Document) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Document: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Document: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= DocumentID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostedBy", wireType)
			}
			m.PostedBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PostedBy |= PersonID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.PostedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedsApproval", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedsApproval = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DSWForm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DSWForm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DSWForm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.From, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.To, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field For", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.For = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invalid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Invalid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmailMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmailMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmailMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= EmailMessageID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= EmailMessageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attention", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Attention = bool(v != 0)
		case 6:
			if wireType == 0 {
				var v GroupID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= GroupID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Groups = append(m.Groups, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthModel
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthModel
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Groups) == 0 {
					m.Groups = make([]GroupID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v GroupID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= GroupID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Groups = append(m.Groups, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= EventID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Date = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Start = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.End = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Venue", wireType)
			}
			m.Venue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Venue |= VenueID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= EventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType == 0 {
				var v GroupID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= GroupID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Groups = append(m.Groups, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthModel
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthModel
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Groups) == 0 {
					m.Groups = make([]GroupID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v GroupID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= GroupID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Groups = append(m.Groups, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			m.Organization = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Organization |= Organization(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Private", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Private = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenewsDSW", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RenewsDSW = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoveredByDSW", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CoveredByDSW = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Folder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Folder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Folder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= FolderID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			m.Parent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Parent |= FolderID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			m.Group = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Group |= GroupID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Documents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Documents = append(m.Documents, &Document{})
			if err := m.Documents[len(m.Documents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Approvals", wireType)
			}
			m.Approvals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Approvals |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Group) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Group: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Group: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= GroupID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = GroupTag(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v PersonID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= PersonID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NoEmail = append(m.NoEmail, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthModel
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthModel
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.NoEmail) == 0 {
					m.NoEmail = make([]PersonID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v PersonID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= PersonID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NoEmail = append(m.NoEmail, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NoEmail", wireType)
			}
		case 7:
			if wireType == 0 {
				var v PersonID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= PersonID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NoText = append(m.NoText, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthModel
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthModel
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.NoText) == 0 {
					m.NoText = make([]PersonID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v PersonID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= PersonID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NoText = append(m.NoText, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NoText", wireType)
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DSWType", wireType)
			}
			m.DSWType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DSWType |= DSWType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			m.Organization = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Organization |= Organization(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetHours", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GetHours = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DSWClass", wireType)
			}
			m.DSWClass = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DSWClass |= DSWClass(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Person) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Person: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Person: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= PersonID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FormalName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FormalName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SortName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallSign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallSign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = append(m.Password[:0], dAtA[iNdEx:postIndex]...)
			if m.Password == nil {
				m.Password = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadLoginCount", wireType)
			}
			m.BadLoginCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BadLoginCount |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadLoginTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.BadLoginTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PWResetToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PWResetToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PWResetTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.PWResetTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InformalName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InformalName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HomeAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WorkAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MailAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CellPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomePhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomePhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notes = append(m.Notes, &PersonNote{})
			if err := m.Notes[len(m.Notes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoEmail", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoEmail = bool(v != 0)
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoText", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoText = bool(v != 0)
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnsubscribeToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnsubscribeToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DSWForms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DSWForms = append(m.DSWForms, &DSWForm{})
			if err := m.DSWForms[len(m.DSWForms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolgisticsID", wireType)
			}
			m.VolgisticsID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VolgisticsID |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackgroundCheck", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackgroundCheck = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HoursToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HoursToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HoursReminder", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HoursReminder = bool(v != 0)
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DSWRegistrations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DSWRegistrations == nil {
				m.DSWRegistrations = make(map[DSWClass]time.Time)
			}
			var mapkey int32
			mapvalue := new(time.Time)
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthModel
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthModel
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(mapvalue, dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipModel(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthModel
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DSWRegistrations[DSWClass(mapkey)] = *mapvalue
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DSWUntil", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DSWUntil == nil {
				m.DSWUntil = make(map[DSWClass]time.Time)
			}
			var mapkey int32
			mapvalue := new(time.Time)
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthModel
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthModel
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(mapvalue, dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipModel(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthModel
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DSWUntil[DSWClass(mapkey)] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PersonNote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PersonNote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PersonNote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Note = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Date = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Privilege", wireType)
			}
			m.Privilege = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Privilege |= Privilege(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Role) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Role: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Role: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= RoleID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = RoleTag(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Individual", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Individual = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Detail = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			m.Permissions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Permissions |= Permission(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TextMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TextMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TextMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= TextMessageID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			m.Sender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sender |= PersonID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v GroupID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= GroupID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Groups = append(m.Groups, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthModel
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthModel
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Groups) == 0 {
					m.Groups = make([]GroupID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v GroupID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= GroupID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Groups = append(m.Groups, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipients = append(m.Recipients, &TextRecipient{})
			if err := m.Recipients[len(m.Recipients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TextRecipient) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TextRecipient: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TextRecipient: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			m.Recipient = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Recipient |= PersonID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Number = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Responses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Responses = append(m.Responses, &TextResponse{})
			if err := m.Responses[len(m.Responses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TextResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TextResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TextResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Venue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Venue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Venue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= VenueID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Venues) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Venues: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Venues: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Venues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Venues = append(m.Venues, &Venue{})
			if err := m.Venues[len(m.Venues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthModel
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupModel
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthModel
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthModel        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModel          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupModel = fmt.Errorf("proto: unexpected end of group")
)
