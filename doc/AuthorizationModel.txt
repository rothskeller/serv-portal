The primary objects are people, roles, and events.
- A person is someone who can log in to the site (or, who used to be able to;
  logins can be disabled without deleting the person).  Actions on a person
  include:
  - CreatePerson
  - ViewPerson
  - ModifyPerson (i.e., name, email, etc.)
  - DisablePerson
- A role is a group of people.  Each person can directly hold zero or more
  roles.  In addition, roles can hold other roles, so each person may hold zero
  or more additional roles indirectly.  Actions on a role include:
  - CreateRole
  - ViewRole
  - ModifyRole
  - DeleteRole
  - AssignRoleToPerson
  - ViewRoleAssignments
  - RemoveRoleFromPerson
- An event is something to which holders of one or more roles are invited, and
  (optionally) at which attendance is tracked.  Actions on an event include:
  - CreateEvent
  - ViewEvent
  - ModifyEvent (i.e., date, name, etc.)
  - DeleteEvent
  - InviteRoleToEvent
  - RemoveRoleFromEvent
  - ViewAttendanceAtEvent
  - RecordAttendanceAtEvent
In addition, there is one non-targeted action:
  - Login
Many more object types and corresponding actions will be added as the site
features are developed.

For compactness and maintenance simplicity, it makes sense to combine some of
the above actions into a smaller set of privileges.  There are currently three
defined privileges:
  - ViewMembers on a role allows seeing people who have that role.  In order to
    see a person, you only need ViewMembers on any one of the roles held by that
    person.
  - AssignRole on a role allows you to assign people to that role, or remove
    them from that role, subject to the role assignment constraints noted above.
  - ManageEvents on a role allows you to manage events to which people holding
    that role are invited.  To create, edit, or delete an event, you must have
    ManageEvents on all of the roles that are invited to that event.  To view or
    record attendance at an event, you must have ManageEvents on at least one of
    those roles.
There is also one pseudo-privilege:
  - HoldsRole on a role states that holders of the actor role are also implicit
    holders of the target role (recursively).  It also states that roles with
    (real) privileges on the target role implicitly have those same privileges
    on the actor role (recursively).  Every role has this "privilege" on itself.
    Although this is not technically a "privilege", it gets stored and evaluated
    the same way as the real privileges.

The privileges are granted on a per-target-role basis.  Thus, one can invoke
ViewMembers actions on the people who hold specific roles, not on individual
people.  And one can invoke CreateEvent, etc.  actions on events to which
certain roles are invited, not on individual events.

The privileges to perform these actions are assigned to roles.  Thus, each role
has a matrix of privileges targeting each other role, indicating whether or not
holders of the actor role holds the corresponding privileges for actions on the
target role.

Here is the mapping from action to privilege:
  - CreatePerson: requires AssignRole for any role.
  - ViewPerson: requires ViewMembers on at least one of the roles held by the
    target person.
  - ModifyPerson: requires membership in the Webmaster role; also allowed for
    individuals to modify themselves.
  - DisablePerson: requires AssignRole for the Disabled Users role, or for all
    roles that the person holds.
  - CreateRole: requires membership in the Webmaster role.
  - ViewRole: requires membership in the Webmaster role.
  - ModifyRole: requires membership in the Webmaster role.
  - DeleteRole: requires membership in the Webmaster role.
  - AssignRoleToPerson: requires AssignRole.
  - ViewRoleAssignments: requires ViewMembers on any one of the roles held by
    the target person.  If you can see that person, you can see all of their
    roles.
  - RemoveRoleFromPerson: requires AssignRole.
  - CreateEvent: requires ManageEvents on all of the roles to be invited to the
    event.
  - ViewEvent: requires membership in a role invited to the event.
  - ModifyEvent: requires ManageEvents on all of the roles invited, or to be
    invited, to the event.
  - DeleteEvent: requires ManageEvents on all of the roles invited to the event.
  - InviteRoleToEvent: requires ManageEvents on all of the roles invited, or to
    be invited, to the event.
  - RemoveRoleFromEvent: requires ManageEvents on all of the roles invited to
    the event.
  - ViewAttendanceAtEvent: requires ManageEvents on any one of the roles invited
    to the event.
  - RecordAttendanceAtEvent: requires ManageEvents on any one of the roles
    invited to the event.
  - Login: requires membership in any role other than Disabled Users.

In order to enforce structure, there are some limitations on role assignments:
  - Some roles cannot be held directly, only indirectly.
  - Some roles can be held by only one person.

The mapping of (actor role, target role, privileges) is stored in the database
in two forms.  (In both cases only directly applied privileges are stored, not
the transitive closure of them.)  The form that gets read and used by the
server, for performance, is a BLOB column on the role table that encodes all of
the tuples with that role as actor.  When writing, however, the code also
maintains a more traditional role_privilege table, which can be used for offline
queries.
