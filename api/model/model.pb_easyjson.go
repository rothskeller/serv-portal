// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6578def1DecodeRothskellerNetServModel(in *jlexer.Lexer, out *Venues) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "venues":
			if in.IsNull() {
				in.Skip()
				out.Venues = nil
			} else {
				in.Delim('[')
				if out.Venues == nil {
					if !in.IsDelim(']') {
						out.Venues = make([]*Venue, 0, 8)
					} else {
						out.Venues = []*Venue{}
					}
				} else {
					out.Venues = (out.Venues)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Venue
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Venue)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Venues = append(out.Venues, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeRothskellerNetServModel(out *jwriter.Writer, in Venues) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Venues) != 0 {
		const prefix string = ",\"venues\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v2, v3 := range in.Venues {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Venues) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeRothskellerNetServModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Venues) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeRothskellerNetServModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Venues) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeRothskellerNetServModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Venues) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeRothskellerNetServModel(l, v)
}
func easyjson6578def1DecodeRothskellerNetServModel1(in *jlexer.Lexer, out *Venue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = VenueID(in.Int())
		case "name":
			out.Name = string(in.String())
		case "address":
			out.Address = string(in.String())
		case "city":
			out.City = string(in.String())
		case "url":
			out.URL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeRothskellerNetServModel1(out *jwriter.Writer, in Venue) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Address != "" {
		const prefix string = ",\"address\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Address))
	}
	if in.City != "" {
		const prefix string = ",\"city\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.City))
	}
	if in.URL != "" {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.URL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Venue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeRothskellerNetServModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Venue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeRothskellerNetServModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Venue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeRothskellerNetServModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Venue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeRothskellerNetServModel1(l, v)
}
func easyjson6578def1DecodeRothskellerNetServModel2(in *jlexer.Lexer, out *Role) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = RoleID(in.Int())
		case "tag":
			out.Tag = RoleTag(in.String())
		case "name":
			out.Name = string(in.String())
		case "individual":
			out.Individual = bool(in.Bool())
		case "privileges":
			(out.Privileges).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeRothskellerNetServModel2(out *jwriter.Writer, in Role) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Tag != "" {
		const prefix string = ",\"tag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Tag))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Individual {
		const prefix string = ",\"individual\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Individual))
	}
	{
		const prefix string = ",\"privileges\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Privileges).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Role) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeRothskellerNetServModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Role) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeRothskellerNetServModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Role) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeRothskellerNetServModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Role) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeRothskellerNetServModel2(l, v)
}
func easyjson6578def1DecodeRothskellerNetServModel3(in *jlexer.Lexer, out *PersonEmail) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "email":
			out.Email = string(in.String())
		case "label":
			out.Label = string(in.String())
		case "bad":
			out.Bad = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeRothskellerNetServModel3(out *jwriter.Writer, in PersonEmail) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Email != "" {
		const prefix string = ",\"email\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Email))
	}
	if in.Label != "" {
		const prefix string = ",\"label\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Label))
	}
	if in.Bad {
		const prefix string = ",\"bad\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Bad))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PersonEmail) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeRothskellerNetServModel3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PersonEmail) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeRothskellerNetServModel3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PersonEmail) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeRothskellerNetServModel3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PersonEmail) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeRothskellerNetServModel3(l, v)
}
func easyjson6578def1DecodeRothskellerNetServModel4(in *jlexer.Lexer, out *Person) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = PersonID(in.Int())
		case "username":
			out.Username = string(in.String())
		case "informalName":
			out.InformalName = string(in.String())
		case "formalName":
			out.FormalName = string(in.String())
		case "sortName":
			out.SortName = string(in.String())
		case "callSign":
			out.CallSign = string(in.String())
		case "emails":
			if in.IsNull() {
				in.Skip()
				out.Emails = nil
			} else {
				in.Delim('[')
				if out.Emails == nil {
					if !in.IsDelim(']') {
						out.Emails = make([]*PersonEmail, 0, 8)
					} else {
						out.Emails = []*PersonEmail{}
					}
				} else {
					out.Emails = (out.Emails)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *PersonEmail
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(PersonEmail)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.Emails = append(out.Emails, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "homeAddress":
			(out.HomeAddress).UnmarshalEasyJSON(in)
		case "workAddress":
			(out.WorkAddress).UnmarshalEasyJSON(in)
		case "mailAddress":
			(out.MailAddress).UnmarshalEasyJSON(in)
		case "cellPhone":
			out.CellPhone = string(in.String())
		case "homePhone":
			out.HomePhone = string(in.String())
		case "workPhone":
			out.WorkPhone = string(in.String())
		case "password":
			if in.IsNull() {
				in.Skip()
				out.Password = nil
			} else {
				out.Password = in.Bytes()
			}
		case "badLoginCount":
			out.BadLoginCount = int(in.Int())
		case "badLoginTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.BadLoginTime).UnmarshalJSON(data))
			}
		case "pwresetToken":
			out.PWResetToken = string(in.String())
		case "pwresetTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.PWResetTime).UnmarshalJSON(data))
			}
		case "roles":
			if in.IsNull() {
				in.Skip()
				out.Roles = nil
			} else {
				in.Delim('[')
				if out.Roles == nil {
					if !in.IsDelim(']') {
						out.Roles = make([]RoleID, 0, 8)
					} else {
						out.Roles = []RoleID{}
					}
				} else {
					out.Roles = (out.Roles)[:0]
				}
				for !in.IsDelim(']') {
					var v6 RoleID
					v6 = RoleID(in.Int())
					out.Roles = append(out.Roles, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "privileges":
			(out.Privileges).UnmarshalEasyJSON(in)
		case "archive":
			if in.IsNull() {
				in.Skip()
				out.Archive = nil
			} else {
				in.Delim('[')
				if out.Archive == nil {
					if !in.IsDelim(']') {
						out.Archive = make([]string, 0, 4)
					} else {
						out.Archive = []string{}
					}
				} else {
					out.Archive = (out.Archive)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.Archive = append(out.Archive, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeRothskellerNetServModel4(out *jwriter.Writer, in Person) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Username != "" {
		const prefix string = ",\"username\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"informalName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.InformalName))
	}
	{
		const prefix string = ",\"formalName\":"
		out.RawString(prefix)
		out.String(string(in.FormalName))
	}
	{
		const prefix string = ",\"sortName\":"
		out.RawString(prefix)
		out.String(string(in.SortName))
	}
	if in.CallSign != "" {
		const prefix string = ",\"callSign\":"
		out.RawString(prefix)
		out.String(string(in.CallSign))
	}
	if len(in.Emails) != 0 {
		const prefix string = ",\"emails\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v8, v9 := range in.Emails {
				if v8 > 0 {
					out.RawByte(',')
				}
				if v9 == nil {
					out.RawString("null")
				} else {
					(*v9).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"homeAddress\":"
		out.RawString(prefix)
		(in.HomeAddress).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"workAddress\":"
		out.RawString(prefix)
		(in.WorkAddress).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"mailAddress\":"
		out.RawString(prefix)
		(in.MailAddress).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"cellPhone\":"
		out.RawString(prefix)
		out.String(string(in.CellPhone))
	}
	{
		const prefix string = ",\"homePhone\":"
		out.RawString(prefix)
		out.String(string(in.HomePhone))
	}
	{
		const prefix string = ",\"workPhone\":"
		out.RawString(prefix)
		out.String(string(in.WorkPhone))
	}
	if len(in.Password) != 0 {
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Password)
	}
	if in.BadLoginCount != 0 {
		const prefix string = ",\"badLoginCount\":"
		out.RawString(prefix)
		out.Int(int(in.BadLoginCount))
	}
	{
		const prefix string = ",\"badLoginTime\":"
		out.RawString(prefix)
		out.Raw((in.BadLoginTime).MarshalJSON())
	}
	if in.PWResetToken != "" {
		const prefix string = ",\"pwresetToken\":"
		out.RawString(prefix)
		out.String(string(in.PWResetToken))
	}
	{
		const prefix string = ",\"pwresetTime\":"
		out.RawString(prefix)
		out.Raw((in.PWResetTime).MarshalJSON())
	}
	if len(in.Roles) != 0 {
		const prefix string = ",\"roles\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v12, v13 := range in.Roles {
				if v12 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v13))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"privileges\":"
		out.RawString(prefix)
		(in.Privileges).MarshalEasyJSON(out)
	}
	if len(in.Archive) != 0 {
		const prefix string = ",\"archive\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v14, v15 := range in.Archive {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Person) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeRothskellerNetServModel4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Person) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeRothskellerNetServModel4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Person) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeRothskellerNetServModel4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Person) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeRothskellerNetServModel4(l, v)
}
func easyjson6578def1DecodeRothskellerNetServModel5(in *jlexer.Lexer, out *Group) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = GroupID(in.Int())
		case "tag":
			out.Tag = GroupTag(in.String())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeRothskellerNetServModel5(out *jwriter.Writer, in Group) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Tag != "" {
		const prefix string = ",\"tag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Tag))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Group) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeRothskellerNetServModel5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Group) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeRothskellerNetServModel5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Group) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeRothskellerNetServModel5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Group) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeRothskellerNetServModel5(l, v)
}
func easyjson6578def1DecodeRothskellerNetServModel6(in *jlexer.Lexer, out *Event) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = EventID(in.Int())
		case "name":
			out.Name = string(in.String())
		case "date":
			out.Date = string(in.String())
		case "start":
			out.Start = string(in.String())
		case "end":
			out.End = string(in.String())
		case "venue":
			out.Venue = VenueID(in.Int())
		case "details":
			out.Details = string(in.String())
		case "type":
			out.Type = EventType(in.Uint32())
		case "groups":
			if in.IsNull() {
				in.Skip()
				out.Groups = nil
			} else {
				in.Delim('[')
				if out.Groups == nil {
					if !in.IsDelim(']') {
						out.Groups = make([]GroupID, 0, 8)
					} else {
						out.Groups = []GroupID{}
					}
				} else {
					out.Groups = (out.Groups)[:0]
				}
				for !in.IsDelim(']') {
					var v16 GroupID
					v16 = GroupID(in.Int())
					out.Groups = append(out.Groups, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "sccAresID":
			out.SccAresID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeRothskellerNetServModel6(out *jwriter.Writer, in Event) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Date != "" {
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Date))
	}
	if in.Start != "" {
		const prefix string = ",\"start\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Start))
	}
	if in.End != "" {
		const prefix string = ",\"end\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.End))
	}
	if in.Venue != 0 {
		const prefix string = ",\"venue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Venue))
	}
	if in.Details != "" {
		const prefix string = ",\"details\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Details))
	}
	if in.Type != 0 {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Type))
	}
	if len(in.Groups) != 0 {
		const prefix string = ",\"groups\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v17, v18 := range in.Groups {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v18))
			}
			out.RawByte(']')
		}
	}
	if in.SccAresID != "" {
		const prefix string = ",\"sccAresID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SccAresID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Event) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeRothskellerNetServModel6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Event) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeRothskellerNetServModel6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Event) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeRothskellerNetServModel6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Event) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeRothskellerNetServModel6(l, v)
}
func easyjson6578def1DecodeRothskellerNetServModel7(in *jlexer.Lexer, out *AuthzData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "groups":
			if in.IsNull() {
				in.Skip()
				out.Groups = nil
			} else {
				in.Delim('[')
				if out.Groups == nil {
					if !in.IsDelim(']') {
						out.Groups = make([]*Group, 0, 8)
					} else {
						out.Groups = []*Group{}
					}
				} else {
					out.Groups = (out.Groups)[:0]
				}
				for !in.IsDelim(']') {
					var v19 *Group
					if in.IsNull() {
						in.Skip()
						v19 = nil
					} else {
						if v19 == nil {
							v19 = new(Group)
						}
						(*v19).UnmarshalEasyJSON(in)
					}
					out.Groups = append(out.Groups, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "roles":
			if in.IsNull() {
				in.Skip()
				out.Roles = nil
			} else {
				in.Delim('[')
				if out.Roles == nil {
					if !in.IsDelim(']') {
						out.Roles = make([]*Role, 0, 8)
					} else {
						out.Roles = []*Role{}
					}
				} else {
					out.Roles = (out.Roles)[:0]
				}
				for !in.IsDelim(']') {
					var v20 *Role
					if in.IsNull() {
						in.Skip()
						v20 = nil
					} else {
						if v20 == nil {
							v20 = new(Role)
						}
						(*v20).UnmarshalEasyJSON(in)
					}
					out.Roles = append(out.Roles, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeRothskellerNetServModel7(out *jwriter.Writer, in AuthzData) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Groups) != 0 {
		const prefix string = ",\"groups\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v21, v22 := range in.Groups {
				if v21 > 0 {
					out.RawByte(',')
				}
				if v22 == nil {
					out.RawString("null")
				} else {
					(*v22).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Roles) != 0 {
		const prefix string = ",\"roles\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v23, v24 := range in.Roles {
				if v23 > 0 {
					out.RawByte(',')
				}
				if v24 == nil {
					out.RawString("null")
				} else {
					(*v24).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuthzData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeRothskellerNetServModel7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AuthzData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeRothskellerNetServModel7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuthzData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeRothskellerNetServModel7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AuthzData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeRothskellerNetServModel7(l, v)
}
func easyjson6578def1DecodeRothskellerNetServModel8(in *jlexer.Lexer, out *Address) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "sameAsHome":
			out.SameAsHome = bool(in.Bool())
		case "latitude":
			out.Latitude = float64(in.Float64())
		case "longitude":
			out.Longitude = float64(in.Float64())
		case "fireDistrict":
			out.FireDistrict = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6578def1EncodeRothskellerNetServModel8(out *jwriter.Writer, in Address) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Address != "" {
		const prefix string = ",\"address\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"sameAsHome\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.SameAsHome))
	}
	if in.Latitude != 0 {
		const prefix string = ",\"latitude\":"
		out.RawString(prefix)
		out.Float64(float64(in.Latitude))
	}
	if in.Longitude != 0 {
		const prefix string = ",\"longitude\":"
		out.RawString(prefix)
		out.Float64(float64(in.Longitude))
	}
	{
		const prefix string = ",\"fireDistrict\":"
		out.RawString(prefix)
		out.Int(int(in.FireDistrict))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Address) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6578def1EncodeRothskellerNetServModel8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Address) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6578def1EncodeRothskellerNetServModel8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Address) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6578def1DecodeRothskellerNetServModel8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Address) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6578def1DecodeRothskellerNetServModel8(l, v)
}
